(_ :: Int,_ :: Int)
(_ :: Int,x :: Int)
(_ :: Int,0 :: Int)
(_ :: Int,id _ :: Int)
(_ :: Int,_ :: Bool)
(_ :: Int,_ :: Char)
(_ :: Int,_ :: [Int])
(x :: Int,_ :: Int)
(0 :: Int,_ :: Int)
(id _ :: Int,_ :: Int)
(_ :: Bool,_ :: Int)
(_ :: Char,_ :: Int)
(_ :: [Int],_ :: Int)
(_ :: Int,y :: Int)
(_ :: Int,1 :: Int)
(_ :: Int,id x :: Int)
(_ :: Int,id 0 :: Int)
(_ :: Int,id (id _) :: Int)
(_ :: Int,negate _ :: Int)
(_ :: Int,abs _ :: Int)
(_ :: Int,_ + _ :: Int)
(_ :: Int,head _ :: Int)
(_ :: Int,ord _ :: Int)
(_ :: Int,p :: Bool)
(_ :: Int,False :: Bool)
(_ :: Int,True :: Bool)
(_ :: Int,not _ :: Bool)
(_ :: Int,c :: Char)
(_ :: Int,'a' :: Char)
(_ :: Int,xs :: [Int])
(_ :: Int,[] :: [Int])
(_ :: Int,_:_ :: [Int])
(_ :: Int,id :: Int -> Int)
(_ :: Int,(+) :: Int -> Int -> Int)
(x :: Int,x :: Int)
(x :: Int,0 :: Int)
(x :: Int,id _ :: Int)
(x :: Int,_ :: Bool)
(x :: Int,_ :: Char)
(x :: Int,_ :: [Int])
(0 :: Int,x :: Int)
(0 :: Int,0 :: Int)
(0 :: Int,id _ :: Int)
(0 :: Int,_ :: Bool)
(0 :: Int,_ :: Char)
(0 :: Int,_ :: [Int])
(id _ :: Int,x :: Int)
(id _ :: Int,0 :: Int)
(id _ :: Int,id _ :: Int)
(id _ :: Int,_ :: Bool)
(id _ :: Int,_ :: Char)
(id _ :: Int,_ :: [Int])
(_ :: Bool,x :: Int)
(_ :: Bool,0 :: Int)
(_ :: Bool,id _ :: Int)
(_ :: Bool,_ :: Bool)
(_ :: Bool,_ :: Char)
(_ :: Bool,_ :: [Int])
(_ :: Char,x :: Int)
(_ :: Char,0 :: Int)
(_ :: Char,id _ :: Int)
(_ :: Char,_ :: Bool)
(_ :: Char,_ :: Char)
(_ :: Char,_ :: [Int])
(_ :: [Int],x :: Int)
(_ :: [Int],0 :: Int)
(_ :: [Int],id _ :: Int)
(_ :: [Int],_ :: Bool)
(_ :: [Int],_ :: Char)
(_ :: [Int],_ :: [Int])
(y :: Int,_ :: Int)
(1 :: Int,_ :: Int)
(id x :: Int,_ :: Int)
(id 0 :: Int,_ :: Int)
(id (id _) :: Int,_ :: Int)
(negate _ :: Int,_ :: Int)
(abs _ :: Int,_ :: Int)
(_ + _ :: Int,_ :: Int)
(head _ :: Int,_ :: Int)
(ord _ :: Int,_ :: Int)
(p :: Bool,_ :: Int)
(False :: Bool,_ :: Int)
(True :: Bool,_ :: Int)
(not _ :: Bool,_ :: Int)
(c :: Char,_ :: Int)
('a' :: Char,_ :: Int)
(xs :: [Int],_ :: Int)
([] :: [Int],_ :: Int)
(_:_ :: [Int],_ :: Int)
(id :: Int -> Int,_ :: Int)
((+) :: Int -> Int -> Int,_ :: Int)
(_ :: Int,z :: Int)
(_ :: Int,-1 :: Int)
(_ :: Int,id y :: Int)
(_ :: Int,id 1 :: Int)
(_ :: Int,id (id x) :: Int)
(_ :: Int,id (id 0) :: Int)
(_ :: Int,id (id (id _)) :: Int)
(_ :: Int,id (negate _) :: Int)
(_ :: Int,id (abs _) :: Int)
(_ :: Int,id (_ + _) :: Int)
(_ :: Int,id (head _) :: Int)
(_ :: Int,id (ord _) :: Int)
(_ :: Int,negate x :: Int)
(_ :: Int,negate 0 :: Int)
(_ :: Int,negate (id _) :: Int)
(_ :: Int,abs x :: Int)
(_ :: Int,abs 0 :: Int)
(_ :: Int,abs (id _) :: Int)
(_ :: Int,_ + x :: Int)
(_ :: Int,_ + 0 :: Int)
(_ :: Int,_ + id _ :: Int)
(_ :: Int,x + _ :: Int)
(_ :: Int,0 + _ :: Int)
(_ :: Int,id _ + _ :: Int)
(_ :: Int,_ * _ :: Int)
(_ :: Int,f _ :: Int)
(_ :: Int,head xs :: Int)
(_ :: Int,head [] :: Int)
(_ :: Int,head (_:_) :: Int)
(_ :: Int,ord c :: Int)
(_ :: Int,ord 'a' :: Int)
(_ :: Int,q :: Bool)
(_ :: Int,not p :: Bool)
(_ :: Int,not False :: Bool)
(_ :: Int,not True :: Bool)
(_ :: Int,not (not _) :: Bool)
(_ :: Int,_ || _ :: Bool)
(_ :: Int,d :: Char)
(_ :: Int,' ' :: Char)
(_ :: Int,ys :: [Int])
(_ :: Int,[0] :: [Int])
(_ :: Int,_:xs :: [Int])
(_ :: Int,[_] :: [Int])
(_ :: Int,_:_:_ :: [Int])
(_ :: Int,x:_ :: [Int])
(_ :: Int,0:_ :: [Int])
(_ :: Int,id _:_ :: [Int])
(_ :: Int,tail _ :: [Int])
(_ :: Int,_ ++ _ :: [Int])
(_ :: Int,negate :: Int -> Int)
(_ :: Int,abs :: Int -> Int)
(_ :: Int,(_ +) :: Int -> Int)
(_ :: Int,(*) :: Int -> Int -> Int)
(_ :: Int,not :: Bool -> Bool)
(_ :: Int,(||) :: Bool -> Bool -> Bool)
(x :: Int,y :: Int)
(x :: Int,1 :: Int)
(x :: Int,id x :: Int)
(x :: Int,id 0 :: Int)
(x :: Int,id (id _) :: Int)
(x :: Int,negate _ :: Int)
(x :: Int,abs _ :: Int)
(x :: Int,_ + _ :: Int)
(x :: Int,head _ :: Int)
(x :: Int,ord _ :: Int)
(x :: Int,p :: Bool)
(x :: Int,False :: Bool)
(x :: Int,True :: Bool)
(x :: Int,not _ :: Bool)
(x :: Int,c :: Char)
(x :: Int,'a' :: Char)
(x :: Int,xs :: [Int])
(x :: Int,[] :: [Int])
(x :: Int,_:_ :: [Int])
(x :: Int,id :: Int -> Int)
(x :: Int,(+) :: Int -> Int -> Int)
(0 :: Int,y :: Int)
(0 :: Int,1 :: Int)
(0 :: Int,id x :: Int)
(0 :: Int,id 0 :: Int)
(0 :: Int,id (id _) :: Int)
(0 :: Int,negate _ :: Int)
(0 :: Int,abs _ :: Int)
(0 :: Int,_ + _ :: Int)
(0 :: Int,head _ :: Int)
(0 :: Int,ord _ :: Int)
(0 :: Int,p :: Bool)
(0 :: Int,False :: Bool)
(0 :: Int,True :: Bool)
(0 :: Int,not _ :: Bool)
(0 :: Int,c :: Char)
(0 :: Int,'a' :: Char)
(0 :: Int,xs :: [Int])
(0 :: Int,[] :: [Int])
(0 :: Int,_:_ :: [Int])
(0 :: Int,id :: Int -> Int)
(0 :: Int,(+) :: Int -> Int -> Int)
(id _ :: Int,y :: Int)
(id _ :: Int,1 :: Int)
(id _ :: Int,id x :: Int)
(id _ :: Int,id 0 :: Int)
(id _ :: Int,id (id _) :: Int)
(id _ :: Int,negate _ :: Int)
(id _ :: Int,abs _ :: Int)
(id _ :: Int,_ + _ :: Int)
(id _ :: Int,head _ :: Int)
(id _ :: Int,ord _ :: Int)
(id _ :: Int,p :: Bool)
(id _ :: Int,False :: Bool)
(id _ :: Int,True :: Bool)
(id _ :: Int,not _ :: Bool)
(id _ :: Int,c :: Char)
(id _ :: Int,'a' :: Char)
(id _ :: Int,xs :: [Int])
(id _ :: Int,[] :: [Int])
(id _ :: Int,_:_ :: [Int])
(id _ :: Int,id :: Int -> Int)
(id _ :: Int,(+) :: Int -> Int -> Int)
(_ :: Bool,y :: Int)
(_ :: Bool,1 :: Int)
(_ :: Bool,id x :: Int)
(_ :: Bool,id 0 :: Int)
(_ :: Bool,id (id _) :: Int)
(_ :: Bool,negate _ :: Int)
(_ :: Bool,abs _ :: Int)
(_ :: Bool,_ + _ :: Int)
(_ :: Bool,head _ :: Int)
(_ :: Bool,ord _ :: Int)
(_ :: Bool,p :: Bool)
(_ :: Bool,False :: Bool)
(_ :: Bool,True :: Bool)
(_ :: Bool,not _ :: Bool)
(_ :: Bool,c :: Char)
(_ :: Bool,'a' :: Char)
(_ :: Bool,xs :: [Int])
(_ :: Bool,[] :: [Int])
(_ :: Bool,_:_ :: [Int])
(_ :: Bool,id :: Int -> Int)
(_ :: Bool,(+) :: Int -> Int -> Int)
(_ :: Char,y :: Int)
(_ :: Char,1 :: Int)
(_ :: Char,id x :: Int)
(_ :: Char,id 0 :: Int)
(_ :: Char,id (id _) :: Int)
(_ :: Char,negate _ :: Int)
(_ :: Char,abs _ :: Int)
(_ :: Char,_ + _ :: Int)
(_ :: Char,head _ :: Int)
(_ :: Char,ord _ :: Int)
(_ :: Char,p :: Bool)
(_ :: Char,False :: Bool)
(_ :: Char,True :: Bool)
(_ :: Char,not _ :: Bool)
(_ :: Char,c :: Char)
(_ :: Char,'a' :: Char)
(_ :: Char,xs :: [Int])
(_ :: Char,[] :: [Int])
(_ :: Char,_:_ :: [Int])
(_ :: Char,id :: Int -> Int)
(_ :: Char,(+) :: Int -> Int -> Int)
(_ :: [Int],y :: Int)
(_ :: [Int],1 :: Int)
(_ :: [Int],id x :: Int)
(_ :: [Int],id 0 :: Int)
(_ :: [Int],id (id _) :: Int)
(_ :: [Int],negate _ :: Int)
(_ :: [Int],abs _ :: Int)
(_ :: [Int],_ + _ :: Int)
(_ :: [Int],head _ :: Int)
(_ :: [Int],ord _ :: Int)
(_ :: [Int],p :: Bool)
(_ :: [Int],False :: Bool)
(_ :: [Int],True :: Bool)
(_ :: [Int],not _ :: Bool)
(_ :: [Int],c :: Char)
(_ :: [Int],'a' :: Char)
(_ :: [Int],xs :: [Int])
(_ :: [Int],[] :: [Int])
(_ :: [Int],_:_ :: [Int])
(_ :: [Int],id :: Int -> Int)
(_ :: [Int],(+) :: Int -> Int -> Int)
(y :: Int,x :: Int)
(y :: Int,0 :: Int)
(y :: Int,id _ :: Int)
(y :: Int,_ :: Bool)
(y :: Int,_ :: Char)
(y :: Int,_ :: [Int])
(1 :: Int,x :: Int)
(1 :: Int,0 :: Int)
(1 :: Int,id _ :: Int)
(1 :: Int,_ :: Bool)
(1 :: Int,_ :: Char)
(1 :: Int,_ :: [Int])
(id x :: Int,x :: Int)
(id x :: Int,0 :: Int)
(id x :: Int,id _ :: Int)
(id x :: Int,_ :: Bool)
(id x :: Int,_ :: Char)
(id x :: Int,_ :: [Int])
(id 0 :: Int,x :: Int)
(id 0 :: Int,0 :: Int)
(id 0 :: Int,id _ :: Int)
(id 0 :: Int,_ :: Bool)
(id 0 :: Int,_ :: Char)
(id 0 :: Int,_ :: [Int])
(id (id _) :: Int,x :: Int)
(id (id _) :: Int,0 :: Int)
(id (id _) :: Int,id _ :: Int)
(id (id _) :: Int,_ :: Bool)
(id (id _) :: Int,_ :: Char)
(id (id _) :: Int,_ :: [Int])
(negate _ :: Int,x :: Int)
(negate _ :: Int,0 :: Int)
(negate _ :: Int,id _ :: Int)
(negate _ :: Int,_ :: Bool)
(negate _ :: Int,_ :: Char)
(negate _ :: Int,_ :: [Int])
(abs _ :: Int,x :: Int)
(abs _ :: Int,0 :: Int)
(abs _ :: Int,id _ :: Int)
(abs _ :: Int,_ :: Bool)
(abs _ :: Int,_ :: Char)
(abs _ :: Int,_ :: [Int])
(_ + _ :: Int,x :: Int)
(_ + _ :: Int,0 :: Int)
(_ + _ :: Int,id _ :: Int)
(_ + _ :: Int,_ :: Bool)
(_ + _ :: Int,_ :: Char)
(_ + _ :: Int,_ :: [Int])
(head _ :: Int,x :: Int)
(head _ :: Int,0 :: Int)
(head _ :: Int,id _ :: Int)
(head _ :: Int,_ :: Bool)
(head _ :: Int,_ :: Char)
(head _ :: Int,_ :: [Int])
(ord _ :: Int,x :: Int)
(ord _ :: Int,0 :: Int)
(ord _ :: Int,id _ :: Int)
(ord _ :: Int,_ :: Bool)
(ord _ :: Int,_ :: Char)
(ord _ :: Int,_ :: [Int])
(p :: Bool,x :: Int)
(p :: Bool,0 :: Int)
(p :: Bool,id _ :: Int)
(p :: Bool,_ :: Bool)
(p :: Bool,_ :: Char)
(p :: Bool,_ :: [Int])
(False :: Bool,x :: Int)
(False :: Bool,0 :: Int)
(False :: Bool,id _ :: Int)
(False :: Bool,_ :: Bool)
(False :: Bool,_ :: Char)
(False :: Bool,_ :: [Int])
(True :: Bool,x :: Int)
(True :: Bool,0 :: Int)
(True :: Bool,id _ :: Int)
(True :: Bool,_ :: Bool)
(True :: Bool,_ :: Char)
(True :: Bool,_ :: [Int])
(not _ :: Bool,x :: Int)
(not _ :: Bool,0 :: Int)
(not _ :: Bool,id _ :: Int)
(not _ :: Bool,_ :: Bool)
(not _ :: Bool,_ :: Char)
(not _ :: Bool,_ :: [Int])
(c :: Char,x :: Int)
(c :: Char,0 :: Int)
(c :: Char,id _ :: Int)
(c :: Char,_ :: Bool)
(c :: Char,_ :: Char)
(c :: Char,_ :: [Int])
('a' :: Char,x :: Int)
('a' :: Char,0 :: Int)
('a' :: Char,id _ :: Int)
('a' :: Char,_ :: Bool)
('a' :: Char,_ :: Char)
('a' :: Char,_ :: [Int])
(xs :: [Int],x :: Int)
(xs :: [Int],0 :: Int)
(xs :: [Int],id _ :: Int)
(xs :: [Int],_ :: Bool)
(xs :: [Int],_ :: Char)
(xs :: [Int],_ :: [Int])
([] :: [Int],x :: Int)
([] :: [Int],0 :: Int)
([] :: [Int],id _ :: Int)
([] :: [Int],_ :: Bool)
([] :: [Int],_ :: Char)
([] :: [Int],_ :: [Int])
(_:_ :: [Int],x :: Int)
(_:_ :: [Int],0 :: Int)
(_:_ :: [Int],id _ :: Int)
(_:_ :: [Int],_ :: Bool)
(_:_ :: [Int],_ :: Char)
(_:_ :: [Int],_ :: [Int])
(id :: Int -> Int,x :: Int)
(id :: Int -> Int,0 :: Int)
(id :: Int -> Int,id _ :: Int)
(id :: Int -> Int,_ :: Bool)
(id :: Int -> Int,_ :: Char)
(id :: Int -> Int,_ :: [Int])
((+) :: Int -> Int -> Int,x :: Int)
((+) :: Int -> Int -> Int,0 :: Int)
((+) :: Int -> Int -> Int,id _ :: Int)
((+) :: Int -> Int -> Int,_ :: Bool)
((+) :: Int -> Int -> Int,_ :: Char)
((+) :: Int -> Int -> Int,_ :: [Int])
(z :: Int,_ :: Int)
(-1 :: Int,_ :: Int)
(id y :: Int,_ :: Int)
(id 1 :: Int,_ :: Int)
(id (id x) :: Int,_ :: Int)
(id (id 0) :: Int,_ :: Int)
(id (id (id _)) :: Int,_ :: Int)
(id (negate _) :: Int,_ :: Int)
(id (abs _) :: Int,_ :: Int)
(id (_ + _) :: Int,_ :: Int)
(id (head _) :: Int,_ :: Int)
(id (ord _) :: Int,_ :: Int)
(negate x :: Int,_ :: Int)
(negate 0 :: Int,_ :: Int)
(negate (id _) :: Int,_ :: Int)
(abs x :: Int,_ :: Int)
(abs 0 :: Int,_ :: Int)
(abs (id _) :: Int,_ :: Int)
(_ + x :: Int,_ :: Int)
(_ + 0 :: Int,_ :: Int)
(_ + id _ :: Int,_ :: Int)
(x + _ :: Int,_ :: Int)
(0 + _ :: Int,_ :: Int)
(id _ + _ :: Int,_ :: Int)
(_ * _ :: Int,_ :: Int)
(f _ :: Int,_ :: Int)
(head xs :: Int,_ :: Int)
(head [] :: Int,_ :: Int)
(head (_:_) :: Int,_ :: Int)
(ord c :: Int,_ :: Int)
(ord 'a' :: Int,_ :: Int)
(q :: Bool,_ :: Int)
(not p :: Bool,_ :: Int)
(not False :: Bool,_ :: Int)
(not True :: Bool,_ :: Int)
(not (not _) :: Bool,_ :: Int)
(_ || _ :: Bool,_ :: Int)
(d :: Char,_ :: Int)
(' ' :: Char,_ :: Int)
(ys :: [Int],_ :: Int)
([0] :: [Int],_ :: Int)
(_:xs :: [Int],_ :: Int)
([_] :: [Int],_ :: Int)
(_:_:_ :: [Int],_ :: Int)
(x:_ :: [Int],_ :: Int)
(0:_ :: [Int],_ :: Int)
(id _:_ :: [Int],_ :: Int)
(tail _ :: [Int],_ :: Int)
(_ ++ _ :: [Int],_ :: Int)
(negate :: Int -> Int,_ :: Int)
(abs :: Int -> Int,_ :: Int)
((_ +) :: Int -> Int,_ :: Int)
((*) :: Int -> Int -> Int,_ :: Int)
(not :: Bool -> Bool,_ :: Int)
((||) :: Bool -> Bool -> Bool,_ :: Int)
(_ :: Int,x' :: Int)
(_ :: Int,2 :: Int)
(_ :: Int,id z :: Int)
(_ :: Int,id (-1) :: Int)
(_ :: Int,id (id y) :: Int)
(_ :: Int,id (id 1) :: Int)
(_ :: Int,id (id (id x)) :: Int)
(_ :: Int,id (id (id 0)) :: Int)
(_ :: Int,id (id (id (id _))) :: Int)
(_ :: Int,id (id (negate _)) :: Int)
(_ :: Int,id (id (abs _)) :: Int)
(_ :: Int,id (id (_ + _)) :: Int)
(_ :: Int,id (id (head _)) :: Int)
(_ :: Int,id (id (ord _)) :: Int)
(_ :: Int,id (negate x) :: Int)
(_ :: Int,id (negate 0) :: Int)
(_ :: Int,id (negate (id _)) :: Int)
(_ :: Int,id (abs x) :: Int)
(_ :: Int,id (abs 0) :: Int)
(_ :: Int,id (abs (id _)) :: Int)
(_ :: Int,id (_ + x) :: Int)
(_ :: Int,id (_ + 0) :: Int)
(_ :: Int,id (_ + id _) :: Int)
(_ :: Int,id (x + _) :: Int)
(_ :: Int,id (0 + _) :: Int)
(_ :: Int,id (id _ + _) :: Int)
(_ :: Int,id (_ * _) :: Int)
(_ :: Int,id (f _) :: Int)
(_ :: Int,id (head xs) :: Int)
(_ :: Int,id (head []) :: Int)
(_ :: Int,id (head (_:_)) :: Int)
(_ :: Int,id (ord c) :: Int)
(_ :: Int,id (ord 'a') :: Int)
(_ :: Int,negate y :: Int)
(_ :: Int,negate 1 :: Int)
(_ :: Int,negate (id x) :: Int)
(_ :: Int,negate (id 0) :: Int)
(_ :: Int,negate (id (id _)) :: Int)
(_ :: Int,negate (negate _) :: Int)
(_ :: Int,negate (abs _) :: Int)
(_ :: Int,negate (_ + _) :: Int)
(_ :: Int,negate (head _) :: Int)
(_ :: Int,negate (ord _) :: Int)
(_ :: Int,abs y :: Int)
(_ :: Int,abs 1 :: Int)
(_ :: Int,abs (id x) :: Int)
(_ :: Int,abs (id 0) :: Int)
(_ :: Int,abs (id (id _)) :: Int)
(_ :: Int,abs (negate _) :: Int)
(_ :: Int,abs (abs _) :: Int)
(_ :: Int,abs (_ + _) :: Int)
(_ :: Int,abs (head _) :: Int)
(_ :: Int,abs (ord _) :: Int)
(_ :: Int,_ + y :: Int)
(_ :: Int,_ + 1 :: Int)
(_ :: Int,_ + id x :: Int)
(_ :: Int,_ + id 0 :: Int)
(_ :: Int,_ + id (id _) :: Int)
(_ :: Int,_ + negate _ :: Int)
(_ :: Int,_ + abs _ :: Int)
(_ :: Int,_ + (_ + _) :: Int)
(_ :: Int,_ + head _ :: Int)
(_ :: Int,_ + ord _ :: Int)
(_ :: Int,x + x :: Int)
(_ :: Int,x + 0 :: Int)
(_ :: Int,x + id _ :: Int)
(_ :: Int,0 + x :: Int)
(_ :: Int,0 + 0 :: Int)
(_ :: Int,0 + id _ :: Int)
(_ :: Int,id _ + x :: Int)
(_ :: Int,id _ + 0 :: Int)
(_ :: Int,id _ + id _ :: Int)
(_ :: Int,_ * x :: Int)
(_ :: Int,_ * 0 :: Int)
(_ :: Int,_ * id _ :: Int)
(_ :: Int,f x :: Int)
(_ :: Int,f 0 :: Int)
(_ :: Int,f (id _) :: Int)
(_ :: Int,y + _ :: Int)
(_ :: Int,1 + _ :: Int)
(_ :: Int,id x + _ :: Int)
(_ :: Int,id 0 + _ :: Int)
(_ :: Int,id (id _) + _ :: Int)
(_ :: Int,negate _ + _ :: Int)
(_ :: Int,abs _ + _ :: Int)
(_ :: Int,(_ + _) + _ :: Int)
(_ :: Int,head _ + _ :: Int)
(_ :: Int,ord _ + _ :: Int)
(_ :: Int,x * _ :: Int)
(_ :: Int,0 * _ :: Int)
(_ :: Int,id _ * _ :: Int)
(_ :: Int,g _ :: Int)
(_ :: Int,head ys :: Int)
(_ :: Int,head [0] :: Int)
(_ :: Int,head (_:xs) :: Int)
(_ :: Int,head [_] :: Int)
(_ :: Int,head (_:_:_) :: Int)
(_ :: Int,head (x:_) :: Int)
(_ :: Int,head (0:_) :: Int)
(_ :: Int,head (id _:_) :: Int)
(_ :: Int,head (tail _) :: Int)
(_ :: Int,head (_ ++ _) :: Int)
(_ :: Int,ord d :: Int)
(_ :: Int,ord ' ' :: Int)
(_ :: Int,r :: Bool)
(_ :: Int,not q :: Bool)
(_ :: Int,not (not p) :: Bool)
(_ :: Int,not (not False) :: Bool)
(_ :: Int,not (not True) :: Bool)
(_ :: Int,not (not (not _)) :: Bool)
(_ :: Int,not (_ || _) :: Bool)
(_ :: Int,_ || p :: Bool)
(_ :: Int,_ || False :: Bool)
(_ :: Int,_ || True :: Bool)
(_ :: Int,_ || not _ :: Bool)
(_ :: Int,p || _ :: Bool)
(_ :: Int,False || _ :: Bool)
(_ :: Int,True || _ :: Bool)
(_ :: Int,not _ || _ :: Bool)
(_ :: Int,_ && _ :: Bool)
(_ :: Int,_ == _ :: Bool)
(_ :: Int,_ == _ :: Bool)
(_ :: Int,odd _ :: Bool)
(_ :: Int,even _ :: Bool)
(_ :: Int,elem _ _ :: Bool)
(_ :: Int,e :: Char)
(_ :: Int,'b' :: Char)
(_ :: Int,zs :: [Int])
(_ :: Int,[0,0] :: [Int])
(_ :: Int,[1] :: [Int])
(_ :: Int,_:ys :: [Int])
(_ :: Int,_:[0] :: [Int])
(_ :: Int,_:_:xs :: [Int])
(_ :: Int,[_,_] :: [Int])
(_ :: Int,_:_:_:_ :: [Int])
(_ :: Int,_:x:_ :: [Int])
(_ :: Int,_:0:_ :: [Int])
(_ :: Int,_:id _:_ :: [Int])
(_ :: Int,_:tail _ :: [Int])
(_ :: Int,_:(_ ++ _) :: [Int])
(_ :: Int,x:xs :: [Int])
(_ :: Int,[x] :: [Int])
(_ :: Int,x:_:_ :: [Int])
(_ :: Int,0:xs :: [Int])
(_ :: Int,[0] :: [Int])
(_ :: Int,0:_:_ :: [Int])
(_ :: Int,id _:xs :: [Int])
(_ :: Int,[id _] :: [Int])
(_ :: Int,id _:_:_ :: [Int])
(_ :: Int,y:_ :: [Int])
(_ :: Int,1:_ :: [Int])
(_ :: Int,id x:_ :: [Int])
(_ :: Int,id 0:_ :: [Int])
(_ :: Int,id (id _):_ :: [Int])
(_ :: Int,negate _:_ :: [Int])
(_ :: Int,abs _:_ :: [Int])
(_ :: Int,_ + _:_ :: [Int])
(_ :: Int,head _:_ :: [Int])
(_ :: Int,ord _:_ :: [Int])
(_ :: Int,tail xs :: [Int])
(_ :: Int,tail [] :: [Int])
(_ :: Int,tail (_:_) :: [Int])
(_ :: Int,_ ++ xs :: [Int])
(_ :: Int,_ ++ [] :: [Int])
(_ :: Int,_ ++ (_:_) :: [Int])
(_ :: Int,xs ++ _ :: [Int])
(_ :: Int,[] ++ _ :: [Int])
(_ :: Int,(_:_) ++ _ :: [Int])
(_ :: Int,sort _ :: [Int])
(_ :: Int,insert _ _ :: [Int])
(_ :: Int,(x +) :: Int -> Int)
(_ :: Int,(0 +) :: Int -> Int)
(_ :: Int,(id _ +) :: Int -> Int)
(_ :: Int,(_ *) :: Int -> Int)
(_ :: Int,f :: Int -> Int)
(_ :: Int,(_ ||) :: Bool -> Bool)
(_ :: Int,(&&) :: Bool -> Bool -> Bool)
(x :: Int,z :: Int)
(x :: Int,-1 :: Int)
(x :: Int,id y :: Int)
(x :: Int,id 1 :: Int)
(x :: Int,id (id x) :: Int)
(x :: Int,id (id 0) :: Int)
(x :: Int,id (id (id _)) :: Int)
(x :: Int,id (negate _) :: Int)
(x :: Int,id (abs _) :: Int)
(x :: Int,id (_ + _) :: Int)
(x :: Int,id (head _) :: Int)
(x :: Int,id (ord _) :: Int)
(x :: Int,negate x :: Int)
(x :: Int,negate 0 :: Int)
(x :: Int,negate (id _) :: Int)
(x :: Int,abs x :: Int)
(x :: Int,abs 0 :: Int)
(x :: Int,abs (id _) :: Int)
(x :: Int,_ + x :: Int)
(x :: Int,_ + 0 :: Int)
(x :: Int,_ + id _ :: Int)
(x :: Int,x + _ :: Int)
(x :: Int,0 + _ :: Int)
(x :: Int,id _ + _ :: Int)
(x :: Int,_ * _ :: Int)
(x :: Int,f _ :: Int)
(x :: Int,head xs :: Int)
(x :: Int,head [] :: Int)
(x :: Int,head (_:_) :: Int)
(x :: Int,ord c :: Int)
(x :: Int,ord 'a' :: Int)
(x :: Int,q :: Bool)
(x :: Int,not p :: Bool)
(x :: Int,not False :: Bool)
(x :: Int,not True :: Bool)
(x :: Int,not (not _) :: Bool)
(x :: Int,_ || _ :: Bool)
(x :: Int,d :: Char)
(x :: Int,' ' :: Char)
(x :: Int,ys :: [Int])
(x :: Int,[0] :: [Int])
(x :: Int,_:xs :: [Int])
(x :: Int,[_] :: [Int])
(x :: Int,_:_:_ :: [Int])
(x :: Int,x:_ :: [Int])
(x :: Int,0:_ :: [Int])
(x :: Int,id _:_ :: [Int])
(x :: Int,tail _ :: [Int])
(x :: Int,_ ++ _ :: [Int])
(x :: Int,negate :: Int -> Int)
(x :: Int,abs :: Int -> Int)
(x :: Int,(_ +) :: Int -> Int)
(x :: Int,(*) :: Int -> Int -> Int)
(x :: Int,not :: Bool -> Bool)
(x :: Int,(||) :: Bool -> Bool -> Bool)
(0 :: Int,z :: Int)
(0 :: Int,-1 :: Int)
(0 :: Int,id y :: Int)
(0 :: Int,id 1 :: Int)
(0 :: Int,id (id x) :: Int)
(0 :: Int,id (id 0) :: Int)
(0 :: Int,id (id (id _)) :: Int)
(0 :: Int,id (negate _) :: Int)
(0 :: Int,id (abs _) :: Int)
(0 :: Int,id (_ + _) :: Int)
(0 :: Int,id (head _) :: Int)
(0 :: Int,id (ord _) :: Int)
(0 :: Int,negate x :: Int)
(0 :: Int,negate 0 :: Int)
(0 :: Int,negate (id _) :: Int)
(0 :: Int,abs x :: Int)
(0 :: Int,abs 0 :: Int)
(0 :: Int,abs (id _) :: Int)
(0 :: Int,_ + x :: Int)
(0 :: Int,_ + 0 :: Int)
(0 :: Int,_ + id _ :: Int)
(0 :: Int,x + _ :: Int)
(0 :: Int,0 + _ :: Int)
(0 :: Int,id _ + _ :: Int)
(0 :: Int,_ * _ :: Int)
(0 :: Int,f _ :: Int)
(0 :: Int,head xs :: Int)
(0 :: Int,head [] :: Int)
(0 :: Int,head (_:_) :: Int)
(0 :: Int,ord c :: Int)
(0 :: Int,ord 'a' :: Int)
(0 :: Int,q :: Bool)
(0 :: Int,not p :: Bool)
(0 :: Int,not False :: Bool)
(0 :: Int,not True :: Bool)
(0 :: Int,not (not _) :: Bool)
(0 :: Int,_ || _ :: Bool)
(0 :: Int,d :: Char)
(0 :: Int,' ' :: Char)
(0 :: Int,ys :: [Int])
(0 :: Int,[0] :: [Int])
(0 :: Int,_:xs :: [Int])
(0 :: Int,[_] :: [Int])
(0 :: Int,_:_:_ :: [Int])
(0 :: Int,x:_ :: [Int])
(0 :: Int,0:_ :: [Int])
(0 :: Int,id _:_ :: [Int])
(0 :: Int,tail _ :: [Int])
(0 :: Int,_ ++ _ :: [Int])
(0 :: Int,negate :: Int -> Int)
(0 :: Int,abs :: Int -> Int)
(0 :: Int,(_ +) :: Int -> Int)
(0 :: Int,(*) :: Int -> Int -> Int)
(0 :: Int,not :: Bool -> Bool)
(0 :: Int,(||) :: Bool -> Bool -> Bool)
(id _ :: Int,z :: Int)
(id _ :: Int,-1 :: Int)
(id _ :: Int,id y :: Int)
(id _ :: Int,id 1 :: Int)
(id _ :: Int,id (id x) :: Int)
(id _ :: Int,id (id 0) :: Int)
(id _ :: Int,id (id (id _)) :: Int)
(id _ :: Int,id (negate _) :: Int)
(id _ :: Int,id (abs _) :: Int)
(id _ :: Int,id (_ + _) :: Int)
(id _ :: Int,id (head _) :: Int)
(id _ :: Int,id (ord _) :: Int)
(id _ :: Int,negate x :: Int)
(id _ :: Int,negate 0 :: Int)
(id _ :: Int,negate (id _) :: Int)
(id _ :: Int,abs x :: Int)
(id _ :: Int,abs 0 :: Int)
(id _ :: Int,abs (id _) :: Int)
(id _ :: Int,_ + x :: Int)
(id _ :: Int,_ + 0 :: Int)
(id _ :: Int,_ + id _ :: Int)
(id _ :: Int,x + _ :: Int)
(id _ :: Int,0 + _ :: Int)
(id _ :: Int,id _ + _ :: Int)
(id _ :: Int,_ * _ :: Int)
(id _ :: Int,f _ :: Int)
(id _ :: Int,head xs :: Int)
(id _ :: Int,head [] :: Int)
(id _ :: Int,head (_:_) :: Int)
(id _ :: Int,ord c :: Int)
(id _ :: Int,ord 'a' :: Int)
(id _ :: Int,q :: Bool)
(id _ :: Int,not p :: Bool)
(id _ :: Int,not False :: Bool)
(id _ :: Int,not True :: Bool)
(id _ :: Int,not (not _) :: Bool)
(id _ :: Int,_ || _ :: Bool)
(id _ :: Int,d :: Char)
(id _ :: Int,' ' :: Char)
(id _ :: Int,ys :: [Int])
(id _ :: Int,[0] :: [Int])
(id _ :: Int,_:xs :: [Int])
(id _ :: Int,[_] :: [Int])
(id _ :: Int,_:_:_ :: [Int])
(id _ :: Int,x:_ :: [Int])
(id _ :: Int,0:_ :: [Int])
(id _ :: Int,id _:_ :: [Int])
(id _ :: Int,tail _ :: [Int])
(id _ :: Int,_ ++ _ :: [Int])
(id _ :: Int,negate :: Int -> Int)
(id _ :: Int,abs :: Int -> Int)
(id _ :: Int,(_ +) :: Int -> Int)
(id _ :: Int,(*) :: Int -> Int -> Int)
(id _ :: Int,not :: Bool -> Bool)
(id _ :: Int,(||) :: Bool -> Bool -> Bool)
(_ :: Bool,z :: Int)
(_ :: Bool,-1 :: Int)
(_ :: Bool,id y :: Int)
(_ :: Bool,id 1 :: Int)
(_ :: Bool,id (id x) :: Int)
(_ :: Bool,id (id 0) :: Int)
(_ :: Bool,id (id (id _)) :: Int)
(_ :: Bool,id (negate _) :: Int)
(_ :: Bool,id (abs _) :: Int)
(_ :: Bool,id (_ + _) :: Int)
(_ :: Bool,id (head _) :: Int)
(_ :: Bool,id (ord _) :: Int)
(_ :: Bool,negate x :: Int)
(_ :: Bool,negate 0 :: Int)
(_ :: Bool,negate (id _) :: Int)
(_ :: Bool,abs x :: Int)
(_ :: Bool,abs 0 :: Int)
(_ :: Bool,abs (id _) :: Int)
(_ :: Bool,_ + x :: Int)
(_ :: Bool,_ + 0 :: Int)
(_ :: Bool,_ + id _ :: Int)
(_ :: Bool,x + _ :: Int)
(_ :: Bool,0 + _ :: Int)
(_ :: Bool,id _ + _ :: Int)
(_ :: Bool,_ * _ :: Int)
(_ :: Bool,f _ :: Int)
(_ :: Bool,head xs :: Int)
(_ :: Bool,head [] :: Int)
(_ :: Bool,head (_:_) :: Int)
(_ :: Bool,ord c :: Int)
(_ :: Bool,ord 'a' :: Int)
(_ :: Bool,q :: Bool)
(_ :: Bool,not p :: Bool)
(_ :: Bool,not False :: Bool)
(_ :: Bool,not True :: Bool)
(_ :: Bool,not (not _) :: Bool)
(_ :: Bool,_ || _ :: Bool)
(_ :: Bool,d :: Char)
(_ :: Bool,' ' :: Char)
(_ :: Bool,ys :: [Int])
(_ :: Bool,[0] :: [Int])
(_ :: Bool,_:xs :: [Int])
(_ :: Bool,[_] :: [Int])
(_ :: Bool,_:_:_ :: [Int])
(_ :: Bool,x:_ :: [Int])
(_ :: Bool,0:_ :: [Int])
(_ :: Bool,id _:_ :: [Int])
(_ :: Bool,tail _ :: [Int])
(_ :: Bool,_ ++ _ :: [Int])
(_ :: Bool,negate :: Int -> Int)
(_ :: Bool,abs :: Int -> Int)
(_ :: Bool,(_ +) :: Int -> Int)
(_ :: Bool,(*) :: Int -> Int -> Int)
(_ :: Bool,not :: Bool -> Bool)
(_ :: Bool,(||) :: Bool -> Bool -> Bool)
(_ :: Char,z :: Int)
(_ :: Char,-1 :: Int)
(_ :: Char,id y :: Int)
(_ :: Char,id 1 :: Int)
(_ :: Char,id (id x) :: Int)
(_ :: Char,id (id 0) :: Int)
(_ :: Char,id (id (id _)) :: Int)
(_ :: Char,id (negate _) :: Int)
(_ :: Char,id (abs _) :: Int)
(_ :: Char,id (_ + _) :: Int)
(_ :: Char,id (head _) :: Int)
(_ :: Char,id (ord _) :: Int)
(_ :: Char,negate x :: Int)
(_ :: Char,negate 0 :: Int)
(_ :: Char,negate (id _) :: Int)
(_ :: Char,abs x :: Int)
(_ :: Char,abs 0 :: Int)
(_ :: Char,abs (id _) :: Int)
(_ :: Char,_ + x :: Int)
(_ :: Char,_ + 0 :: Int)
(_ :: Char,_ + id _ :: Int)
(_ :: Char,x + _ :: Int)
(_ :: Char,0 + _ :: Int)
(_ :: Char,id _ + _ :: Int)
(_ :: Char,_ * _ :: Int)
(_ :: Char,f _ :: Int)
(_ :: Char,head xs :: Int)
(_ :: Char,head [] :: Int)
(_ :: Char,head (_:_) :: Int)
(_ :: Char,ord c :: Int)
(_ :: Char,ord 'a' :: Int)
(_ :: Char,q :: Bool)
(_ :: Char,not p :: Bool)
(_ :: Char,not False :: Bool)
(_ :: Char,not True :: Bool)
(_ :: Char,not (not _) :: Bool)
(_ :: Char,_ || _ :: Bool)
(_ :: Char,d :: Char)
(_ :: Char,' ' :: Char)
(_ :: Char,ys :: [Int])
(_ :: Char,[0] :: [Int])
(_ :: Char,_:xs :: [Int])
(_ :: Char,[_] :: [Int])
(_ :: Char,_:_:_ :: [Int])
(_ :: Char,x:_ :: [Int])
(_ :: Char,0:_ :: [Int])
(_ :: Char,id _:_ :: [Int])
(_ :: Char,tail _ :: [Int])
(_ :: Char,_ ++ _ :: [Int])
(_ :: Char,negate :: Int -> Int)
(_ :: Char,abs :: Int -> Int)
(_ :: Char,(_ +) :: Int -> Int)
(_ :: Char,(*) :: Int -> Int -> Int)
(_ :: Char,not :: Bool -> Bool)
(_ :: Char,(||) :: Bool -> Bool -> Bool)
(_ :: [Int],z :: Int)
(_ :: [Int],-1 :: Int)
(_ :: [Int],id y :: Int)
(_ :: [Int],id 1 :: Int)
(_ :: [Int],id (id x) :: Int)
(_ :: [Int],id (id 0) :: Int)
(_ :: [Int],id (id (id _)) :: Int)
(_ :: [Int],id (negate _) :: Int)
(_ :: [Int],id (abs _) :: Int)
(_ :: [Int],id (_ + _) :: Int)
(_ :: [Int],id (head _) :: Int)
(_ :: [Int],id (ord _) :: Int)
(_ :: [Int],negate x :: Int)
(_ :: [Int],negate 0 :: Int)
(_ :: [Int],negate (id _) :: Int)
(_ :: [Int],abs x :: Int)
(_ :: [Int],abs 0 :: Int)
(_ :: [Int],abs (id _) :: Int)
(_ :: [Int],_ + x :: Int)
(_ :: [Int],_ + 0 :: Int)
(_ :: [Int],_ + id _ :: Int)
(_ :: [Int],x + _ :: Int)
(_ :: [Int],0 + _ :: Int)
(_ :: [Int],id _ + _ :: Int)
(_ :: [Int],_ * _ :: Int)
(_ :: [Int],f _ :: Int)
(_ :: [Int],head xs :: Int)
(_ :: [Int],head [] :: Int)
(_ :: [Int],head (_:_) :: Int)
(_ :: [Int],ord c :: Int)
(_ :: [Int],ord 'a' :: Int)
(_ :: [Int],q :: Bool)
(_ :: [Int],not p :: Bool)
(_ :: [Int],not False :: Bool)
(_ :: [Int],not True :: Bool)
(_ :: [Int],not (not _) :: Bool)
(_ :: [Int],_ || _ :: Bool)
(_ :: [Int],d :: Char)
(_ :: [Int],' ' :: Char)
(_ :: [Int],ys :: [Int])
(_ :: [Int],[0] :: [Int])
(_ :: [Int],_:xs :: [Int])
(_ :: [Int],[_] :: [Int])
(_ :: [Int],_:_:_ :: [Int])
(_ :: [Int],x:_ :: [Int])
(_ :: [Int],0:_ :: [Int])
(_ :: [Int],id _:_ :: [Int])
(_ :: [Int],tail _ :: [Int])
(_ :: [Int],_ ++ _ :: [Int])
(_ :: [Int],negate :: Int -> Int)
(_ :: [Int],abs :: Int -> Int)
(_ :: [Int],(_ +) :: Int -> Int)
(_ :: [Int],(*) :: Int -> Int -> Int)
(_ :: [Int],not :: Bool -> Bool)
(_ :: [Int],(||) :: Bool -> Bool -> Bool)
(y :: Int,y :: Int)
(y :: Int,1 :: Int)
(y :: Int,id x :: Int)
(y :: Int,id 0 :: Int)
(y :: Int,id (id _) :: Int)
(y :: Int,negate _ :: Int)
(y :: Int,abs _ :: Int)
(y :: Int,_ + _ :: Int)
(y :: Int,head _ :: Int)
(y :: Int,ord _ :: Int)
(y :: Int,p :: Bool)
(y :: Int,False :: Bool)
(y :: Int,True :: Bool)
(y :: Int,not _ :: Bool)
(y :: Int,c :: Char)
(y :: Int,'a' :: Char)
(y :: Int,xs :: [Int])
(y :: Int,[] :: [Int])
(y :: Int,_:_ :: [Int])
(y :: Int,id :: Int -> Int)
(y :: Int,(+) :: Int -> Int -> Int)
(1 :: Int,y :: Int)
(1 :: Int,1 :: Int)
(1 :: Int,id x :: Int)
(1 :: Int,id 0 :: Int)
(1 :: Int,id (id _) :: Int)
(1 :: Int,negate _ :: Int)
(1 :: Int,abs _ :: Int)
(1 :: Int,_ + _ :: Int)
(1 :: Int,head _ :: Int)
(1 :: Int,ord _ :: Int)
(1 :: Int,p :: Bool)
(1 :: Int,False :: Bool)
(1 :: Int,True :: Bool)
(1 :: Int,not _ :: Bool)
(1 :: Int,c :: Char)
(1 :: Int,'a' :: Char)
(1 :: Int,xs :: [Int])
(1 :: Int,[] :: [Int])
(1 :: Int,_:_ :: [Int])


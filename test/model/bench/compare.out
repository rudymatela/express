_ :: Int `compare` _ :: Int  =  EQ
_ :: Int `compare` x :: Int  =  LT
_ :: Int `compare` 0 :: Int  =  LT
_ :: Int `compare` id _ :: Int  =  LT
_ :: Int `compare` _ :: Bool  =  GT
_ :: Int `compare` _ :: Char  =  GT
_ :: Int `compare` _ :: [Int]  =  LT
x :: Int `compare` _ :: Int  =  GT
0 :: Int `compare` _ :: Int  =  GT
id _ :: Int `compare` _ :: Int  =  GT
_ :: Bool `compare` _ :: Int  =  LT
_ :: Char `compare` _ :: Int  =  LT
_ :: [Int] `compare` _ :: Int  =  GT
_ :: Int `compare` y :: Int  =  LT
_ :: Int `compare` 1 :: Int  =  LT
_ :: Int `compare` id x :: Int  =  LT
_ :: Int `compare` id 0 :: Int  =  LT
_ :: Int `compare` id (id _) :: Int  =  LT
_ :: Int `compare` negate _ :: Int  =  LT
_ :: Int `compare` abs _ :: Int  =  LT
_ :: Int `compare` _ + _ :: Int  =  LT
_ :: Int `compare` head _ :: Int  =  LT
_ :: Int `compare` ord _ :: Int  =  LT
_ :: Int `compare` p :: Bool  =  GT
_ :: Int `compare` False :: Bool  =  LT
_ :: Int `compare` True :: Bool  =  LT
_ :: Int `compare` not _ :: Bool  =  LT
_ :: Int `compare` c :: Char  =  GT
_ :: Int `compare` 'a' :: Char  =  LT
_ :: Int `compare` xs :: [Int]  =  LT
_ :: Int `compare` [] :: [Int]  =  LT
_ :: Int `compare` _:_ :: [Int]  =  LT
_ :: Int `compare` id :: Int -> Int  =  LT
_ :: Int `compare` (+) :: Int -> Int -> Int  =  LT
x :: Int `compare` x :: Int  =  EQ
x :: Int `compare` 0 :: Int  =  LT
x :: Int `compare` id _ :: Int  =  LT
x :: Int `compare` _ :: Bool  =  GT
x :: Int `compare` _ :: Char  =  GT
x :: Int `compare` _ :: [Int]  =  LT
0 :: Int `compare` x :: Int  =  GT
0 :: Int `compare` 0 :: Int  =  EQ
0 :: Int `compare` id _ :: Int  =  LT
0 :: Int `compare` _ :: Bool  =  GT
0 :: Int `compare` _ :: Char  =  GT
0 :: Int `compare` _ :: [Int]  =  GT
id _ :: Int `compare` x :: Int  =  GT
id _ :: Int `compare` 0 :: Int  =  GT
id _ :: Int `compare` id _ :: Int  =  EQ
id _ :: Int `compare` _ :: Bool  =  GT
id _ :: Int `compare` _ :: Char  =  GT
id _ :: Int `compare` _ :: [Int]  =  GT
_ :: Bool `compare` x :: Int  =  LT
_ :: Bool `compare` 0 :: Int  =  LT
_ :: Bool `compare` id _ :: Int  =  LT
_ :: Bool `compare` _ :: Bool  =  EQ
_ :: Bool `compare` _ :: Char  =  LT
_ :: Bool `compare` _ :: [Int]  =  LT
_ :: Char `compare` x :: Int  =  LT
_ :: Char `compare` 0 :: Int  =  LT
_ :: Char `compare` id _ :: Int  =  LT
_ :: Char `compare` _ :: Bool  =  GT
_ :: Char `compare` _ :: Char  =  EQ
_ :: Char `compare` _ :: [Int]  =  LT
_ :: [Int] `compare` x :: Int  =  GT
_ :: [Int] `compare` 0 :: Int  =  LT
_ :: [Int] `compare` id _ :: Int  =  LT
_ :: [Int] `compare` _ :: Bool  =  GT
_ :: [Int] `compare` _ :: Char  =  GT
_ :: [Int] `compare` _ :: [Int]  =  EQ
y :: Int `compare` _ :: Int  =  GT
1 :: Int `compare` _ :: Int  =  GT
id x :: Int `compare` _ :: Int  =  GT
id 0 :: Int `compare` _ :: Int  =  GT
id (id _) :: Int `compare` _ :: Int  =  GT
negate _ :: Int `compare` _ :: Int  =  GT
abs _ :: Int `compare` _ :: Int  =  GT
_ + _ :: Int `compare` _ :: Int  =  GT
head _ :: Int `compare` _ :: Int  =  GT
ord _ :: Int `compare` _ :: Int  =  GT
p :: Bool `compare` _ :: Int  =  LT
False :: Bool `compare` _ :: Int  =  GT
True :: Bool `compare` _ :: Int  =  GT
not _ :: Bool `compare` _ :: Int  =  GT
c :: Char `compare` _ :: Int  =  LT
'a' :: Char `compare` _ :: Int  =  GT
xs :: [Int] `compare` _ :: Int  =  GT
[] :: [Int] `compare` _ :: Int  =  GT
_:_ :: [Int] `compare` _ :: Int  =  GT
id :: Int -> Int `compare` _ :: Int  =  GT
(+) :: Int -> Int -> Int `compare` _ :: Int  =  GT
_ :: Int `compare` z :: Int  =  LT
_ :: Int `compare` -1 :: Int  =  LT
_ :: Int `compare` id y :: Int  =  LT
_ :: Int `compare` id 1 :: Int  =  LT
_ :: Int `compare` id (id x) :: Int  =  LT
_ :: Int `compare` id (id 0) :: Int  =  LT
_ :: Int `compare` id (id (id _)) :: Int  =  LT
_ :: Int `compare` id (negate _) :: Int  =  LT
_ :: Int `compare` id (abs _) :: Int  =  LT
_ :: Int `compare` id (_ + _) :: Int  =  LT
_ :: Int `compare` id (head _) :: Int  =  LT
_ :: Int `compare` id (ord _) :: Int  =  LT
_ :: Int `compare` negate x :: Int  =  LT
_ :: Int `compare` negate 0 :: Int  =  LT
_ :: Int `compare` negate (id _) :: Int  =  LT
_ :: Int `compare` abs x :: Int  =  LT
_ :: Int `compare` abs 0 :: Int  =  LT
_ :: Int `compare` abs (id _) :: Int  =  LT
_ :: Int `compare` _ + x :: Int  =  LT
_ :: Int `compare` _ + 0 :: Int  =  LT
_ :: Int `compare` _ + id _ :: Int  =  LT
_ :: Int `compare` x + _ :: Int  =  LT
_ :: Int `compare` 0 + _ :: Int  =  LT
_ :: Int `compare` id _ + _ :: Int  =  LT
_ :: Int `compare` _ * _ :: Int  =  LT
_ :: Int `compare` f _ :: Int  =  LT
_ :: Int `compare` head xs :: Int  =  LT
_ :: Int `compare` head [] :: Int  =  LT
_ :: Int `compare` head (_:_) :: Int  =  LT
_ :: Int `compare` ord c :: Int  =  LT
_ :: Int `compare` ord 'a' :: Int  =  LT
_ :: Int `compare` q :: Bool  =  GT
_ :: Int `compare` not p :: Bool  =  LT
_ :: Int `compare` not False :: Bool  =  LT
_ :: Int `compare` not True :: Bool  =  LT
_ :: Int `compare` not (not _) :: Bool  =  LT
_ :: Int `compare` _ || _ :: Bool  =  LT
_ :: Int `compare` d :: Char  =  GT
_ :: Int `compare` ' ' :: Char  =  LT
_ :: Int `compare` ys :: [Int]  =  LT
_ :: Int `compare` [0] :: [Int]  =  LT
_ :: Int `compare` _:xs :: [Int]  =  LT
_ :: Int `compare` [_] :: [Int]  =  LT
_ :: Int `compare` _:_:_ :: [Int]  =  LT
_ :: Int `compare` x:_ :: [Int]  =  LT
_ :: Int `compare` 0:_ :: [Int]  =  LT
_ :: Int `compare` id _:_ :: [Int]  =  LT
_ :: Int `compare` tail _ :: [Int]  =  LT
_ :: Int `compare` _ ++ _ :: [Int]  =  LT
_ :: Int `compare` negate :: Int -> Int  =  LT
_ :: Int `compare` abs :: Int -> Int  =  LT
_ :: Int `compare` (_ +) :: Int -> Int  =  LT
_ :: Int `compare` (*) :: Int -> Int -> Int  =  LT
_ :: Int `compare` not :: Bool -> Bool  =  LT
_ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
x :: Int `compare` y :: Int  =  LT
x :: Int `compare` 1 :: Int  =  LT
x :: Int `compare` id x :: Int  =  LT
x :: Int `compare` id 0 :: Int  =  LT
x :: Int `compare` id (id _) :: Int  =  LT
x :: Int `compare` negate _ :: Int  =  LT
x :: Int `compare` abs _ :: Int  =  LT
x :: Int `compare` _ + _ :: Int  =  LT
x :: Int `compare` head _ :: Int  =  LT
x :: Int `compare` ord _ :: Int  =  LT
x :: Int `compare` p :: Bool  =  GT
x :: Int `compare` False :: Bool  =  LT
x :: Int `compare` True :: Bool  =  LT
x :: Int `compare` not _ :: Bool  =  LT
x :: Int `compare` c :: Char  =  GT
x :: Int `compare` 'a' :: Char  =  LT
x :: Int `compare` xs :: [Int]  =  LT
x :: Int `compare` [] :: [Int]  =  LT
x :: Int `compare` _:_ :: [Int]  =  LT
x :: Int `compare` id :: Int -> Int  =  LT
x :: Int `compare` (+) :: Int -> Int -> Int  =  LT
0 :: Int `compare` y :: Int  =  GT
0 :: Int `compare` 1 :: Int  =  LT
0 :: Int `compare` id x :: Int  =  LT
0 :: Int `compare` id 0 :: Int  =  LT
0 :: Int `compare` id (id _) :: Int  =  LT
0 :: Int `compare` negate _ :: Int  =  LT
0 :: Int `compare` abs _ :: Int  =  LT
0 :: Int `compare` _ + _ :: Int  =  LT
0 :: Int `compare` head _ :: Int  =  LT
0 :: Int `compare` ord _ :: Int  =  LT
0 :: Int `compare` p :: Bool  =  GT
0 :: Int `compare` False :: Bool  =  GT
0 :: Int `compare` True :: Bool  =  GT
0 :: Int `compare` not _ :: Bool  =  LT
0 :: Int `compare` c :: Char  =  GT
0 :: Int `compare` 'a' :: Char  =  GT
0 :: Int `compare` xs :: [Int]  =  GT
0 :: Int `compare` [] :: [Int]  =  LT
0 :: Int `compare` _:_ :: [Int]  =  LT
0 :: Int `compare` id :: Int -> Int  =  LT
0 :: Int `compare` (+) :: Int -> Int -> Int  =  LT
id _ :: Int `compare` y :: Int  =  GT
id _ :: Int `compare` 1 :: Int  =  GT
id _ :: Int `compare` id x :: Int  =  LT
id _ :: Int `compare` id 0 :: Int  =  LT
id _ :: Int `compare` id (id _) :: Int  =  LT
id _ :: Int `compare` negate _ :: Int  =  LT
id _ :: Int `compare` abs _ :: Int  =  LT
id _ :: Int `compare` _ + _ :: Int  =  LT
id _ :: Int `compare` head _ :: Int  =  LT
id _ :: Int `compare` ord _ :: Int  =  GT
id _ :: Int `compare` p :: Bool  =  GT
id _ :: Int `compare` False :: Bool  =  GT
id _ :: Int `compare` True :: Bool  =  GT
id _ :: Int `compare` not _ :: Bool  =  GT
id _ :: Int `compare` c :: Char  =  GT
id _ :: Int `compare` 'a' :: Char  =  GT
id _ :: Int `compare` xs :: [Int]  =  GT
id _ :: Int `compare` [] :: [Int]  =  GT
id _ :: Int `compare` _:_ :: [Int]  =  LT
id _ :: Int `compare` id :: Int -> Int  =  GT
id _ :: Int `compare` (+) :: Int -> Int -> Int  =  GT
_ :: Bool `compare` y :: Int  =  LT
_ :: Bool `compare` 1 :: Int  =  LT
_ :: Bool `compare` id x :: Int  =  LT
_ :: Bool `compare` id 0 :: Int  =  LT
_ :: Bool `compare` id (id _) :: Int  =  LT
_ :: Bool `compare` negate _ :: Int  =  LT
_ :: Bool `compare` abs _ :: Int  =  LT
_ :: Bool `compare` _ + _ :: Int  =  LT
_ :: Bool `compare` head _ :: Int  =  LT
_ :: Bool `compare` ord _ :: Int  =  LT
_ :: Bool `compare` p :: Bool  =  LT
_ :: Bool `compare` False :: Bool  =  LT
_ :: Bool `compare` True :: Bool  =  LT
_ :: Bool `compare` not _ :: Bool  =  LT
_ :: Bool `compare` c :: Char  =  LT
_ :: Bool `compare` 'a' :: Char  =  LT
_ :: Bool `compare` xs :: [Int]  =  LT
_ :: Bool `compare` [] :: [Int]  =  LT
_ :: Bool `compare` _:_ :: [Int]  =  LT
_ :: Bool `compare` id :: Int -> Int  =  LT
_ :: Bool `compare` (+) :: Int -> Int -> Int  =  LT
_ :: Char `compare` y :: Int  =  LT
_ :: Char `compare` 1 :: Int  =  LT
_ :: Char `compare` id x :: Int  =  LT
_ :: Char `compare` id 0 :: Int  =  LT
_ :: Char `compare` id (id _) :: Int  =  LT
_ :: Char `compare` negate _ :: Int  =  LT
_ :: Char `compare` abs _ :: Int  =  LT
_ :: Char `compare` _ + _ :: Int  =  LT
_ :: Char `compare` head _ :: Int  =  LT
_ :: Char `compare` ord _ :: Int  =  LT
_ :: Char `compare` p :: Bool  =  GT
_ :: Char `compare` False :: Bool  =  LT
_ :: Char `compare` True :: Bool  =  LT
_ :: Char `compare` not _ :: Bool  =  LT
_ :: Char `compare` c :: Char  =  LT
_ :: Char `compare` 'a' :: Char  =  LT
_ :: Char `compare` xs :: [Int]  =  LT
_ :: Char `compare` [] :: [Int]  =  LT
_ :: Char `compare` _:_ :: [Int]  =  LT
_ :: Char `compare` id :: Int -> Int  =  LT
_ :: Char `compare` (+) :: Int -> Int -> Int  =  LT
_ :: [Int] `compare` y :: Int  =  GT
_ :: [Int] `compare` 1 :: Int  =  LT
_ :: [Int] `compare` id x :: Int  =  LT
_ :: [Int] `compare` id 0 :: Int  =  LT
_ :: [Int] `compare` id (id _) :: Int  =  LT
_ :: [Int] `compare` negate _ :: Int  =  LT
_ :: [Int] `compare` abs _ :: Int  =  LT
_ :: [Int] `compare` _ + _ :: Int  =  LT
_ :: [Int] `compare` head _ :: Int  =  LT
_ :: [Int] `compare` ord _ :: Int  =  LT
_ :: [Int] `compare` p :: Bool  =  GT
_ :: [Int] `compare` False :: Bool  =  LT
_ :: [Int] `compare` True :: Bool  =  LT
_ :: [Int] `compare` not _ :: Bool  =  LT
_ :: [Int] `compare` c :: Char  =  GT
_ :: [Int] `compare` 'a' :: Char  =  LT
_ :: [Int] `compare` xs :: [Int]  =  LT
_ :: [Int] `compare` [] :: [Int]  =  LT
_ :: [Int] `compare` _:_ :: [Int]  =  LT
_ :: [Int] `compare` id :: Int -> Int  =  LT
_ :: [Int] `compare` (+) :: Int -> Int -> Int  =  LT
y :: Int `compare` x :: Int  =  GT
y :: Int `compare` 0 :: Int  =  LT
y :: Int `compare` id _ :: Int  =  LT
y :: Int `compare` _ :: Bool  =  GT
y :: Int `compare` _ :: Char  =  GT
y :: Int `compare` _ :: [Int]  =  LT
1 :: Int `compare` x :: Int  =  GT
1 :: Int `compare` 0 :: Int  =  GT
1 :: Int `compare` id _ :: Int  =  LT
1 :: Int `compare` _ :: Bool  =  GT
1 :: Int `compare` _ :: Char  =  GT
1 :: Int `compare` _ :: [Int]  =  GT
id x :: Int `compare` x :: Int  =  GT
id x :: Int `compare` 0 :: Int  =  GT
id x :: Int `compare` id _ :: Int  =  GT
id x :: Int `compare` _ :: Bool  =  GT
id x :: Int `compare` _ :: Char  =  GT
id x :: Int `compare` _ :: [Int]  =  GT
id 0 :: Int `compare` x :: Int  =  GT
id 0 :: Int `compare` 0 :: Int  =  GT
id 0 :: Int `compare` id _ :: Int  =  GT
id 0 :: Int `compare` _ :: Bool  =  GT
id 0 :: Int `compare` _ :: Char  =  GT
id 0 :: Int `compare` _ :: [Int]  =  GT
id (id _) :: Int `compare` x :: Int  =  GT
id (id _) :: Int `compare` 0 :: Int  =  GT
id (id _) :: Int `compare` id _ :: Int  =  GT
id (id _) :: Int `compare` _ :: Bool  =  GT
id (id _) :: Int `compare` _ :: Char  =  GT
id (id _) :: Int `compare` _ :: [Int]  =  GT
negate _ :: Int `compare` x :: Int  =  GT
negate _ :: Int `compare` 0 :: Int  =  GT
negate _ :: Int `compare` id _ :: Int  =  GT
negate _ :: Int `compare` _ :: Bool  =  GT
negate _ :: Int `compare` _ :: Char  =  GT
negate _ :: Int `compare` _ :: [Int]  =  GT
abs _ :: Int `compare` x :: Int  =  GT
abs _ :: Int `compare` 0 :: Int  =  GT
abs _ :: Int `compare` id _ :: Int  =  GT
abs _ :: Int `compare` _ :: Bool  =  GT
abs _ :: Int `compare` _ :: Char  =  GT
abs _ :: Int `compare` _ :: [Int]  =  GT
_ + _ :: Int `compare` x :: Int  =  GT
_ + _ :: Int `compare` 0 :: Int  =  GT
_ + _ :: Int `compare` id _ :: Int  =  GT
_ + _ :: Int `compare` _ :: Bool  =  GT
_ + _ :: Int `compare` _ :: Char  =  GT
_ + _ :: Int `compare` _ :: [Int]  =  GT
head _ :: Int `compare` x :: Int  =  GT
head _ :: Int `compare` 0 :: Int  =  GT
head _ :: Int `compare` id _ :: Int  =  GT
head _ :: Int `compare` _ :: Bool  =  GT
head _ :: Int `compare` _ :: Char  =  GT
head _ :: Int `compare` _ :: [Int]  =  GT
ord _ :: Int `compare` x :: Int  =  GT
ord _ :: Int `compare` 0 :: Int  =  GT
ord _ :: Int `compare` id _ :: Int  =  LT
ord _ :: Int `compare` _ :: Bool  =  GT
ord _ :: Int `compare` _ :: Char  =  GT
ord _ :: Int `compare` _ :: [Int]  =  GT
p :: Bool `compare` x :: Int  =  LT
p :: Bool `compare` 0 :: Int  =  LT
p :: Bool `compare` id _ :: Int  =  LT
p :: Bool `compare` _ :: Bool  =  GT
p :: Bool `compare` _ :: Char  =  LT
p :: Bool `compare` _ :: [Int]  =  LT
False :: Bool `compare` x :: Int  =  GT
False :: Bool `compare` 0 :: Int  =  LT
False :: Bool `compare` id _ :: Int  =  LT
False :: Bool `compare` _ :: Bool  =  GT
False :: Bool `compare` _ :: Char  =  GT
False :: Bool `compare` _ :: [Int]  =  GT
True :: Bool `compare` x :: Int  =  GT
True :: Bool `compare` 0 :: Int  =  LT
True :: Bool `compare` id _ :: Int  =  LT
True :: Bool `compare` _ :: Bool  =  GT
True :: Bool `compare` _ :: Char  =  GT
True :: Bool `compare` _ :: [Int]  =  GT
not _ :: Bool `compare` x :: Int  =  GT
not _ :: Bool `compare` 0 :: Int  =  GT
not _ :: Bool `compare` id _ :: Int  =  LT
not _ :: Bool `compare` _ :: Bool  =  GT
not _ :: Bool `compare` _ :: Char  =  GT
not _ :: Bool `compare` _ :: [Int]  =  GT
c :: Char `compare` x :: Int  =  LT
c :: Char `compare` 0 :: Int  =  LT
c :: Char `compare` id _ :: Int  =  LT
c :: Char `compare` _ :: Bool  =  GT
c :: Char `compare` _ :: Char  =  GT
c :: Char `compare` _ :: [Int]  =  LT
'a' :: Char `compare` x :: Int  =  GT
'a' :: Char `compare` 0 :: Int  =  LT
'a' :: Char `compare` id _ :: Int  =  LT
'a' :: Char `compare` _ :: Bool  =  GT
'a' :: Char `compare` _ :: Char  =  GT
'a' :: Char `compare` _ :: [Int]  =  GT
xs :: [Int] `compare` x :: Int  =  GT
xs :: [Int] `compare` 0 :: Int  =  LT
xs :: [Int] `compare` id _ :: Int  =  LT
xs :: [Int] `compare` _ :: Bool  =  GT
xs :: [Int] `compare` _ :: Char  =  GT
xs :: [Int] `compare` _ :: [Int]  =  GT
[] :: [Int] `compare` x :: Int  =  GT
[] :: [Int] `compare` 0 :: Int  =  GT
[] :: [Int] `compare` id _ :: Int  =  LT
[] :: [Int] `compare` _ :: Bool  =  GT
[] :: [Int] `compare` _ :: Char  =  GT
[] :: [Int] `compare` _ :: [Int]  =  GT
_:_ :: [Int] `compare` x :: Int  =  GT
_:_ :: [Int] `compare` 0 :: Int  =  GT
_:_ :: [Int] `compare` id _ :: Int  =  GT
_:_ :: [Int] `compare` _ :: Bool  =  GT
_:_ :: [Int] `compare` _ :: Char  =  GT
_:_ :: [Int] `compare` _ :: [Int]  =  GT
id :: Int -> Int `compare` x :: Int  =  GT
id :: Int -> Int `compare` 0 :: Int  =  GT
id :: Int -> Int `compare` id _ :: Int  =  LT
id :: Int -> Int `compare` _ :: Bool  =  GT
id :: Int -> Int `compare` _ :: Char  =  GT
id :: Int -> Int `compare` _ :: [Int]  =  GT
(+) :: Int -> Int -> Int `compare` x :: Int  =  GT
(+) :: Int -> Int -> Int `compare` 0 :: Int  =  GT
(+) :: Int -> Int -> Int `compare` id _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` _ :: Bool  =  GT
(+) :: Int -> Int -> Int `compare` _ :: Char  =  GT
(+) :: Int -> Int -> Int `compare` _ :: [Int]  =  GT
z :: Int `compare` _ :: Int  =  GT
-1 :: Int `compare` _ :: Int  =  GT
id y :: Int `compare` _ :: Int  =  GT
id 1 :: Int `compare` _ :: Int  =  GT
id (id x) :: Int `compare` _ :: Int  =  GT
id (id 0) :: Int `compare` _ :: Int  =  GT
id (id (id _)) :: Int `compare` _ :: Int  =  GT
id (negate _) :: Int `compare` _ :: Int  =  GT
id (abs _) :: Int `compare` _ :: Int  =  GT
id (_ + _) :: Int `compare` _ :: Int  =  GT
id (head _) :: Int `compare` _ :: Int  =  GT
id (ord _) :: Int `compare` _ :: Int  =  GT
negate x :: Int `compare` _ :: Int  =  GT
negate 0 :: Int `compare` _ :: Int  =  GT
negate (id _) :: Int `compare` _ :: Int  =  GT
abs x :: Int `compare` _ :: Int  =  GT
abs 0 :: Int `compare` _ :: Int  =  GT
abs (id _) :: Int `compare` _ :: Int  =  GT
_ + x :: Int `compare` _ :: Int  =  GT
_ + 0 :: Int `compare` _ :: Int  =  GT
_ + id _ :: Int `compare` _ :: Int  =  GT
x + _ :: Int `compare` _ :: Int  =  GT
0 + _ :: Int `compare` _ :: Int  =  GT
id _ + _ :: Int `compare` _ :: Int  =  GT
_ * _ :: Int `compare` _ :: Int  =  GT
f _ :: Int `compare` _ :: Int  =  GT
head xs :: Int `compare` _ :: Int  =  GT
head [] :: Int `compare` _ :: Int  =  GT
head (_:_) :: Int `compare` _ :: Int  =  GT
ord c :: Int `compare` _ :: Int  =  GT
ord 'a' :: Int `compare` _ :: Int  =  GT
q :: Bool `compare` _ :: Int  =  LT
not p :: Bool `compare` _ :: Int  =  GT
not False :: Bool `compare` _ :: Int  =  GT
not True :: Bool `compare` _ :: Int  =  GT
not (not _) :: Bool `compare` _ :: Int  =  GT
_ || _ :: Bool `compare` _ :: Int  =  GT
d :: Char `compare` _ :: Int  =  LT
' ' :: Char `compare` _ :: Int  =  GT
ys :: [Int] `compare` _ :: Int  =  GT
[0] :: [Int] `compare` _ :: Int  =  GT
_:xs :: [Int] `compare` _ :: Int  =  GT
[_] :: [Int] `compare` _ :: Int  =  GT
_:_:_ :: [Int] `compare` _ :: Int  =  GT
x:_ :: [Int] `compare` _ :: Int  =  GT
0:_ :: [Int] `compare` _ :: Int  =  GT
id _:_ :: [Int] `compare` _ :: Int  =  GT
tail _ :: [Int] `compare` _ :: Int  =  GT
_ ++ _ :: [Int] `compare` _ :: Int  =  GT
negate :: Int -> Int `compare` _ :: Int  =  GT
abs :: Int -> Int `compare` _ :: Int  =  GT
(_ +) :: Int -> Int `compare` _ :: Int  =  GT
(*) :: Int -> Int -> Int `compare` _ :: Int  =  GT
not :: Bool -> Bool `compare` _ :: Int  =  GT
(||) :: Bool -> Bool -> Bool `compare` _ :: Int  =  GT
_ :: Int `compare` x' :: Int  =  LT
_ :: Int `compare` 2 :: Int  =  LT
_ :: Int `compare` id z :: Int  =  LT
_ :: Int `compare` id (-1) :: Int  =  LT
_ :: Int `compare` id (id y) :: Int  =  LT
_ :: Int `compare` id (id 1) :: Int  =  LT
_ :: Int `compare` id (id (id x)) :: Int  =  LT
_ :: Int `compare` id (id (id 0)) :: Int  =  LT
_ :: Int `compare` id (id (id (id _))) :: Int  =  LT
_ :: Int `compare` id (id (negate _)) :: Int  =  LT
_ :: Int `compare` id (id (abs _)) :: Int  =  LT
_ :: Int `compare` id (id (_ + _)) :: Int  =  LT
_ :: Int `compare` id (id (head _)) :: Int  =  LT
_ :: Int `compare` id (id (ord _)) :: Int  =  LT
_ :: Int `compare` id (negate x) :: Int  =  LT
_ :: Int `compare` id (negate 0) :: Int  =  LT
_ :: Int `compare` id (negate (id _)) :: Int  =  LT
_ :: Int `compare` id (abs x) :: Int  =  LT
_ :: Int `compare` id (abs 0) :: Int  =  LT
_ :: Int `compare` id (abs (id _)) :: Int  =  LT
_ :: Int `compare` id (_ + x) :: Int  =  LT
_ :: Int `compare` id (_ + 0) :: Int  =  LT
_ :: Int `compare` id (_ + id _) :: Int  =  LT
_ :: Int `compare` id (x + _) :: Int  =  LT
_ :: Int `compare` id (0 + _) :: Int  =  LT
_ :: Int `compare` id (id _ + _) :: Int  =  LT
_ :: Int `compare` id (_ * _) :: Int  =  LT
_ :: Int `compare` id (f _) :: Int  =  LT
_ :: Int `compare` id (head xs) :: Int  =  LT
_ :: Int `compare` id (head []) :: Int  =  LT
_ :: Int `compare` id (head (_:_)) :: Int  =  LT
_ :: Int `compare` id (ord c) :: Int  =  LT
_ :: Int `compare` id (ord 'a') :: Int  =  LT
_ :: Int `compare` negate y :: Int  =  LT
_ :: Int `compare` negate 1 :: Int  =  LT
_ :: Int `compare` negate (id x) :: Int  =  LT
_ :: Int `compare` negate (id 0) :: Int  =  LT
_ :: Int `compare` negate (id (id _)) :: Int  =  LT
_ :: Int `compare` negate (negate _) :: Int  =  LT
_ :: Int `compare` negate (abs _) :: Int  =  LT
_ :: Int `compare` negate (_ + _) :: Int  =  LT
_ :: Int `compare` negate (head _) :: Int  =  LT
_ :: Int `compare` negate (ord _) :: Int  =  LT
_ :: Int `compare` abs y :: Int  =  LT
_ :: Int `compare` abs 1 :: Int  =  LT
_ :: Int `compare` abs (id x) :: Int  =  LT
_ :: Int `compare` abs (id 0) :: Int  =  LT
_ :: Int `compare` abs (id (id _)) :: Int  =  LT
_ :: Int `compare` abs (negate _) :: Int  =  LT
_ :: Int `compare` abs (abs _) :: Int  =  LT
_ :: Int `compare` abs (_ + _) :: Int  =  LT
_ :: Int `compare` abs (head _) :: Int  =  LT
_ :: Int `compare` abs (ord _) :: Int  =  LT
_ :: Int `compare` _ + y :: Int  =  LT
_ :: Int `compare` _ + 1 :: Int  =  LT
_ :: Int `compare` _ + id x :: Int  =  LT
_ :: Int `compare` _ + id 0 :: Int  =  LT
_ :: Int `compare` _ + id (id _) :: Int  =  LT
_ :: Int `compare` _ + negate _ :: Int  =  LT
_ :: Int `compare` _ + abs _ :: Int  =  LT
_ :: Int `compare` _ + (_ + _) :: Int  =  LT
_ :: Int `compare` _ + head _ :: Int  =  LT
_ :: Int `compare` _ + ord _ :: Int  =  LT
_ :: Int `compare` x + x :: Int  =  LT
_ :: Int `compare` x + 0 :: Int  =  LT
_ :: Int `compare` x + id _ :: Int  =  LT
_ :: Int `compare` 0 + x :: Int  =  LT
_ :: Int `compare` 0 + 0 :: Int  =  LT
_ :: Int `compare` 0 + id _ :: Int  =  LT
_ :: Int `compare` id _ + x :: Int  =  LT
_ :: Int `compare` id _ + 0 :: Int  =  LT
_ :: Int `compare` id _ + id _ :: Int  =  LT
_ :: Int `compare` _ * x :: Int  =  LT
_ :: Int `compare` _ * 0 :: Int  =  LT
_ :: Int `compare` _ * id _ :: Int  =  LT
_ :: Int `compare` f x :: Int  =  LT
_ :: Int `compare` f 0 :: Int  =  LT
_ :: Int `compare` f (id _) :: Int  =  LT
_ :: Int `compare` y + _ :: Int  =  LT
_ :: Int `compare` 1 + _ :: Int  =  LT
_ :: Int `compare` id x + _ :: Int  =  LT
_ :: Int `compare` id 0 + _ :: Int  =  LT
_ :: Int `compare` id (id _) + _ :: Int  =  LT
_ :: Int `compare` negate _ + _ :: Int  =  LT
_ :: Int `compare` abs _ + _ :: Int  =  LT
_ :: Int `compare` (_ + _) + _ :: Int  =  LT
_ :: Int `compare` head _ + _ :: Int  =  LT
_ :: Int `compare` ord _ + _ :: Int  =  LT
_ :: Int `compare` x * _ :: Int  =  LT
_ :: Int `compare` 0 * _ :: Int  =  LT
_ :: Int `compare` id _ * _ :: Int  =  LT
_ :: Int `compare` g _ :: Int  =  LT
_ :: Int `compare` head ys :: Int  =  LT
_ :: Int `compare` head [0] :: Int  =  LT
_ :: Int `compare` head (_:xs) :: Int  =  LT
_ :: Int `compare` head [_] :: Int  =  LT
_ :: Int `compare` head (_:_:_) :: Int  =  LT
_ :: Int `compare` head (x:_) :: Int  =  LT
_ :: Int `compare` head (0:_) :: Int  =  LT
_ :: Int `compare` head (id _:_) :: Int  =  LT
_ :: Int `compare` head (tail _) :: Int  =  LT
_ :: Int `compare` head (_ ++ _) :: Int  =  LT
_ :: Int `compare` ord d :: Int  =  LT
_ :: Int `compare` ord ' ' :: Int  =  LT
_ :: Int `compare` r :: Bool  =  GT
_ :: Int `compare` not q :: Bool  =  LT
_ :: Int `compare` not (not p) :: Bool  =  LT
_ :: Int `compare` not (not False) :: Bool  =  LT
_ :: Int `compare` not (not True) :: Bool  =  LT
_ :: Int `compare` not (not (not _)) :: Bool  =  LT
_ :: Int `compare` not (_ || _) :: Bool  =  LT
_ :: Int `compare` _ || p :: Bool  =  LT
_ :: Int `compare` _ || False :: Bool  =  LT
_ :: Int `compare` _ || True :: Bool  =  LT
_ :: Int `compare` _ || not _ :: Bool  =  LT
_ :: Int `compare` p || _ :: Bool  =  LT
_ :: Int `compare` False || _ :: Bool  =  LT
_ :: Int `compare` True || _ :: Bool  =  LT
_ :: Int `compare` not _ || _ :: Bool  =  LT
_ :: Int `compare` _ && _ :: Bool  =  LT
_ :: Int `compare` _ == _ :: Bool  =  LT
_ :: Int `compare` _ == _ :: Bool  =  LT
_ :: Int `compare` odd _ :: Bool  =  LT
_ :: Int `compare` even _ :: Bool  =  LT
_ :: Int `compare` elem _ _ :: Bool  =  LT
_ :: Int `compare` e :: Char  =  GT
_ :: Int `compare` 'b' :: Char  =  LT
_ :: Int `compare` zs :: [Int]  =  LT
_ :: Int `compare` [0,0] :: [Int]  =  LT
_ :: Int `compare` [1] :: [Int]  =  LT
_ :: Int `compare` _:ys :: [Int]  =  LT
_ :: Int `compare` [_,0] :: [Int]  =  LT
_ :: Int `compare` _:_:xs :: [Int]  =  LT
_ :: Int `compare` [_,_] :: [Int]  =  LT
_ :: Int `compare` _:_:_:_ :: [Int]  =  LT
_ :: Int `compare` _:x:_ :: [Int]  =  LT
_ :: Int `compare` _:0:_ :: [Int]  =  LT
_ :: Int `compare` _:id _:_ :: [Int]  =  LT
_ :: Int `compare` _:tail _ :: [Int]  =  LT
_ :: Int `compare` _:(_ ++ _) :: [Int]  =  LT
_ :: Int `compare` x:xs :: [Int]  =  LT
_ :: Int `compare` [x] :: [Int]  =  LT
_ :: Int `compare` x:_:_ :: [Int]  =  LT
_ :: Int `compare` 0:xs :: [Int]  =  LT
_ :: Int `compare` [0] :: [Int]  =  LT
_ :: Int `compare` 0:_:_ :: [Int]  =  LT
_ :: Int `compare` id _:xs :: [Int]  =  LT
_ :: Int `compare` [id _] :: [Int]  =  LT
_ :: Int `compare` id _:_:_ :: [Int]  =  LT
_ :: Int `compare` y:_ :: [Int]  =  LT
_ :: Int `compare` 1:_ :: [Int]  =  LT
_ :: Int `compare` id x:_ :: [Int]  =  LT
_ :: Int `compare` id 0:_ :: [Int]  =  LT
_ :: Int `compare` id (id _):_ :: [Int]  =  LT
_ :: Int `compare` negate _:_ :: [Int]  =  LT
_ :: Int `compare` abs _:_ :: [Int]  =  LT
_ :: Int `compare` _ + _:_ :: [Int]  =  LT
_ :: Int `compare` head _:_ :: [Int]  =  LT
_ :: Int `compare` ord _:_ :: [Int]  =  LT
_ :: Int `compare` tail xs :: [Int]  =  LT
_ :: Int `compare` tail [] :: [Int]  =  LT
_ :: Int `compare` tail (_:_) :: [Int]  =  LT
_ :: Int `compare` _ ++ xs :: [Int]  =  LT
_ :: Int `compare` _ ++ [] :: [Int]  =  LT
_ :: Int `compare` _ ++ (_:_) :: [Int]  =  LT
_ :: Int `compare` xs ++ _ :: [Int]  =  LT
_ :: Int `compare` [] ++ _ :: [Int]  =  LT
_ :: Int `compare` (_:_) ++ _ :: [Int]  =  LT
_ :: Int `compare` sort _ :: [Int]  =  LT
_ :: Int `compare` insert _ _ :: [Int]  =  LT
_ :: Int `compare` (x +) :: Int -> Int  =  LT
_ :: Int `compare` (0 +) :: Int -> Int  =  LT
_ :: Int `compare` (id _ +) :: Int -> Int  =  LT
_ :: Int `compare` (_ *) :: Int -> Int  =  LT
_ :: Int `compare` f :: Int -> Int  =  LT
_ :: Int `compare` (_ ||) :: Bool -> Bool  =  LT
_ :: Int `compare` (&&) :: Bool -> Bool -> Bool  =  LT
x :: Int `compare` z :: Int  =  LT
x :: Int `compare` -1 :: Int  =  LT
x :: Int `compare` id y :: Int  =  LT
x :: Int `compare` id 1 :: Int  =  LT
x :: Int `compare` id (id x) :: Int  =  LT
x :: Int `compare` id (id 0) :: Int  =  LT
x :: Int `compare` id (id (id _)) :: Int  =  LT
x :: Int `compare` id (negate _) :: Int  =  LT
x :: Int `compare` id (abs _) :: Int  =  LT
x :: Int `compare` id (_ + _) :: Int  =  LT
x :: Int `compare` id (head _) :: Int  =  LT
x :: Int `compare` id (ord _) :: Int  =  LT
x :: Int `compare` negate x :: Int  =  LT
x :: Int `compare` negate 0 :: Int  =  LT
x :: Int `compare` negate (id _) :: Int  =  LT
x :: Int `compare` abs x :: Int  =  LT
x :: Int `compare` abs 0 :: Int  =  LT
x :: Int `compare` abs (id _) :: Int  =  LT
x :: Int `compare` _ + x :: Int  =  LT
x :: Int `compare` _ + 0 :: Int  =  LT
x :: Int `compare` _ + id _ :: Int  =  LT
x :: Int `compare` x + _ :: Int  =  LT
x :: Int `compare` 0 + _ :: Int  =  LT
x :: Int `compare` id _ + _ :: Int  =  LT
x :: Int `compare` _ * _ :: Int  =  LT
x :: Int `compare` f _ :: Int  =  LT
x :: Int `compare` head xs :: Int  =  LT
x :: Int `compare` head [] :: Int  =  LT
x :: Int `compare` head (_:_) :: Int  =  LT
x :: Int `compare` ord c :: Int  =  LT
x :: Int `compare` ord 'a' :: Int  =  LT
x :: Int `compare` q :: Bool  =  GT
x :: Int `compare` not p :: Bool  =  LT
x :: Int `compare` not False :: Bool  =  LT
x :: Int `compare` not True :: Bool  =  LT
x :: Int `compare` not (not _) :: Bool  =  LT
x :: Int `compare` _ || _ :: Bool  =  LT
x :: Int `compare` d :: Char  =  GT
x :: Int `compare` ' ' :: Char  =  LT
x :: Int `compare` ys :: [Int]  =  LT
x :: Int `compare` [0] :: [Int]  =  LT
x :: Int `compare` _:xs :: [Int]  =  LT
x :: Int `compare` [_] :: [Int]  =  LT
x :: Int `compare` _:_:_ :: [Int]  =  LT
x :: Int `compare` x:_ :: [Int]  =  LT
x :: Int `compare` 0:_ :: [Int]  =  LT
x :: Int `compare` id _:_ :: [Int]  =  LT
x :: Int `compare` tail _ :: [Int]  =  LT
x :: Int `compare` _ ++ _ :: [Int]  =  LT
x :: Int `compare` negate :: Int -> Int  =  LT
x :: Int `compare` abs :: Int -> Int  =  LT
x :: Int `compare` (_ +) :: Int -> Int  =  LT
x :: Int `compare` (*) :: Int -> Int -> Int  =  LT
x :: Int `compare` not :: Bool -> Bool  =  LT
x :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
0 :: Int `compare` z :: Int  =  GT
0 :: Int `compare` -1 :: Int  =  LT
0 :: Int `compare` id y :: Int  =  LT
0 :: Int `compare` id 1 :: Int  =  LT
0 :: Int `compare` id (id x) :: Int  =  LT
0 :: Int `compare` id (id 0) :: Int  =  LT
0 :: Int `compare` id (id (id _)) :: Int  =  LT
0 :: Int `compare` id (negate _) :: Int  =  LT
0 :: Int `compare` id (abs _) :: Int  =  LT
0 :: Int `compare` id (_ + _) :: Int  =  LT
0 :: Int `compare` id (head _) :: Int  =  LT
0 :: Int `compare` id (ord _) :: Int  =  LT
0 :: Int `compare` negate x :: Int  =  LT
0 :: Int `compare` negate 0 :: Int  =  LT
0 :: Int `compare` negate (id _) :: Int  =  LT
0 :: Int `compare` abs x :: Int  =  LT
0 :: Int `compare` abs 0 :: Int  =  LT
0 :: Int `compare` abs (id _) :: Int  =  LT
0 :: Int `compare` _ + x :: Int  =  LT
0 :: Int `compare` _ + 0 :: Int  =  LT
0 :: Int `compare` _ + id _ :: Int  =  LT
0 :: Int `compare` x + _ :: Int  =  LT
0 :: Int `compare` 0 + _ :: Int  =  LT
0 :: Int `compare` id _ + _ :: Int  =  LT
0 :: Int `compare` _ * _ :: Int  =  LT
0 :: Int `compare` f _ :: Int  =  LT
0 :: Int `compare` head xs :: Int  =  LT
0 :: Int `compare` head [] :: Int  =  LT
0 :: Int `compare` head (_:_) :: Int  =  LT
0 :: Int `compare` ord c :: Int  =  LT
0 :: Int `compare` ord 'a' :: Int  =  LT
0 :: Int `compare` q :: Bool  =  GT
0 :: Int `compare` not p :: Bool  =  LT
0 :: Int `compare` not False :: Bool  =  LT
0 :: Int `compare` not True :: Bool  =  LT
0 :: Int `compare` not (not _) :: Bool  =  LT
0 :: Int `compare` _ || _ :: Bool  =  LT
0 :: Int `compare` d :: Char  =  GT
0 :: Int `compare` ' ' :: Char  =  GT
0 :: Int `compare` ys :: [Int]  =  GT
0 :: Int `compare` [0] :: [Int]  =  LT
0 :: Int `compare` _:xs :: [Int]  =  LT
0 :: Int `compare` [_] :: [Int]  =  LT
0 :: Int `compare` _:_:_ :: [Int]  =  LT
0 :: Int `compare` x:_ :: [Int]  =  LT
0 :: Int `compare` 0:_ :: [Int]  =  LT
0 :: Int `compare` id _:_ :: [Int]  =  LT
0 :: Int `compare` tail _ :: [Int]  =  LT
0 :: Int `compare` _ ++ _ :: [Int]  =  LT
0 :: Int `compare` negate :: Int -> Int  =  LT
0 :: Int `compare` abs :: Int -> Int  =  LT
0 :: Int `compare` (_ +) :: Int -> Int  =  LT
0 :: Int `compare` (*) :: Int -> Int -> Int  =  LT
0 :: Int `compare` not :: Bool -> Bool  =  LT
0 :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
id _ :: Int `compare` z :: Int  =  GT
id _ :: Int `compare` -1 :: Int  =  GT
id _ :: Int `compare` id y :: Int  =  LT
id _ :: Int `compare` id 1 :: Int  =  LT
id _ :: Int `compare` id (id x) :: Int  =  LT
id _ :: Int `compare` id (id 0) :: Int  =  LT
id _ :: Int `compare` id (id (id _)) :: Int  =  LT
id _ :: Int `compare` id (negate _) :: Int  =  LT
id _ :: Int `compare` id (abs _) :: Int  =  LT
id _ :: Int `compare` id (_ + _) :: Int  =  LT
id _ :: Int `compare` id (head _) :: Int  =  LT
id _ :: Int `compare` id (ord _) :: Int  =  LT
id _ :: Int `compare` negate x :: Int  =  LT
id _ :: Int `compare` negate 0 :: Int  =  LT
id _ :: Int `compare` negate (id _) :: Int  =  LT
id _ :: Int `compare` abs x :: Int  =  LT
id _ :: Int `compare` abs 0 :: Int  =  LT
id _ :: Int `compare` abs (id _) :: Int  =  LT
id _ :: Int `compare` _ + x :: Int  =  LT
id _ :: Int `compare` _ + 0 :: Int  =  LT
id _ :: Int `compare` _ + id _ :: Int  =  LT
id _ :: Int `compare` x + _ :: Int  =  LT
id _ :: Int `compare` 0 + _ :: Int  =  LT
id _ :: Int `compare` id _ + _ :: Int  =  LT
id _ :: Int `compare` _ * _ :: Int  =  LT
id _ :: Int `compare` f _ :: Int  =  GT
id _ :: Int `compare` head xs :: Int  =  LT
id _ :: Int `compare` head [] :: Int  =  LT
id _ :: Int `compare` head (_:_) :: Int  =  LT
id _ :: Int `compare` ord c :: Int  =  GT
id _ :: Int `compare` ord 'a' :: Int  =  LT
id _ :: Int `compare` q :: Bool  =  GT
id _ :: Int `compare` not p :: Bool  =  GT
id _ :: Int `compare` not False :: Bool  =  LT
id _ :: Int `compare` not True :: Bool  =  LT
id _ :: Int `compare` not (not _) :: Bool  =  LT
id _ :: Int `compare` _ || _ :: Bool  =  LT
id _ :: Int `compare` d :: Char  =  GT
id _ :: Int `compare` ' ' :: Char  =  GT
id _ :: Int `compare` ys :: [Int]  =  GT
id _ :: Int `compare` [0] :: [Int]  =  GT
id _ :: Int `compare` _:xs :: [Int]  =  LT
id _ :: Int `compare` [_] :: [Int]  =  LT
id _ :: Int `compare` _:_:_ :: [Int]  =  LT
id _ :: Int `compare` x:_ :: [Int]  =  LT
id _ :: Int `compare` 0:_ :: [Int]  =  LT
id _ :: Int `compare` id _:_ :: [Int]  =  LT
id _ :: Int `compare` tail _ :: [Int]  =  LT
id _ :: Int `compare` _ ++ _ :: [Int]  =  LT
id _ :: Int `compare` negate :: Int -> Int  =  GT
id _ :: Int `compare` abs :: Int -> Int  =  GT
id _ :: Int `compare` (_ +) :: Int -> Int  =  LT
id _ :: Int `compare` (*) :: Int -> Int -> Int  =  GT
id _ :: Int `compare` not :: Bool -> Bool  =  GT
id _ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
_ :: Bool `compare` z :: Int  =  LT
_ :: Bool `compare` -1 :: Int  =  LT
_ :: Bool `compare` id y :: Int  =  LT
_ :: Bool `compare` id 1 :: Int  =  LT
_ :: Bool `compare` id (id x) :: Int  =  LT
_ :: Bool `compare` id (id 0) :: Int  =  LT
_ :: Bool `compare` id (id (id _)) :: Int  =  LT
_ :: Bool `compare` id (negate _) :: Int  =  LT
_ :: Bool `compare` id (abs _) :: Int  =  LT
_ :: Bool `compare` id (_ + _) :: Int  =  LT
_ :: Bool `compare` id (head _) :: Int  =  LT
_ :: Bool `compare` id (ord _) :: Int  =  LT
_ :: Bool `compare` negate x :: Int  =  LT
_ :: Bool `compare` negate 0 :: Int  =  LT
_ :: Bool `compare` negate (id _) :: Int  =  LT
_ :: Bool `compare` abs x :: Int  =  LT
_ :: Bool `compare` abs 0 :: Int  =  LT
_ :: Bool `compare` abs (id _) :: Int  =  LT
_ :: Bool `compare` _ + x :: Int  =  LT
_ :: Bool `compare` _ + 0 :: Int  =  LT
_ :: Bool `compare` _ + id _ :: Int  =  LT
_ :: Bool `compare` x + _ :: Int  =  LT
_ :: Bool `compare` 0 + _ :: Int  =  LT
_ :: Bool `compare` id _ + _ :: Int  =  LT
_ :: Bool `compare` _ * _ :: Int  =  LT
_ :: Bool `compare` f _ :: Int  =  LT
_ :: Bool `compare` head xs :: Int  =  LT
_ :: Bool `compare` head [] :: Int  =  LT
_ :: Bool `compare` head (_:_) :: Int  =  LT
_ :: Bool `compare` ord c :: Int  =  LT
_ :: Bool `compare` ord 'a' :: Int  =  LT
_ :: Bool `compare` q :: Bool  =  LT
_ :: Bool `compare` not p :: Bool  =  LT
_ :: Bool `compare` not False :: Bool  =  LT
_ :: Bool `compare` not True :: Bool  =  LT
_ :: Bool `compare` not (not _) :: Bool  =  LT
_ :: Bool `compare` _ || _ :: Bool  =  LT
_ :: Bool `compare` d :: Char  =  LT
_ :: Bool `compare` ' ' :: Char  =  LT
_ :: Bool `compare` ys :: [Int]  =  LT
_ :: Bool `compare` [0] :: [Int]  =  LT
_ :: Bool `compare` _:xs :: [Int]  =  LT
_ :: Bool `compare` [_] :: [Int]  =  LT
_ :: Bool `compare` _:_:_ :: [Int]  =  LT
_ :: Bool `compare` x:_ :: [Int]  =  LT
_ :: Bool `compare` 0:_ :: [Int]  =  LT
_ :: Bool `compare` id _:_ :: [Int]  =  LT
_ :: Bool `compare` tail _ :: [Int]  =  LT
_ :: Bool `compare` _ ++ _ :: [Int]  =  LT
_ :: Bool `compare` negate :: Int -> Int  =  LT
_ :: Bool `compare` abs :: Int -> Int  =  LT
_ :: Bool `compare` (_ +) :: Int -> Int  =  LT
_ :: Bool `compare` (*) :: Int -> Int -> Int  =  LT
_ :: Bool `compare` not :: Bool -> Bool  =  LT
_ :: Bool `compare` (||) :: Bool -> Bool -> Bool  =  LT
_ :: Char `compare` z :: Int  =  LT
_ :: Char `compare` -1 :: Int  =  LT
_ :: Char `compare` id y :: Int  =  LT
_ :: Char `compare` id 1 :: Int  =  LT
_ :: Char `compare` id (id x) :: Int  =  LT
_ :: Char `compare` id (id 0) :: Int  =  LT
_ :: Char `compare` id (id (id _)) :: Int  =  LT
_ :: Char `compare` id (negate _) :: Int  =  LT
_ :: Char `compare` id (abs _) :: Int  =  LT
_ :: Char `compare` id (_ + _) :: Int  =  LT
_ :: Char `compare` id (head _) :: Int  =  LT
_ :: Char `compare` id (ord _) :: Int  =  LT
_ :: Char `compare` negate x :: Int  =  LT
_ :: Char `compare` negate 0 :: Int  =  LT
_ :: Char `compare` negate (id _) :: Int  =  LT
_ :: Char `compare` abs x :: Int  =  LT
_ :: Char `compare` abs 0 :: Int  =  LT
_ :: Char `compare` abs (id _) :: Int  =  LT
_ :: Char `compare` _ + x :: Int  =  LT
_ :: Char `compare` _ + 0 :: Int  =  LT
_ :: Char `compare` _ + id _ :: Int  =  LT
_ :: Char `compare` x + _ :: Int  =  LT
_ :: Char `compare` 0 + _ :: Int  =  LT
_ :: Char `compare` id _ + _ :: Int  =  LT
_ :: Char `compare` _ * _ :: Int  =  LT
_ :: Char `compare` f _ :: Int  =  LT
_ :: Char `compare` head xs :: Int  =  LT
_ :: Char `compare` head [] :: Int  =  LT
_ :: Char `compare` head (_:_) :: Int  =  LT
_ :: Char `compare` ord c :: Int  =  LT
_ :: Char `compare` ord 'a' :: Int  =  LT
_ :: Char `compare` q :: Bool  =  GT
_ :: Char `compare` not p :: Bool  =  LT
_ :: Char `compare` not False :: Bool  =  LT
_ :: Char `compare` not True :: Bool  =  LT
_ :: Char `compare` not (not _) :: Bool  =  LT
_ :: Char `compare` _ || _ :: Bool  =  LT
_ :: Char `compare` d :: Char  =  LT
_ :: Char `compare` ' ' :: Char  =  LT
_ :: Char `compare` ys :: [Int]  =  LT
_ :: Char `compare` [0] :: [Int]  =  LT
_ :: Char `compare` _:xs :: [Int]  =  LT
_ :: Char `compare` [_] :: [Int]  =  LT
_ :: Char `compare` _:_:_ :: [Int]  =  LT
_ :: Char `compare` x:_ :: [Int]  =  LT
_ :: Char `compare` 0:_ :: [Int]  =  LT
_ :: Char `compare` id _:_ :: [Int]  =  LT
_ :: Char `compare` tail _ :: [Int]  =  LT
_ :: Char `compare` _ ++ _ :: [Int]  =  LT
_ :: Char `compare` negate :: Int -> Int  =  LT
_ :: Char `compare` abs :: Int -> Int  =  LT
_ :: Char `compare` (_ +) :: Int -> Int  =  LT
_ :: Char `compare` (*) :: Int -> Int -> Int  =  LT
_ :: Char `compare` not :: Bool -> Bool  =  LT
_ :: Char `compare` (||) :: Bool -> Bool -> Bool  =  LT
_ :: [Int] `compare` z :: Int  =  GT
_ :: [Int] `compare` -1 :: Int  =  LT
_ :: [Int] `compare` id y :: Int  =  LT
_ :: [Int] `compare` id 1 :: Int  =  LT
_ :: [Int] `compare` id (id x) :: Int  =  LT
_ :: [Int] `compare` id (id 0) :: Int  =  LT
_ :: [Int] `compare` id (id (id _)) :: Int  =  LT
_ :: [Int] `compare` id (negate _) :: Int  =  LT
_ :: [Int] `compare` id (abs _) :: Int  =  LT
_ :: [Int] `compare` id (_ + _) :: Int  =  LT
_ :: [Int] `compare` id (head _) :: Int  =  LT
_ :: [Int] `compare` id (ord _) :: Int  =  LT
_ :: [Int] `compare` negate x :: Int  =  LT
_ :: [Int] `compare` negate 0 :: Int  =  LT
_ :: [Int] `compare` negate (id _) :: Int  =  LT
_ :: [Int] `compare` abs x :: Int  =  LT
_ :: [Int] `compare` abs 0 :: Int  =  LT
_ :: [Int] `compare` abs (id _) :: Int  =  LT
_ :: [Int] `compare` _ + x :: Int  =  LT
_ :: [Int] `compare` _ + 0 :: Int  =  LT
_ :: [Int] `compare` _ + id _ :: Int  =  LT
_ :: [Int] `compare` x + _ :: Int  =  LT
_ :: [Int] `compare` 0 + _ :: Int  =  LT
_ :: [Int] `compare` id _ + _ :: Int  =  LT
_ :: [Int] `compare` _ * _ :: Int  =  LT
_ :: [Int] `compare` f _ :: Int  =  LT
_ :: [Int] `compare` head xs :: Int  =  LT
_ :: [Int] `compare` head [] :: Int  =  LT
_ :: [Int] `compare` head (_:_) :: Int  =  LT
_ :: [Int] `compare` ord c :: Int  =  LT
_ :: [Int] `compare` ord 'a' :: Int  =  LT
_ :: [Int] `compare` q :: Bool  =  GT
_ :: [Int] `compare` not p :: Bool  =  LT
_ :: [Int] `compare` not False :: Bool  =  LT
_ :: [Int] `compare` not True :: Bool  =  LT
_ :: [Int] `compare` not (not _) :: Bool  =  LT
_ :: [Int] `compare` _ || _ :: Bool  =  LT
_ :: [Int] `compare` d :: Char  =  GT
_ :: [Int] `compare` ' ' :: Char  =  LT
_ :: [Int] `compare` ys :: [Int]  =  LT
_ :: [Int] `compare` [0] :: [Int]  =  LT
_ :: [Int] `compare` _:xs :: [Int]  =  LT
_ :: [Int] `compare` [_] :: [Int]  =  LT
_ :: [Int] `compare` _:_:_ :: [Int]  =  LT
_ :: [Int] `compare` x:_ :: [Int]  =  LT
_ :: [Int] `compare` 0:_ :: [Int]  =  LT
_ :: [Int] `compare` id _:_ :: [Int]  =  LT
_ :: [Int] `compare` tail _ :: [Int]  =  LT
_ :: [Int] `compare` _ ++ _ :: [Int]  =  LT
_ :: [Int] `compare` negate :: Int -> Int  =  LT
_ :: [Int] `compare` abs :: Int -> Int  =  LT
_ :: [Int] `compare` (_ +) :: Int -> Int  =  LT
_ :: [Int] `compare` (*) :: Int -> Int -> Int  =  LT
_ :: [Int] `compare` not :: Bool -> Bool  =  LT
_ :: [Int] `compare` (||) :: Bool -> Bool -> Bool  =  LT
y :: Int `compare` y :: Int  =  EQ
y :: Int `compare` 1 :: Int  =  LT
y :: Int `compare` id x :: Int  =  LT
y :: Int `compare` id 0 :: Int  =  LT
y :: Int `compare` id (id _) :: Int  =  LT
y :: Int `compare` negate _ :: Int  =  LT
y :: Int `compare` abs _ :: Int  =  LT
y :: Int `compare` _ + _ :: Int  =  LT
y :: Int `compare` head _ :: Int  =  LT
y :: Int `compare` ord _ :: Int  =  LT
y :: Int `compare` p :: Bool  =  GT
y :: Int `compare` False :: Bool  =  LT
y :: Int `compare` True :: Bool  =  LT
y :: Int `compare` not _ :: Bool  =  LT
y :: Int `compare` c :: Char  =  GT
y :: Int `compare` 'a' :: Char  =  LT
y :: Int `compare` xs :: [Int]  =  LT
y :: Int `compare` [] :: [Int]  =  LT
y :: Int `compare` _:_ :: [Int]  =  LT
y :: Int `compare` id :: Int -> Int  =  LT
y :: Int `compare` (+) :: Int -> Int -> Int  =  LT
1 :: Int `compare` y :: Int  =  GT
1 :: Int `compare` 1 :: Int  =  EQ
1 :: Int `compare` id x :: Int  =  LT
1 :: Int `compare` id 0 :: Int  =  LT
1 :: Int `compare` id (id _) :: Int  =  LT
1 :: Int `compare` negate _ :: Int  =  LT
1 :: Int `compare` abs _ :: Int  =  LT
1 :: Int `compare` _ + _ :: Int  =  LT
1 :: Int `compare` head _ :: Int  =  LT
1 :: Int `compare` ord _ :: Int  =  LT
1 :: Int `compare` p :: Bool  =  GT
1 :: Int `compare` False :: Bool  =  GT
1 :: Int `compare` True :: Bool  =  GT
1 :: Int `compare` not _ :: Bool  =  LT
1 :: Int `compare` c :: Char  =  GT
1 :: Int `compare` 'a' :: Char  =  GT
1 :: Int `compare` xs :: [Int]  =  GT
1 :: Int `compare` [] :: [Int]  =  LT
1 :: Int `compare` _:_ :: [Int]  =  LT
1 :: Int `compare` id :: Int -> Int  =  LT
1 :: Int `compare` (+) :: Int -> Int -> Int  =  LT
id x :: Int `compare` y :: Int  =  GT
id x :: Int `compare` 1 :: Int  =  GT
id x :: Int `compare` id x :: Int  =  EQ
id x :: Int `compare` id 0 :: Int  =  LT
id x :: Int `compare` id (id _) :: Int  =  LT
id x :: Int `compare` negate _ :: Int  =  LT
id x :: Int `compare` abs _ :: Int  =  LT
id x :: Int `compare` _ + _ :: Int  =  LT
id x :: Int `compare` head _ :: Int  =  LT
id x :: Int `compare` ord _ :: Int  =  GT
id x :: Int `compare` p :: Bool  =  GT
id x :: Int `compare` False :: Bool  =  GT
id x :: Int `compare` True :: Bool  =  GT
id x :: Int `compare` not _ :: Bool  =  GT
id x :: Int `compare` c :: Char  =  GT
id x :: Int `compare` 'a' :: Char  =  GT
id x :: Int `compare` xs :: [Int]  =  GT
id x :: Int `compare` [] :: [Int]  =  GT
id x :: Int `compare` _:_ :: [Int]  =  LT
id x :: Int `compare` id :: Int -> Int  =  GT
id x :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id 0 :: Int `compare` y :: Int  =  GT
id 0 :: Int `compare` 1 :: Int  =  GT
id 0 :: Int `compare` id x :: Int  =  GT
id 0 :: Int `compare` id 0 :: Int  =  EQ
id 0 :: Int `compare` id (id _) :: Int  =  LT
id 0 :: Int `compare` negate _ :: Int  =  GT
id 0 :: Int `compare` abs _ :: Int  =  GT
id 0 :: Int `compare` _ + _ :: Int  =  LT
id 0 :: Int `compare` head _ :: Int  =  GT
id 0 :: Int `compare` ord _ :: Int  =  GT
id 0 :: Int `compare` p :: Bool  =  GT
id 0 :: Int `compare` False :: Bool  =  GT
id 0 :: Int `compare` True :: Bool  =  GT
id 0 :: Int `compare` not _ :: Bool  =  GT
id 0 :: Int `compare` c :: Char  =  GT
id 0 :: Int `compare` 'a' :: Char  =  GT
id 0 :: Int `compare` xs :: [Int]  =  GT
id 0 :: Int `compare` [] :: [Int]  =  GT
id 0 :: Int `compare` _:_ :: [Int]  =  LT
id 0 :: Int `compare` id :: Int -> Int  =  GT
id 0 :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (id _) :: Int `compare` y :: Int  =  GT
id (id _) :: Int `compare` 1 :: Int  =  GT
id (id _) :: Int `compare` id x :: Int  =  GT
id (id _) :: Int `compare` id 0 :: Int  =  GT
id (id _) :: Int `compare` id (id _) :: Int  =  EQ
id (id _) :: Int `compare` negate _ :: Int  =  GT
id (id _) :: Int `compare` abs _ :: Int  =  GT
id (id _) :: Int `compare` _ + _ :: Int  =  GT
id (id _) :: Int `compare` head _ :: Int  =  GT
id (id _) :: Int `compare` ord _ :: Int  =  GT
id (id _) :: Int `compare` p :: Bool  =  GT
id (id _) :: Int `compare` False :: Bool  =  GT
id (id _) :: Int `compare` True :: Bool  =  GT
id (id _) :: Int `compare` not _ :: Bool  =  GT
id (id _) :: Int `compare` c :: Char  =  GT
id (id _) :: Int `compare` 'a' :: Char  =  GT
id (id _) :: Int `compare` xs :: [Int]  =  GT
id (id _) :: Int `compare` [] :: [Int]  =  GT
id (id _) :: Int `compare` _:_ :: [Int]  =  GT
id (id _) :: Int `compare` id :: Int -> Int  =  GT
id (id _) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
negate _ :: Int `compare` y :: Int  =  GT
negate _ :: Int `compare` 1 :: Int  =  GT
negate _ :: Int `compare` id x :: Int  =  GT
negate _ :: Int `compare` id 0 :: Int  =  LT
negate _ :: Int `compare` id (id _) :: Int  =  LT
negate _ :: Int `compare` negate _ :: Int  =  EQ
negate _ :: Int `compare` abs _ :: Int  =  GT
negate _ :: Int `compare` _ + _ :: Int  =  LT
negate _ :: Int `compare` head _ :: Int  =  LT
negate _ :: Int `compare` ord _ :: Int  =  GT
negate _ :: Int `compare` p :: Bool  =  GT
negate _ :: Int `compare` False :: Bool  =  GT
negate _ :: Int `compare` True :: Bool  =  GT
negate _ :: Int `compare` not _ :: Bool  =  GT
negate _ :: Int `compare` c :: Char  =  GT
negate _ :: Int `compare` 'a' :: Char  =  GT
negate _ :: Int `compare` xs :: [Int]  =  GT
negate _ :: Int `compare` [] :: [Int]  =  GT
negate _ :: Int `compare` _:_ :: [Int]  =  LT
negate _ :: Int `compare` id :: Int -> Int  =  GT
negate _ :: Int `compare` (+) :: Int -> Int -> Int  =  GT
abs _ :: Int `compare` y :: Int  =  GT
abs _ :: Int `compare` 1 :: Int  =  GT
abs _ :: Int `compare` id x :: Int  =  GT
abs _ :: Int `compare` id 0 :: Int  =  LT
abs _ :: Int `compare` id (id _) :: Int  =  LT
abs _ :: Int `compare` negate _ :: Int  =  LT
abs _ :: Int `compare` abs _ :: Int  =  EQ
abs _ :: Int `compare` _ + _ :: Int  =  LT
abs _ :: Int `compare` head _ :: Int  =  LT
abs _ :: Int `compare` ord _ :: Int  =  GT
abs _ :: Int `compare` p :: Bool  =  GT
abs _ :: Int `compare` False :: Bool  =  GT
abs _ :: Int `compare` True :: Bool  =  GT
abs _ :: Int `compare` not _ :: Bool  =  GT
abs _ :: Int `compare` c :: Char  =  GT
abs _ :: Int `compare` 'a' :: Char  =  GT
abs _ :: Int `compare` xs :: [Int]  =  GT
abs _ :: Int `compare` [] :: [Int]  =  GT
abs _ :: Int `compare` _:_ :: [Int]  =  LT
abs _ :: Int `compare` id :: Int -> Int  =  GT
abs _ :: Int `compare` (+) :: Int -> Int -> Int  =  GT
_ + _ :: Int `compare` y :: Int  =  GT
_ + _ :: Int `compare` 1 :: Int  =  GT
_ + _ :: Int `compare` id x :: Int  =  GT
_ + _ :: Int `compare` id 0 :: Int  =  GT
_ + _ :: Int `compare` id (id _) :: Int  =  LT
_ + _ :: Int `compare` negate _ :: Int  =  GT
_ + _ :: Int `compare` abs _ :: Int  =  GT
_ + _ :: Int `compare` _ + _ :: Int  =  EQ
_ + _ :: Int `compare` head _ :: Int  =  GT
_ + _ :: Int `compare` ord _ :: Int  =  GT
_ + _ :: Int `compare` p :: Bool  =  GT
_ + _ :: Int `compare` False :: Bool  =  GT
_ + _ :: Int `compare` True :: Bool  =  GT
_ + _ :: Int `compare` not _ :: Bool  =  GT
_ + _ :: Int `compare` c :: Char  =  GT
_ + _ :: Int `compare` 'a' :: Char  =  GT
_ + _ :: Int `compare` xs :: [Int]  =  GT
_ + _ :: Int `compare` [] :: [Int]  =  GT
_ + _ :: Int `compare` _:_ :: [Int]  =  GT
_ + _ :: Int `compare` id :: Int -> Int  =  GT
_ + _ :: Int `compare` (+) :: Int -> Int -> Int  =  GT
head _ :: Int `compare` y :: Int  =  GT
head _ :: Int `compare` 1 :: Int  =  GT
head _ :: Int `compare` id x :: Int  =  GT
head _ :: Int `compare` id 0 :: Int  =  LT
head _ :: Int `compare` id (id _) :: Int  =  LT
head _ :: Int `compare` negate _ :: Int  =  GT
head _ :: Int `compare` abs _ :: Int  =  GT
head _ :: Int `compare` _ + _ :: Int  =  LT
head _ :: Int `compare` head _ :: Int  =  EQ
head _ :: Int `compare` ord _ :: Int  =  GT
head _ :: Int `compare` p :: Bool  =  GT
head _ :: Int `compare` False :: Bool  =  GT
head _ :: Int `compare` True :: Bool  =  GT
head _ :: Int `compare` not _ :: Bool  =  GT
head _ :: Int `compare` c :: Char  =  GT
head _ :: Int `compare` 'a' :: Char  =  GT
head _ :: Int `compare` xs :: [Int]  =  GT
head _ :: Int `compare` [] :: [Int]  =  GT
head _ :: Int `compare` _:_ :: [Int]  =  LT
head _ :: Int `compare` id :: Int -> Int  =  GT
head _ :: Int `compare` (+) :: Int -> Int -> Int  =  GT
ord _ :: Int `compare` y :: Int  =  GT
ord _ :: Int `compare` 1 :: Int  =  GT
ord _ :: Int `compare` id x :: Int  =  LT
ord _ :: Int `compare` id 0 :: Int  =  LT
ord _ :: Int `compare` id (id _) :: Int  =  LT
ord _ :: Int `compare` negate _ :: Int  =  LT
ord _ :: Int `compare` abs _ :: Int  =  LT
ord _ :: Int `compare` _ + _ :: Int  =  LT
ord _ :: Int `compare` head _ :: Int  =  LT
ord _ :: Int `compare` ord _ :: Int  =  EQ
ord _ :: Int `compare` p :: Bool  =  GT
ord _ :: Int `compare` False :: Bool  =  GT
ord _ :: Int `compare` True :: Bool  =  GT
ord _ :: Int `compare` not _ :: Bool  =  GT
ord _ :: Int `compare` c :: Char  =  GT
ord _ :: Int `compare` 'a' :: Char  =  GT
ord _ :: Int `compare` xs :: [Int]  =  GT
ord _ :: Int `compare` [] :: [Int]  =  GT
ord _ :: Int `compare` _:_ :: [Int]  =  LT
ord _ :: Int `compare` id :: Int -> Int  =  GT
ord _ :: Int `compare` (+) :: Int -> Int -> Int  =  GT
p :: Bool `compare` y :: Int  =  LT
p :: Bool `compare` 1 :: Int  =  LT
p :: Bool `compare` id x :: Int  =  LT
p :: Bool `compare` id 0 :: Int  =  LT
p :: Bool `compare` id (id _) :: Int  =  LT
p :: Bool `compare` negate _ :: Int  =  LT
p :: Bool `compare` abs _ :: Int  =  LT
p :: Bool `compare` _ + _ :: Int  =  LT
p :: Bool `compare` head _ :: Int  =  LT
p :: Bool `compare` ord _ :: Int  =  LT
p :: Bool `compare` p :: Bool  =  EQ
p :: Bool `compare` False :: Bool  =  LT
p :: Bool `compare` True :: Bool  =  LT
p :: Bool `compare` not _ :: Bool  =  LT
p :: Bool `compare` c :: Char  =  LT
p :: Bool `compare` 'a' :: Char  =  LT
p :: Bool `compare` xs :: [Int]  =  LT
p :: Bool `compare` [] :: [Int]  =  LT
p :: Bool `compare` _:_ :: [Int]  =  LT
p :: Bool `compare` id :: Int -> Int  =  LT
p :: Bool `compare` (+) :: Int -> Int -> Int  =  LT
False :: Bool `compare` y :: Int  =  GT
False :: Bool `compare` 1 :: Int  =  LT
False :: Bool `compare` id x :: Int  =  LT
False :: Bool `compare` id 0 :: Int  =  LT
False :: Bool `compare` id (id _) :: Int  =  LT
False :: Bool `compare` negate _ :: Int  =  LT
False :: Bool `compare` abs _ :: Int  =  LT
False :: Bool `compare` _ + _ :: Int  =  LT
False :: Bool `compare` head _ :: Int  =  LT
False :: Bool `compare` ord _ :: Int  =  LT
False :: Bool `compare` p :: Bool  =  GT
False :: Bool `compare` False :: Bool  =  EQ
False :: Bool `compare` True :: Bool  =  LT
False :: Bool `compare` not _ :: Bool  =  LT
False :: Bool `compare` c :: Char  =  GT
False :: Bool `compare` 'a' :: Char  =  LT
False :: Bool `compare` xs :: [Int]  =  GT
False :: Bool `compare` [] :: [Int]  =  LT
False :: Bool `compare` _:_ :: [Int]  =  LT
False :: Bool `compare` id :: Int -> Int  =  LT
False :: Bool `compare` (+) :: Int -> Int -> Int  =  LT
True :: Bool `compare` y :: Int  =  GT
True :: Bool `compare` 1 :: Int  =  LT
True :: Bool `compare` id x :: Int  =  LT
True :: Bool `compare` id 0 :: Int  =  LT
True :: Bool `compare` id (id _) :: Int  =  LT
True :: Bool `compare` negate _ :: Int  =  LT
True :: Bool `compare` abs _ :: Int  =  LT
True :: Bool `compare` _ + _ :: Int  =  LT
True :: Bool `compare` head _ :: Int  =  LT
True :: Bool `compare` ord _ :: Int  =  LT
True :: Bool `compare` p :: Bool  =  GT
True :: Bool `compare` False :: Bool  =  GT
True :: Bool `compare` True :: Bool  =  EQ
True :: Bool `compare` not _ :: Bool  =  LT
True :: Bool `compare` c :: Char  =  GT
True :: Bool `compare` 'a' :: Char  =  LT
True :: Bool `compare` xs :: [Int]  =  GT
True :: Bool `compare` [] :: [Int]  =  LT
True :: Bool `compare` _:_ :: [Int]  =  LT
True :: Bool `compare` id :: Int -> Int  =  LT
True :: Bool `compare` (+) :: Int -> Int -> Int  =  LT
not _ :: Bool `compare` y :: Int  =  GT
not _ :: Bool `compare` 1 :: Int  =  GT
not _ :: Bool `compare` id x :: Int  =  LT
not _ :: Bool `compare` id 0 :: Int  =  LT
not _ :: Bool `compare` id (id _) :: Int  =  LT
not _ :: Bool `compare` negate _ :: Int  =  LT
not _ :: Bool `compare` abs _ :: Int  =  LT
not _ :: Bool `compare` _ + _ :: Int  =  LT
not _ :: Bool `compare` head _ :: Int  =  LT
not _ :: Bool `compare` ord _ :: Int  =  LT
not _ :: Bool `compare` p :: Bool  =  GT
not _ :: Bool `compare` False :: Bool  =  GT
not _ :: Bool `compare` True :: Bool  =  GT
not _ :: Bool `compare` not _ :: Bool  =  EQ
not _ :: Bool `compare` c :: Char  =  GT
not _ :: Bool `compare` 'a' :: Char  =  GT
not _ :: Bool `compare` xs :: [Int]  =  GT
not _ :: Bool `compare` [] :: [Int]  =  GT
not _ :: Bool `compare` _:_ :: [Int]  =  LT
not _ :: Bool `compare` id :: Int -> Int  =  GT
not _ :: Bool `compare` (+) :: Int -> Int -> Int  =  GT
c :: Char `compare` y :: Int  =  LT
c :: Char `compare` 1 :: Int  =  LT
c :: Char `compare` id x :: Int  =  LT
c :: Char `compare` id 0 :: Int  =  LT
c :: Char `compare` id (id _) :: Int  =  LT
c :: Char `compare` negate _ :: Int  =  LT
c :: Char `compare` abs _ :: Int  =  LT
c :: Char `compare` _ + _ :: Int  =  LT
c :: Char `compare` head _ :: Int  =  LT
c :: Char `compare` ord _ :: Int  =  LT
c :: Char `compare` p :: Bool  =  GT
c :: Char `compare` False :: Bool  =  LT
c :: Char `compare` True :: Bool  =  LT
c :: Char `compare` not _ :: Bool  =  LT
c :: Char `compare` c :: Char  =  EQ
c :: Char `compare` 'a' :: Char  =  LT
c :: Char `compare` xs :: [Int]  =  LT
c :: Char `compare` [] :: [Int]  =  LT
c :: Char `compare` _:_ :: [Int]  =  LT
c :: Char `compare` id :: Int -> Int  =  LT
c :: Char `compare` (+) :: Int -> Int -> Int  =  LT
'a' :: Char `compare` y :: Int  =  GT
'a' :: Char `compare` 1 :: Int  =  LT
'a' :: Char `compare` id x :: Int  =  LT
'a' :: Char `compare` id 0 :: Int  =  LT
'a' :: Char `compare` id (id _) :: Int  =  LT
'a' :: Char `compare` negate _ :: Int  =  LT
'a' :: Char `compare` abs _ :: Int  =  LT
'a' :: Char `compare` _ + _ :: Int  =  LT
'a' :: Char `compare` head _ :: Int  =  LT
'a' :: Char `compare` ord _ :: Int  =  LT
'a' :: Char `compare` p :: Bool  =  GT
'a' :: Char `compare` False :: Bool  =  GT
'a' :: Char `compare` True :: Bool  =  GT
'a' :: Char `compare` not _ :: Bool  =  LT
'a' :: Char `compare` c :: Char  =  GT
'a' :: Char `compare` 'a' :: Char  =  EQ
'a' :: Char `compare` xs :: [Int]  =  GT
'a' :: Char `compare` [] :: [Int]  =  LT
'a' :: Char `compare` _:_ :: [Int]  =  LT
'a' :: Char `compare` id :: Int -> Int  =  LT
'a' :: Char `compare` (+) :: Int -> Int -> Int  =  LT
xs :: [Int] `compare` y :: Int  =  GT
xs :: [Int] `compare` 1 :: Int  =  LT
xs :: [Int] `compare` id x :: Int  =  LT
xs :: [Int] `compare` id 0 :: Int  =  LT
xs :: [Int] `compare` id (id _) :: Int  =  LT
xs :: [Int] `compare` negate _ :: Int  =  LT
xs :: [Int] `compare` abs _ :: Int  =  LT
xs :: [Int] `compare` _ + _ :: Int  =  LT
xs :: [Int] `compare` head _ :: Int  =  LT
xs :: [Int] `compare` ord _ :: Int  =  LT
xs :: [Int] `compare` p :: Bool  =  GT
xs :: [Int] `compare` False :: Bool  =  LT
xs :: [Int] `compare` True :: Bool  =  LT
xs :: [Int] `compare` not _ :: Bool  =  LT
xs :: [Int] `compare` c :: Char  =  GT
xs :: [Int] `compare` 'a' :: Char  =  LT
xs :: [Int] `compare` xs :: [Int]  =  EQ
xs :: [Int] `compare` [] :: [Int]  =  LT
xs :: [Int] `compare` _:_ :: [Int]  =  LT
xs :: [Int] `compare` id :: Int -> Int  =  LT
xs :: [Int] `compare` (+) :: Int -> Int -> Int  =  LT
[] :: [Int] `compare` y :: Int  =  GT
[] :: [Int] `compare` 1 :: Int  =  GT
[] :: [Int] `compare` id x :: Int  =  LT
[] :: [Int] `compare` id 0 :: Int  =  LT
[] :: [Int] `compare` id (id _) :: Int  =  LT
[] :: [Int] `compare` negate _ :: Int  =  LT
[] :: [Int] `compare` abs _ :: Int  =  LT
[] :: [Int] `compare` _ + _ :: Int  =  LT
[] :: [Int] `compare` head _ :: Int  =  LT
[] :: [Int] `compare` ord _ :: Int  =  LT
[] :: [Int] `compare` p :: Bool  =  GT
[] :: [Int] `compare` False :: Bool  =  GT
[] :: [Int] `compare` True :: Bool  =  GT
[] :: [Int] `compare` not _ :: Bool  =  LT
[] :: [Int] `compare` c :: Char  =  GT
[] :: [Int] `compare` 'a' :: Char  =  GT
[] :: [Int] `compare` xs :: [Int]  =  GT
[] :: [Int] `compare` [] :: [Int]  =  EQ
[] :: [Int] `compare` _:_ :: [Int]  =  LT
[] :: [Int] `compare` id :: Int -> Int  =  LT
[] :: [Int] `compare` (+) :: Int -> Int -> Int  =  LT
_:_ :: [Int] `compare` y :: Int  =  GT
_:_ :: [Int] `compare` 1 :: Int  =  GT
_:_ :: [Int] `compare` id x :: Int  =  GT
_:_ :: [Int] `compare` id 0 :: Int  =  GT
_:_ :: [Int] `compare` id (id _) :: Int  =  LT
_:_ :: [Int] `compare` negate _ :: Int  =  GT
_:_ :: [Int] `compare` abs _ :: Int  =  GT
_:_ :: [Int] `compare` _ + _ :: Int  =  LT
_:_ :: [Int] `compare` head _ :: Int  =  GT
_:_ :: [Int] `compare` ord _ :: Int  =  GT
_:_ :: [Int] `compare` p :: Bool  =  GT
_:_ :: [Int] `compare` False :: Bool  =  GT
_:_ :: [Int] `compare` True :: Bool  =  GT
_:_ :: [Int] `compare` not _ :: Bool  =  GT
_:_ :: [Int] `compare` c :: Char  =  GT
_:_ :: [Int] `compare` 'a' :: Char  =  GT
_:_ :: [Int] `compare` xs :: [Int]  =  GT
_:_ :: [Int] `compare` [] :: [Int]  =  GT
_:_ :: [Int] `compare` _:_ :: [Int]  =  EQ
_:_ :: [Int] `compare` id :: Int -> Int  =  GT
_:_ :: [Int] `compare` (+) :: Int -> Int -> Int  =  GT
id :: Int -> Int `compare` y :: Int  =  GT
id :: Int -> Int `compare` 1 :: Int  =  GT
id :: Int -> Int `compare` id x :: Int  =  LT
id :: Int -> Int `compare` id 0 :: Int  =  LT
id :: Int -> Int `compare` id (id _) :: Int  =  LT
id :: Int -> Int `compare` negate _ :: Int  =  LT
id :: Int -> Int `compare` abs _ :: Int  =  LT
id :: Int -> Int `compare` _ + _ :: Int  =  LT
id :: Int -> Int `compare` head _ :: Int  =  LT
id :: Int -> Int `compare` ord _ :: Int  =  LT
id :: Int -> Int `compare` p :: Bool  =  GT
id :: Int -> Int `compare` False :: Bool  =  GT
id :: Int -> Int `compare` True :: Bool  =  GT
id :: Int -> Int `compare` not _ :: Bool  =  LT
id :: Int -> Int `compare` c :: Char  =  GT
id :: Int -> Int `compare` 'a' :: Char  =  GT
id :: Int -> Int `compare` xs :: [Int]  =  GT
id :: Int -> Int `compare` [] :: [Int]  =  GT
id :: Int -> Int `compare` _:_ :: [Int]  =  LT
id :: Int -> Int `compare` id :: Int -> Int  =  EQ
id :: Int -> Int `compare` (+) :: Int -> Int -> Int  =  LT
(+) :: Int -> Int -> Int `compare` y :: Int  =  GT
(+) :: Int -> Int -> Int `compare` 1 :: Int  =  GT
(+) :: Int -> Int -> Int `compare` id x :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id 0 :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (id _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` negate _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` abs _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` _ + _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` head _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` ord _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` p :: Bool  =  GT
(+) :: Int -> Int -> Int `compare` False :: Bool  =  GT
(+) :: Int -> Int -> Int `compare` True :: Bool  =  GT
(+) :: Int -> Int -> Int `compare` not _ :: Bool  =  LT
(+) :: Int -> Int -> Int `compare` c :: Char  =  GT
(+) :: Int -> Int -> Int `compare` 'a' :: Char  =  GT
(+) :: Int -> Int -> Int `compare` xs :: [Int]  =  GT
(+) :: Int -> Int -> Int `compare` [] :: [Int]  =  GT
(+) :: Int -> Int -> Int `compare` _:_ :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` id :: Int -> Int  =  GT
(+) :: Int -> Int -> Int `compare` (+) :: Int -> Int -> Int  =  EQ
z :: Int `compare` x :: Int  =  GT
z :: Int `compare` 0 :: Int  =  LT
z :: Int `compare` id _ :: Int  =  LT
z :: Int `compare` _ :: Bool  =  GT
z :: Int `compare` _ :: Char  =  GT
z :: Int `compare` _ :: [Int]  =  LT
-1 :: Int `compare` x :: Int  =  GT
-1 :: Int `compare` 0 :: Int  =  GT
-1 :: Int `compare` id _ :: Int  =  LT
-1 :: Int `compare` _ :: Bool  =  GT
-1 :: Int `compare` _ :: Char  =  GT
-1 :: Int `compare` _ :: [Int]  =  GT
id y :: Int `compare` x :: Int  =  GT
id y :: Int `compare` 0 :: Int  =  GT
id y :: Int `compare` id _ :: Int  =  GT
id y :: Int `compare` _ :: Bool  =  GT
id y :: Int `compare` _ :: Char  =  GT
id y :: Int `compare` _ :: [Int]  =  GT
id 1 :: Int `compare` x :: Int  =  GT
id 1 :: Int `compare` 0 :: Int  =  GT
id 1 :: Int `compare` id _ :: Int  =  GT
id 1 :: Int `compare` _ :: Bool  =  GT
id 1 :: Int `compare` _ :: Char  =  GT
id 1 :: Int `compare` _ :: [Int]  =  GT
id (id x) :: Int `compare` x :: Int  =  GT
id (id x) :: Int `compare` 0 :: Int  =  GT
id (id x) :: Int `compare` id _ :: Int  =  GT
id (id x) :: Int `compare` _ :: Bool  =  GT
id (id x) :: Int `compare` _ :: Char  =  GT
id (id x) :: Int `compare` _ :: [Int]  =  GT
id (id 0) :: Int `compare` x :: Int  =  GT
id (id 0) :: Int `compare` 0 :: Int  =  GT
id (id 0) :: Int `compare` id _ :: Int  =  GT
id (id 0) :: Int `compare` _ :: Bool  =  GT
id (id 0) :: Int `compare` _ :: Char  =  GT
id (id 0) :: Int `compare` _ :: [Int]  =  GT
id (id (id _)) :: Int `compare` x :: Int  =  GT
id (id (id _)) :: Int `compare` 0 :: Int  =  GT
id (id (id _)) :: Int `compare` id _ :: Int  =  GT
id (id (id _)) :: Int `compare` _ :: Bool  =  GT
id (id (id _)) :: Int `compare` _ :: Char  =  GT
id (id (id _)) :: Int `compare` _ :: [Int]  =  GT
id (negate _) :: Int `compare` x :: Int  =  GT
id (negate _) :: Int `compare` 0 :: Int  =  GT
id (negate _) :: Int `compare` id _ :: Int  =  GT
id (negate _) :: Int `compare` _ :: Bool  =  GT
id (negate _) :: Int `compare` _ :: Char  =  GT
id (negate _) :: Int `compare` _ :: [Int]  =  GT
id (abs _) :: Int `compare` x :: Int  =  GT
id (abs _) :: Int `compare` 0 :: Int  =  GT
id (abs _) :: Int `compare` id _ :: Int  =  GT
id (abs _) :: Int `compare` _ :: Bool  =  GT
id (abs _) :: Int `compare` _ :: Char  =  GT
id (abs _) :: Int `compare` _ :: [Int]  =  GT
id (_ + _) :: Int `compare` x :: Int  =  GT
id (_ + _) :: Int `compare` 0 :: Int  =  GT
id (_ + _) :: Int `compare` id _ :: Int  =  GT
id (_ + _) :: Int `compare` _ :: Bool  =  GT
id (_ + _) :: Int `compare` _ :: Char  =  GT
id (_ + _) :: Int `compare` _ :: [Int]  =  GT
id (head _) :: Int `compare` x :: Int  =  GT
id (head _) :: Int `compare` 0 :: Int  =  GT
id (head _) :: Int `compare` id _ :: Int  =  GT
id (head _) :: Int `compare` _ :: Bool  =  GT
id (head _) :: Int `compare` _ :: Char  =  GT
id (head _) :: Int `compare` _ :: [Int]  =  GT
id (ord _) :: Int `compare` x :: Int  =  GT
id (ord _) :: Int `compare` 0 :: Int  =  GT
id (ord _) :: Int `compare` id _ :: Int  =  GT
id (ord _) :: Int `compare` _ :: Bool  =  GT
id (ord _) :: Int `compare` _ :: Char  =  GT
id (ord _) :: Int `compare` _ :: [Int]  =  GT
negate x :: Int `compare` x :: Int  =  GT
negate x :: Int `compare` 0 :: Int  =  GT
negate x :: Int `compare` id _ :: Int  =  GT
negate x :: Int `compare` _ :: Bool  =  GT
negate x :: Int `compare` _ :: Char  =  GT
negate x :: Int `compare` _ :: [Int]  =  GT
negate 0 :: Int `compare` x :: Int  =  GT
negate 0 :: Int `compare` 0 :: Int  =  GT
negate 0 :: Int `compare` id _ :: Int  =  GT
negate 0 :: Int `compare` _ :: Bool  =  GT
negate 0 :: Int `compare` _ :: Char  =  GT
negate 0 :: Int `compare` _ :: [Int]  =  GT
negate (id _) :: Int `compare` x :: Int  =  GT
negate (id _) :: Int `compare` 0 :: Int  =  GT
negate (id _) :: Int `compare` id _ :: Int  =  GT
negate (id _) :: Int `compare` _ :: Bool  =  GT
negate (id _) :: Int `compare` _ :: Char  =  GT
negate (id _) :: Int `compare` _ :: [Int]  =  GT
abs x :: Int `compare` x :: Int  =  GT
abs x :: Int `compare` 0 :: Int  =  GT
abs x :: Int `compare` id _ :: Int  =  GT
abs x :: Int `compare` _ :: Bool  =  GT
abs x :: Int `compare` _ :: Char  =  GT
abs x :: Int `compare` _ :: [Int]  =  GT
abs 0 :: Int `compare` x :: Int  =  GT
abs 0 :: Int `compare` 0 :: Int  =  GT
abs 0 :: Int `compare` id _ :: Int  =  GT
abs 0 :: Int `compare` _ :: Bool  =  GT
abs 0 :: Int `compare` _ :: Char  =  GT
abs 0 :: Int `compare` _ :: [Int]  =  GT
abs (id _) :: Int `compare` x :: Int  =  GT
abs (id _) :: Int `compare` 0 :: Int  =  GT
abs (id _) :: Int `compare` id _ :: Int  =  GT
abs (id _) :: Int `compare` _ :: Bool  =  GT
abs (id _) :: Int `compare` _ :: Char  =  GT
abs (id _) :: Int `compare` _ :: [Int]  =  GT
_ + x :: Int `compare` x :: Int  =  GT
_ + x :: Int `compare` 0 :: Int  =  GT
_ + x :: Int `compare` id _ :: Int  =  GT
_ + x :: Int `compare` _ :: Bool  =  GT
_ + x :: Int `compare` _ :: Char  =  GT
_ + x :: Int `compare` _ :: [Int]  =  GT
_ + 0 :: Int `compare` x :: Int  =  GT
_ + 0 :: Int `compare` 0 :: Int  =  GT
_ + 0 :: Int `compare` id _ :: Int  =  GT
_ + 0 :: Int `compare` _ :: Bool  =  GT
_ + 0 :: Int `compare` _ :: Char  =  GT
_ + 0 :: Int `compare` _ :: [Int]  =  GT
_ + id _ :: Int `compare` x :: Int  =  GT
_ + id _ :: Int `compare` 0 :: Int  =  GT
_ + id _ :: Int `compare` id _ :: Int  =  GT
_ + id _ :: Int `compare` _ :: Bool  =  GT
_ + id _ :: Int `compare` _ :: Char  =  GT
_ + id _ :: Int `compare` _ :: [Int]  =  GT
x + _ :: Int `compare` x :: Int  =  GT
x + _ :: Int `compare` 0 :: Int  =  GT
x + _ :: Int `compare` id _ :: Int  =  GT
x + _ :: Int `compare` _ :: Bool  =  GT
x + _ :: Int `compare` _ :: Char  =  GT
x + _ :: Int `compare` _ :: [Int]  =  GT
0 + _ :: Int `compare` x :: Int  =  GT
0 + _ :: Int `compare` 0 :: Int  =  GT
0 + _ :: Int `compare` id _ :: Int  =  GT
0 + _ :: Int `compare` _ :: Bool  =  GT
0 + _ :: Int `compare` _ :: Char  =  GT
0 + _ :: Int `compare` _ :: [Int]  =  GT
id _ + _ :: Int `compare` x :: Int  =  GT
id _ + _ :: Int `compare` 0 :: Int  =  GT
id _ + _ :: Int `compare` id _ :: Int  =  GT
id _ + _ :: Int `compare` _ :: Bool  =  GT
id _ + _ :: Int `compare` _ :: Char  =  GT
id _ + _ :: Int `compare` _ :: [Int]  =  GT
_ * _ :: Int `compare` x :: Int  =  GT
_ * _ :: Int `compare` 0 :: Int  =  GT
_ * _ :: Int `compare` id _ :: Int  =  GT
_ * _ :: Int `compare` _ :: Bool  =  GT
_ * _ :: Int `compare` _ :: Char  =  GT
_ * _ :: Int `compare` _ :: [Int]  =  GT
f _ :: Int `compare` x :: Int  =  GT
f _ :: Int `compare` 0 :: Int  =  GT
f _ :: Int `compare` id _ :: Int  =  LT
f _ :: Int `compare` _ :: Bool  =  GT
f _ :: Int `compare` _ :: Char  =  GT
f _ :: Int `compare` _ :: [Int]  =  GT
head xs :: Int `compare` x :: Int  =  GT
head xs :: Int `compare` 0 :: Int  =  GT
head xs :: Int `compare` id _ :: Int  =  GT
head xs :: Int `compare` _ :: Bool  =  GT
head xs :: Int `compare` _ :: Char  =  GT
head xs :: Int `compare` _ :: [Int]  =  GT
head [] :: Int `compare` x :: Int  =  GT
head [] :: Int `compare` 0 :: Int  =  GT
head [] :: Int `compare` id _ :: Int  =  GT
head [] :: Int `compare` _ :: Bool  =  GT
head [] :: Int `compare` _ :: Char  =  GT
head [] :: Int `compare` _ :: [Int]  =  GT
head (_:_) :: Int `compare` x :: Int  =  GT
head (_:_) :: Int `compare` 0 :: Int  =  GT
head (_:_) :: Int `compare` id _ :: Int  =  GT
head (_:_) :: Int `compare` _ :: Bool  =  GT
head (_:_) :: Int `compare` _ :: Char  =  GT
head (_:_) :: Int `compare` _ :: [Int]  =  GT
ord c :: Int `compare` x :: Int  =  GT
ord c :: Int `compare` 0 :: Int  =  GT
ord c :: Int `compare` id _ :: Int  =  LT
ord c :: Int `compare` _ :: Bool  =  GT
ord c :: Int `compare` _ :: Char  =  GT
ord c :: Int `compare` _ :: [Int]  =  GT
ord 'a' :: Int `compare` x :: Int  =  GT
ord 'a' :: Int `compare` 0 :: Int  =  GT
ord 'a' :: Int `compare` id _ :: Int  =  GT
ord 'a' :: Int `compare` _ :: Bool  =  GT
ord 'a' :: Int `compare` _ :: Char  =  GT
ord 'a' :: Int `compare` _ :: [Int]  =  GT
q :: Bool `compare` x :: Int  =  LT
q :: Bool `compare` 0 :: Int  =  LT
q :: Bool `compare` id _ :: Int  =  LT
q :: Bool `compare` _ :: Bool  =  GT
q :: Bool `compare` _ :: Char  =  LT
q :: Bool `compare` _ :: [Int]  =  LT
not p :: Bool `compare` x :: Int  =  GT
not p :: Bool `compare` 0 :: Int  =  GT
not p :: Bool `compare` id _ :: Int  =  LT
not p :: Bool `compare` _ :: Bool  =  GT
not p :: Bool `compare` _ :: Char  =  GT
not p :: Bool `compare` _ :: [Int]  =  GT
not False :: Bool `compare` x :: Int  =  GT
not False :: Bool `compare` 0 :: Int  =  GT
not False :: Bool `compare` id _ :: Int  =  GT
not False :: Bool `compare` _ :: Bool  =  GT
not False :: Bool `compare` _ :: Char  =  GT
not False :: Bool `compare` _ :: [Int]  =  GT
not True :: Bool `compare` x :: Int  =  GT
not True :: Bool `compare` 0 :: Int  =  GT
not True :: Bool `compare` id _ :: Int  =  GT
not True :: Bool `compare` _ :: Bool  =  GT
not True :: Bool `compare` _ :: Char  =  GT
not True :: Bool `compare` _ :: [Int]  =  GT
not (not _) :: Bool `compare` x :: Int  =  GT
not (not _) :: Bool `compare` 0 :: Int  =  GT
not (not _) :: Bool `compare` id _ :: Int  =  GT
not (not _) :: Bool `compare` _ :: Bool  =  GT
not (not _) :: Bool `compare` _ :: Char  =  GT
not (not _) :: Bool `compare` _ :: [Int]  =  GT
_ || _ :: Bool `compare` x :: Int  =  GT
_ || _ :: Bool `compare` 0 :: Int  =  GT
_ || _ :: Bool `compare` id _ :: Int  =  GT
_ || _ :: Bool `compare` _ :: Bool  =  GT
_ || _ :: Bool `compare` _ :: Char  =  GT
_ || _ :: Bool `compare` _ :: [Int]  =  GT
d :: Char `compare` x :: Int  =  LT
d :: Char `compare` 0 :: Int  =  LT
d :: Char `compare` id _ :: Int  =  LT
d :: Char `compare` _ :: Bool  =  GT
d :: Char `compare` _ :: Char  =  GT
d :: Char `compare` _ :: [Int]  =  LT
' ' :: Char `compare` x :: Int  =  GT
' ' :: Char `compare` 0 :: Int  =  LT
' ' :: Char `compare` id _ :: Int  =  LT
' ' :: Char `compare` _ :: Bool  =  GT
' ' :: Char `compare` _ :: Char  =  GT
' ' :: Char `compare` _ :: [Int]  =  GT
ys :: [Int] `compare` x :: Int  =  GT
ys :: [Int] `compare` 0 :: Int  =  LT
ys :: [Int] `compare` id _ :: Int  =  LT
ys :: [Int] `compare` _ :: Bool  =  GT
ys :: [Int] `compare` _ :: Char  =  GT
ys :: [Int] `compare` _ :: [Int]  =  GT
[0] :: [Int] `compare` x :: Int  =  GT
[0] :: [Int] `compare` 0 :: Int  =  GT
[0] :: [Int] `compare` id _ :: Int  =  LT
[0] :: [Int] `compare` _ :: Bool  =  GT
[0] :: [Int] `compare` _ :: Char  =  GT
[0] :: [Int] `compare` _ :: [Int]  =  GT
_:xs :: [Int] `compare` x :: Int  =  GT
_:xs :: [Int] `compare` 0 :: Int  =  GT
_:xs :: [Int] `compare` id _ :: Int  =  GT
_:xs :: [Int] `compare` _ :: Bool  =  GT
_:xs :: [Int] `compare` _ :: Char  =  GT
_:xs :: [Int] `compare` _ :: [Int]  =  GT
[_] :: [Int] `compare` x :: Int  =  GT
[_] :: [Int] `compare` 0 :: Int  =  GT
[_] :: [Int] `compare` id _ :: Int  =  GT
[_] :: [Int] `compare` _ :: Bool  =  GT
[_] :: [Int] `compare` _ :: Char  =  GT
[_] :: [Int] `compare` _ :: [Int]  =  GT
_:_:_ :: [Int] `compare` x :: Int  =  GT
_:_:_ :: [Int] `compare` 0 :: Int  =  GT
_:_:_ :: [Int] `compare` id _ :: Int  =  GT
_:_:_ :: [Int] `compare` _ :: Bool  =  GT
_:_:_ :: [Int] `compare` _ :: Char  =  GT
_:_:_ :: [Int] `compare` _ :: [Int]  =  GT
x:_ :: [Int] `compare` x :: Int  =  GT
x:_ :: [Int] `compare` 0 :: Int  =  GT
x:_ :: [Int] `compare` id _ :: Int  =  GT
x:_ :: [Int] `compare` _ :: Bool  =  GT
x:_ :: [Int] `compare` _ :: Char  =  GT
x:_ :: [Int] `compare` _ :: [Int]  =  GT
0:_ :: [Int] `compare` x :: Int  =  GT
0:_ :: [Int] `compare` 0 :: Int  =  GT
0:_ :: [Int] `compare` id _ :: Int  =  GT
0:_ :: [Int] `compare` _ :: Bool  =  GT
0:_ :: [Int] `compare` _ :: Char  =  GT
0:_ :: [Int] `compare` _ :: [Int]  =  GT
id _:_ :: [Int] `compare` x :: Int  =  GT
id _:_ :: [Int] `compare` 0 :: Int  =  GT
id _:_ :: [Int] `compare` id _ :: Int  =  GT
id _:_ :: [Int] `compare` _ :: Bool  =  GT
id _:_ :: [Int] `compare` _ :: Char  =  GT
id _:_ :: [Int] `compare` _ :: [Int]  =  GT
tail _ :: [Int] `compare` x :: Int  =  GT
tail _ :: [Int] `compare` 0 :: Int  =  GT
tail _ :: [Int] `compare` id _ :: Int  =  GT
tail _ :: [Int] `compare` _ :: Bool  =  GT
tail _ :: [Int] `compare` _ :: Char  =  GT
tail _ :: [Int] `compare` _ :: [Int]  =  GT
_ ++ _ :: [Int] `compare` x :: Int  =  GT
_ ++ _ :: [Int] `compare` 0 :: Int  =  GT
_ ++ _ :: [Int] `compare` id _ :: Int  =  GT
_ ++ _ :: [Int] `compare` _ :: Bool  =  GT
_ ++ _ :: [Int] `compare` _ :: Char  =  GT
_ ++ _ :: [Int] `compare` _ :: [Int]  =  GT
negate :: Int -> Int `compare` x :: Int  =  GT
negate :: Int -> Int `compare` 0 :: Int  =  GT
negate :: Int -> Int `compare` id _ :: Int  =  LT
negate :: Int -> Int `compare` _ :: Bool  =  GT
negate :: Int -> Int `compare` _ :: Char  =  GT
negate :: Int -> Int `compare` _ :: [Int]  =  GT
abs :: Int -> Int `compare` x :: Int  =  GT
abs :: Int -> Int `compare` 0 :: Int  =  GT
abs :: Int -> Int `compare` id _ :: Int  =  LT
abs :: Int -> Int `compare` _ :: Bool  =  GT
abs :: Int -> Int `compare` _ :: Char  =  GT
abs :: Int -> Int `compare` _ :: [Int]  =  GT
(_ +) :: Int -> Int `compare` x :: Int  =  GT
(_ +) :: Int -> Int `compare` 0 :: Int  =  GT
(_ +) :: Int -> Int `compare` id _ :: Int  =  GT
(_ +) :: Int -> Int `compare` _ :: Bool  =  GT
(_ +) :: Int -> Int `compare` _ :: Char  =  GT
(_ +) :: Int -> Int `compare` _ :: [Int]  =  GT
(*) :: Int -> Int -> Int `compare` x :: Int  =  GT
(*) :: Int -> Int -> Int `compare` 0 :: Int  =  GT
(*) :: Int -> Int -> Int `compare` id _ :: Int  =  LT
(*) :: Int -> Int -> Int `compare` _ :: Bool  =  GT
(*) :: Int -> Int -> Int `compare` _ :: Char  =  GT
(*) :: Int -> Int -> Int `compare` _ :: [Int]  =  GT
not :: Bool -> Bool `compare` x :: Int  =  GT
not :: Bool -> Bool `compare` 0 :: Int  =  GT
not :: Bool -> Bool `compare` id _ :: Int  =  LT
not :: Bool -> Bool `compare` _ :: Bool  =  GT
not :: Bool -> Bool `compare` _ :: Char  =  GT
not :: Bool -> Bool `compare` _ :: [Int]  =  GT
(||) :: Bool -> Bool -> Bool `compare` x :: Int  =  GT
(||) :: Bool -> Bool -> Bool `compare` 0 :: Int  =  GT
(||) :: Bool -> Bool -> Bool `compare` id _ :: Int  =  LT
(||) :: Bool -> Bool -> Bool `compare` _ :: Bool  =  GT
(||) :: Bool -> Bool -> Bool `compare` _ :: Char  =  GT
(||) :: Bool -> Bool -> Bool `compare` _ :: [Int]  =  GT
x' :: Int `compare` _ :: Int  =  GT
2 :: Int `compare` _ :: Int  =  GT
id z :: Int `compare` _ :: Int  =  GT
id (-1) :: Int `compare` _ :: Int  =  GT
id (id y) :: Int `compare` _ :: Int  =  GT
id (id 1) :: Int `compare` _ :: Int  =  GT
id (id (id x)) :: Int `compare` _ :: Int  =  GT
id (id (id 0)) :: Int `compare` _ :: Int  =  GT
id (id (id (id _))) :: Int `compare` _ :: Int  =  GT
id (id (negate _)) :: Int `compare` _ :: Int  =  GT
id (id (abs _)) :: Int `compare` _ :: Int  =  GT
id (id (_ + _)) :: Int `compare` _ :: Int  =  GT
id (id (head _)) :: Int `compare` _ :: Int  =  GT
id (id (ord _)) :: Int `compare` _ :: Int  =  GT
id (negate x) :: Int `compare` _ :: Int  =  GT
id (negate 0) :: Int `compare` _ :: Int  =  GT
id (negate (id _)) :: Int `compare` _ :: Int  =  GT
id (abs x) :: Int `compare` _ :: Int  =  GT
id (abs 0) :: Int `compare` _ :: Int  =  GT
id (abs (id _)) :: Int `compare` _ :: Int  =  GT
id (_ + x) :: Int `compare` _ :: Int  =  GT
id (_ + 0) :: Int `compare` _ :: Int  =  GT
id (_ + id _) :: Int `compare` _ :: Int  =  GT
id (x + _) :: Int `compare` _ :: Int  =  GT
id (0 + _) :: Int `compare` _ :: Int  =  GT
id (id _ + _) :: Int `compare` _ :: Int  =  GT
id (_ * _) :: Int `compare` _ :: Int  =  GT
id (f _) :: Int `compare` _ :: Int  =  GT
id (head xs) :: Int `compare` _ :: Int  =  GT
id (head []) :: Int `compare` _ :: Int  =  GT
id (head (_:_)) :: Int `compare` _ :: Int  =  GT
id (ord c) :: Int `compare` _ :: Int  =  GT
id (ord 'a') :: Int `compare` _ :: Int  =  GT
negate y :: Int `compare` _ :: Int  =  GT
negate 1 :: Int `compare` _ :: Int  =  GT
negate (id x) :: Int `compare` _ :: Int  =  GT
negate (id 0) :: Int `compare` _ :: Int  =  GT
negate (id (id _)) :: Int `compare` _ :: Int  =  GT
negate (negate _) :: Int `compare` _ :: Int  =  GT
negate (abs _) :: Int `compare` _ :: Int  =  GT
negate (_ + _) :: Int `compare` _ :: Int  =  GT
negate (head _) :: Int `compare` _ :: Int  =  GT
negate (ord _) :: Int `compare` _ :: Int  =  GT
abs y :: Int `compare` _ :: Int  =  GT
abs 1 :: Int `compare` _ :: Int  =  GT
abs (id x) :: Int `compare` _ :: Int  =  GT
abs (id 0) :: Int `compare` _ :: Int  =  GT
abs (id (id _)) :: Int `compare` _ :: Int  =  GT
abs (negate _) :: Int `compare` _ :: Int  =  GT
abs (abs _) :: Int `compare` _ :: Int  =  GT
abs (_ + _) :: Int `compare` _ :: Int  =  GT
abs (head _) :: Int `compare` _ :: Int  =  GT
abs (ord _) :: Int `compare` _ :: Int  =  GT
_ + y :: Int `compare` _ :: Int  =  GT
_ + 1 :: Int `compare` _ :: Int  =  GT
_ + id x :: Int `compare` _ :: Int  =  GT
_ + id 0 :: Int `compare` _ :: Int  =  GT
_ + id (id _) :: Int `compare` _ :: Int  =  GT
_ + negate _ :: Int `compare` _ :: Int  =  GT
_ + abs _ :: Int `compare` _ :: Int  =  GT
_ + (_ + _) :: Int `compare` _ :: Int  =  GT
_ + head _ :: Int `compare` _ :: Int  =  GT
_ + ord _ :: Int `compare` _ :: Int  =  GT
x + x :: Int `compare` _ :: Int  =  GT
x + 0 :: Int `compare` _ :: Int  =  GT
x + id _ :: Int `compare` _ :: Int  =  GT
0 + x :: Int `compare` _ :: Int  =  GT
0 + 0 :: Int `compare` _ :: Int  =  GT
0 + id _ :: Int `compare` _ :: Int  =  GT
id _ + x :: Int `compare` _ :: Int  =  GT
id _ + 0 :: Int `compare` _ :: Int  =  GT
id _ + id _ :: Int `compare` _ :: Int  =  GT
_ * x :: Int `compare` _ :: Int  =  GT
_ * 0 :: Int `compare` _ :: Int  =  GT
_ * id _ :: Int `compare` _ :: Int  =  GT
f x :: Int `compare` _ :: Int  =  GT
f 0 :: Int `compare` _ :: Int  =  GT
f (id _) :: Int `compare` _ :: Int  =  GT
y + _ :: Int `compare` _ :: Int  =  GT
1 + _ :: Int `compare` _ :: Int  =  GT
id x + _ :: Int `compare` _ :: Int  =  GT
id 0 + _ :: Int `compare` _ :: Int  =  GT
id (id _) + _ :: Int `compare` _ :: Int  =  GT
negate _ + _ :: Int `compare` _ :: Int  =  GT
abs _ + _ :: Int `compare` _ :: Int  =  GT
(_ + _) + _ :: Int `compare` _ :: Int  =  GT
head _ + _ :: Int `compare` _ :: Int  =  GT
ord _ + _ :: Int `compare` _ :: Int  =  GT
x * _ :: Int `compare` _ :: Int  =  GT
0 * _ :: Int `compare` _ :: Int  =  GT
id _ * _ :: Int `compare` _ :: Int  =  GT
g _ :: Int `compare` _ :: Int  =  GT
head ys :: Int `compare` _ :: Int  =  GT
head [0] :: Int `compare` _ :: Int  =  GT
head (_:xs) :: Int `compare` _ :: Int  =  GT
head [_] :: Int `compare` _ :: Int  =  GT
head (_:_:_) :: Int `compare` _ :: Int  =  GT
head (x:_) :: Int `compare` _ :: Int  =  GT
head (0:_) :: Int `compare` _ :: Int  =  GT
head (id _:_) :: Int `compare` _ :: Int  =  GT
head (tail _) :: Int `compare` _ :: Int  =  GT
head (_ ++ _) :: Int `compare` _ :: Int  =  GT
ord d :: Int `compare` _ :: Int  =  GT
ord ' ' :: Int `compare` _ :: Int  =  GT
r :: Bool `compare` _ :: Int  =  LT
not q :: Bool `compare` _ :: Int  =  GT
not (not p) :: Bool `compare` _ :: Int  =  GT
not (not False) :: Bool `compare` _ :: Int  =  GT
not (not True) :: Bool `compare` _ :: Int  =  GT
not (not (not _)) :: Bool `compare` _ :: Int  =  GT
not (_ || _) :: Bool `compare` _ :: Int  =  GT
_ || p :: Bool `compare` _ :: Int  =  GT
_ || False :: Bool `compare` _ :: Int  =  GT
_ || True :: Bool `compare` _ :: Int  =  GT
_ || not _ :: Bool `compare` _ :: Int  =  GT
p || _ :: Bool `compare` _ :: Int  =  GT
False || _ :: Bool `compare` _ :: Int  =  GT
True || _ :: Bool `compare` _ :: Int  =  GT
not _ || _ :: Bool `compare` _ :: Int  =  GT
_ && _ :: Bool `compare` _ :: Int  =  GT
_ == _ :: Bool `compare` _ :: Int  =  GT
_ == _ :: Bool `compare` _ :: Int  =  GT
odd _ :: Bool `compare` _ :: Int  =  GT
even _ :: Bool `compare` _ :: Int  =  GT
elem _ _ :: Bool `compare` _ :: Int  =  GT
e :: Char `compare` _ :: Int  =  LT
'b' :: Char `compare` _ :: Int  =  GT
zs :: [Int] `compare` _ :: Int  =  GT
[0,0] :: [Int] `compare` _ :: Int  =  GT
[1] :: [Int] `compare` _ :: Int  =  GT
_:ys :: [Int] `compare` _ :: Int  =  GT
[_,0] :: [Int] `compare` _ :: Int  =  GT
_:_:xs :: [Int] `compare` _ :: Int  =  GT
[_,_] :: [Int] `compare` _ :: Int  =  GT
_:_:_:_ :: [Int] `compare` _ :: Int  =  GT
_:x:_ :: [Int] `compare` _ :: Int  =  GT
_:0:_ :: [Int] `compare` _ :: Int  =  GT
_:id _:_ :: [Int] `compare` _ :: Int  =  GT
_:tail _ :: [Int] `compare` _ :: Int  =  GT
_:(_ ++ _) :: [Int] `compare` _ :: Int  =  GT
x:xs :: [Int] `compare` _ :: Int  =  GT
[x] :: [Int] `compare` _ :: Int  =  GT
x:_:_ :: [Int] `compare` _ :: Int  =  GT
0:xs :: [Int] `compare` _ :: Int  =  GT
[0] :: [Int] `compare` _ :: Int  =  GT
0:_:_ :: [Int] `compare` _ :: Int  =  GT
id _:xs :: [Int] `compare` _ :: Int  =  GT
[id _] :: [Int] `compare` _ :: Int  =  GT
id _:_:_ :: [Int] `compare` _ :: Int  =  GT
y:_ :: [Int] `compare` _ :: Int  =  GT
1:_ :: [Int] `compare` _ :: Int  =  GT
id x:_ :: [Int] `compare` _ :: Int  =  GT
id 0:_ :: [Int] `compare` _ :: Int  =  GT
id (id _):_ :: [Int] `compare` _ :: Int  =  GT
negate _:_ :: [Int] `compare` _ :: Int  =  GT
abs _:_ :: [Int] `compare` _ :: Int  =  GT
_ + _:_ :: [Int] `compare` _ :: Int  =  GT
head _:_ :: [Int] `compare` _ :: Int  =  GT
ord _:_ :: [Int] `compare` _ :: Int  =  GT
tail xs :: [Int] `compare` _ :: Int  =  GT
tail [] :: [Int] `compare` _ :: Int  =  GT
tail (_:_) :: [Int] `compare` _ :: Int  =  GT
_ ++ xs :: [Int] `compare` _ :: Int  =  GT
_ ++ [] :: [Int] `compare` _ :: Int  =  GT
_ ++ (_:_) :: [Int] `compare` _ :: Int  =  GT
xs ++ _ :: [Int] `compare` _ :: Int  =  GT
[] ++ _ :: [Int] `compare` _ :: Int  =  GT
(_:_) ++ _ :: [Int] `compare` _ :: Int  =  GT
sort _ :: [Int] `compare` _ :: Int  =  GT
insert _ _ :: [Int] `compare` _ :: Int  =  GT
(x +) :: Int -> Int `compare` _ :: Int  =  GT
(0 +) :: Int -> Int `compare` _ :: Int  =  GT
(id _ +) :: Int -> Int `compare` _ :: Int  =  GT
(_ *) :: Int -> Int `compare` _ :: Int  =  GT
f :: Int -> Int `compare` _ :: Int  =  GT
(_ ||) :: Bool -> Bool `compare` _ :: Int  =  GT
(&&) :: Bool -> Bool -> Bool `compare` _ :: Int  =  GT
_ :: Int `compare` y' :: Int  =  LT
_ :: Int `compare` -2 :: Int  =  LT
_ :: Int `compare` id x' :: Int  =  LT
_ :: Int `compare` id 2 :: Int  =  LT
_ :: Int `compare` id (id z) :: Int  =  LT
_ :: Int `compare` id (id (-1)) :: Int  =  LT
_ :: Int `compare` id (id (id y)) :: Int  =  LT
_ :: Int `compare` id (id (id 1)) :: Int  =  LT
_ :: Int `compare` id (id (id (id x))) :: Int  =  LT
_ :: Int `compare` id (id (id (id 0))) :: Int  =  LT
_ :: Int `compare` id (id (id (id (id _)))) :: Int  =  LT
_ :: Int `compare` id (id (id (negate _))) :: Int  =  LT
_ :: Int `compare` id (id (id (abs _))) :: Int  =  LT
_ :: Int `compare` id (id (id (_ + _))) :: Int  =  LT
_ :: Int `compare` id (id (id (head _))) :: Int  =  LT
_ :: Int `compare` id (id (id (ord _))) :: Int  =  LT
_ :: Int `compare` id (id (negate x)) :: Int  =  LT
_ :: Int `compare` id (id (negate 0)) :: Int  =  LT
_ :: Int `compare` id (id (negate (id _))) :: Int  =  LT
_ :: Int `compare` id (id (abs x)) :: Int  =  LT
_ :: Int `compare` id (id (abs 0)) :: Int  =  LT
_ :: Int `compare` id (id (abs (id _))) :: Int  =  LT
_ :: Int `compare` id (id (_ + x)) :: Int  =  LT
_ :: Int `compare` id (id (_ + 0)) :: Int  =  LT
_ :: Int `compare` id (id (_ + id _)) :: Int  =  LT
_ :: Int `compare` id (id (x + _)) :: Int  =  LT
_ :: Int `compare` id (id (0 + _)) :: Int  =  LT
_ :: Int `compare` id (id (id _ + _)) :: Int  =  LT
_ :: Int `compare` id (id (_ * _)) :: Int  =  LT
_ :: Int `compare` id (id (f _)) :: Int  =  LT
_ :: Int `compare` id (id (head xs)) :: Int  =  LT
_ :: Int `compare` id (id (head [])) :: Int  =  LT
_ :: Int `compare` id (id (head (_:_))) :: Int  =  LT
_ :: Int `compare` id (id (ord c)) :: Int  =  LT
_ :: Int `compare` id (id (ord 'a')) :: Int  =  LT
_ :: Int `compare` id (negate y) :: Int  =  LT
_ :: Int `compare` id (negate 1) :: Int  =  LT
_ :: Int `compare` id (negate (id x)) :: Int  =  LT
_ :: Int `compare` id (negate (id 0)) :: Int  =  LT
_ :: Int `compare` id (negate (id (id _))) :: Int  =  LT
_ :: Int `compare` id (negate (negate _)) :: Int  =  LT
_ :: Int `compare` id (negate (abs _)) :: Int  =  LT
_ :: Int `compare` id (negate (_ + _)) :: Int  =  LT
_ :: Int `compare` id (negate (head _)) :: Int  =  LT
_ :: Int `compare` id (negate (ord _)) :: Int  =  LT
_ :: Int `compare` id (abs y) :: Int  =  LT
_ :: Int `compare` id (abs 1) :: Int  =  LT
_ :: Int `compare` id (abs (id x)) :: Int  =  LT
_ :: Int `compare` id (abs (id 0)) :: Int  =  LT
_ :: Int `compare` id (abs (id (id _))) :: Int  =  LT
_ :: Int `compare` id (abs (negate _)) :: Int  =  LT
_ :: Int `compare` id (abs (abs _)) :: Int  =  LT
_ :: Int `compare` id (abs (_ + _)) :: Int  =  LT
_ :: Int `compare` id (abs (head _)) :: Int  =  LT
_ :: Int `compare` id (abs (ord _)) :: Int  =  LT
_ :: Int `compare` id (_ + y) :: Int  =  LT
_ :: Int `compare` id (_ + 1) :: Int  =  LT
_ :: Int `compare` id (_ + id x) :: Int  =  LT
_ :: Int `compare` id (_ + id 0) :: Int  =  LT
_ :: Int `compare` id (_ + id (id _)) :: Int  =  LT
_ :: Int `compare` id (_ + negate _) :: Int  =  LT
_ :: Int `compare` id (_ + abs _) :: Int  =  LT
_ :: Int `compare` id (_ + (_ + _)) :: Int  =  LT
_ :: Int `compare` id (_ + head _) :: Int  =  LT
_ :: Int `compare` id (_ + ord _) :: Int  =  LT
_ :: Int `compare` id (x + x) :: Int  =  LT
_ :: Int `compare` id (x + 0) :: Int  =  LT
_ :: Int `compare` id (x + id _) :: Int  =  LT
_ :: Int `compare` id (0 + x) :: Int  =  LT
_ :: Int `compare` id (0 + 0) :: Int  =  LT
_ :: Int `compare` id (0 + id _) :: Int  =  LT
_ :: Int `compare` id (id _ + x) :: Int  =  LT
_ :: Int `compare` id (id _ + 0) :: Int  =  LT
_ :: Int `compare` id (id _ + id _) :: Int  =  LT
_ :: Int `compare` id (_ * x) :: Int  =  LT
_ :: Int `compare` id (_ * 0) :: Int  =  LT
_ :: Int `compare` id (_ * id _) :: Int  =  LT
_ :: Int `compare` id (f x) :: Int  =  LT
_ :: Int `compare` id (f 0) :: Int  =  LT
_ :: Int `compare` id (f (id _)) :: Int  =  LT
_ :: Int `compare` id (y + _) :: Int  =  LT
_ :: Int `compare` id (1 + _) :: Int  =  LT
_ :: Int `compare` id (id x + _) :: Int  =  LT
_ :: Int `compare` id (id 0 + _) :: Int  =  LT
_ :: Int `compare` id (id (id _) + _) :: Int  =  LT
_ :: Int `compare` id (negate _ + _) :: Int  =  LT
_ :: Int `compare` id (abs _ + _) :: Int  =  LT
_ :: Int `compare` id ((_ + _) + _) :: Int  =  LT
_ :: Int `compare` id (head _ + _) :: Int  =  LT
_ :: Int `compare` id (ord _ + _) :: Int  =  LT
_ :: Int `compare` id (x * _) :: Int  =  LT
_ :: Int `compare` id (0 * _) :: Int  =  LT
_ :: Int `compare` id (id _ * _) :: Int  =  LT
_ :: Int `compare` id (g _) :: Int  =  LT
_ :: Int `compare` id (head ys) :: Int  =  LT
_ :: Int `compare` id (head [0]) :: Int  =  LT
_ :: Int `compare` id (head (_:xs)) :: Int  =  LT
_ :: Int `compare` id (head [_]) :: Int  =  LT
_ :: Int `compare` id (head (_:_:_)) :: Int  =  LT
_ :: Int `compare` id (head (x:_)) :: Int  =  LT
_ :: Int `compare` id (head (0:_)) :: Int  =  LT
_ :: Int `compare` id (head (id _:_)) :: Int  =  LT
_ :: Int `compare` id (head (tail _)) :: Int  =  LT
_ :: Int `compare` id (head (_ ++ _)) :: Int  =  LT
_ :: Int `compare` id (ord d) :: Int  =  LT
_ :: Int `compare` id (ord ' ') :: Int  =  LT
_ :: Int `compare` negate z :: Int  =  LT
_ :: Int `compare` negate (-1) :: Int  =  LT
_ :: Int `compare` negate (id y) :: Int  =  LT
_ :: Int `compare` negate (id 1) :: Int  =  LT
_ :: Int `compare` negate (id (id x)) :: Int  =  LT
_ :: Int `compare` negate (id (id 0)) :: Int  =  LT
_ :: Int `compare` negate (id (id (id _))) :: Int  =  LT
_ :: Int `compare` negate (id (negate _)) :: Int  =  LT
_ :: Int `compare` negate (id (abs _)) :: Int  =  LT
_ :: Int `compare` negate (id (_ + _)) :: Int  =  LT
_ :: Int `compare` negate (id (head _)) :: Int  =  LT
_ :: Int `compare` negate (id (ord _)) :: Int  =  LT
_ :: Int `compare` negate (negate x) :: Int  =  LT
_ :: Int `compare` negate (negate 0) :: Int  =  LT
_ :: Int `compare` negate (negate (id _)) :: Int  =  LT
_ :: Int `compare` negate (abs x) :: Int  =  LT
_ :: Int `compare` negate (abs 0) :: Int  =  LT
_ :: Int `compare` negate (abs (id _)) :: Int  =  LT
_ :: Int `compare` negate (_ + x) :: Int  =  LT
_ :: Int `compare` negate (_ + 0) :: Int  =  LT
_ :: Int `compare` negate (_ + id _) :: Int  =  LT
_ :: Int `compare` negate (x + _) :: Int  =  LT
_ :: Int `compare` negate (0 + _) :: Int  =  LT
_ :: Int `compare` negate (id _ + _) :: Int  =  LT
_ :: Int `compare` negate (_ * _) :: Int  =  LT
_ :: Int `compare` negate (f _) :: Int  =  LT
_ :: Int `compare` negate (head xs) :: Int  =  LT
_ :: Int `compare` negate (head []) :: Int  =  LT
_ :: Int `compare` negate (head (_:_)) :: Int  =  LT
_ :: Int `compare` negate (ord c) :: Int  =  LT
_ :: Int `compare` negate (ord 'a') :: Int  =  LT
_ :: Int `compare` abs z :: Int  =  LT
_ :: Int `compare` abs (-1) :: Int  =  LT
_ :: Int `compare` abs (id y) :: Int  =  LT
_ :: Int `compare` abs (id 1) :: Int  =  LT
_ :: Int `compare` abs (id (id x)) :: Int  =  LT
_ :: Int `compare` abs (id (id 0)) :: Int  =  LT
_ :: Int `compare` abs (id (id (id _))) :: Int  =  LT
_ :: Int `compare` abs (id (negate _)) :: Int  =  LT
_ :: Int `compare` abs (id (abs _)) :: Int  =  LT
_ :: Int `compare` abs (id (_ + _)) :: Int  =  LT
_ :: Int `compare` abs (id (head _)) :: Int  =  LT
_ :: Int `compare` abs (id (ord _)) :: Int  =  LT
_ :: Int `compare` abs (negate x) :: Int  =  LT
_ :: Int `compare` abs (negate 0) :: Int  =  LT
_ :: Int `compare` abs (negate (id _)) :: Int  =  LT
_ :: Int `compare` abs (abs x) :: Int  =  LT
_ :: Int `compare` abs (abs 0) :: Int  =  LT
_ :: Int `compare` abs (abs (id _)) :: Int  =  LT
_ :: Int `compare` abs (_ + x) :: Int  =  LT
_ :: Int `compare` abs (_ + 0) :: Int  =  LT
_ :: Int `compare` abs (_ + id _) :: Int  =  LT
_ :: Int `compare` abs (x + _) :: Int  =  LT
_ :: Int `compare` abs (0 + _) :: Int  =  LT
_ :: Int `compare` abs (id _ + _) :: Int  =  LT
_ :: Int `compare` abs (_ * _) :: Int  =  LT
_ :: Int `compare` abs (f _) :: Int  =  LT
_ :: Int `compare` abs (head xs) :: Int  =  LT
_ :: Int `compare` abs (head []) :: Int  =  LT
_ :: Int `compare` abs (head (_:_)) :: Int  =  LT
_ :: Int `compare` abs (ord c) :: Int  =  LT
_ :: Int `compare` abs (ord 'a') :: Int  =  LT
_ :: Int `compare` _ + z :: Int  =  LT
_ :: Int `compare` _ + (-1) :: Int  =  LT
_ :: Int `compare` _ + id y :: Int  =  LT
_ :: Int `compare` _ + id 1 :: Int  =  LT
_ :: Int `compare` _ + id (id x) :: Int  =  LT
_ :: Int `compare` _ + id (id 0) :: Int  =  LT
_ :: Int `compare` _ + id (id (id _)) :: Int  =  LT
_ :: Int `compare` _ + id (negate _) :: Int  =  LT
_ :: Int `compare` _ + id (abs _) :: Int  =  LT
_ :: Int `compare` _ + id (_ + _) :: Int  =  LT
_ :: Int `compare` _ + id (head _) :: Int  =  LT
_ :: Int `compare` _ + id (ord _) :: Int  =  LT
_ :: Int `compare` _ + negate x :: Int  =  LT
_ :: Int `compare` _ + negate 0 :: Int  =  LT
_ :: Int `compare` _ + negate (id _) :: Int  =  LT
_ :: Int `compare` _ + abs x :: Int  =  LT
_ :: Int `compare` _ + abs 0 :: Int  =  LT
_ :: Int `compare` _ + abs (id _) :: Int  =  LT
_ :: Int `compare` _ + (_ + x) :: Int  =  LT
_ :: Int `compare` _ + (_ + 0) :: Int  =  LT
_ :: Int `compare` _ + (_ + id _) :: Int  =  LT
_ :: Int `compare` _ + (x + _) :: Int  =  LT
_ :: Int `compare` _ + (0 + _) :: Int  =  LT
_ :: Int `compare` _ + (id _ + _) :: Int  =  LT
_ :: Int `compare` _ + _ * _ :: Int  =  LT
_ :: Int `compare` _ + f _ :: Int  =  LT
_ :: Int `compare` _ + head xs :: Int  =  LT
_ :: Int `compare` _ + head [] :: Int  =  LT
_ :: Int `compare` _ + head (_:_) :: Int  =  LT
_ :: Int `compare` _ + ord c :: Int  =  LT
_ :: Int `compare` _ + ord 'a' :: Int  =  LT
_ :: Int `compare` x + y :: Int  =  LT
_ :: Int `compare` x + 1 :: Int  =  LT
_ :: Int `compare` x + id x :: Int  =  LT
_ :: Int `compare` x + id 0 :: Int  =  LT
_ :: Int `compare` x + id (id _) :: Int  =  LT
_ :: Int `compare` x + negate _ :: Int  =  LT
_ :: Int `compare` x + abs _ :: Int  =  LT
_ :: Int `compare` x + (_ + _) :: Int  =  LT
_ :: Int `compare` x + head _ :: Int  =  LT
_ :: Int `compare` x + ord _ :: Int  =  LT
_ :: Int `compare` 0 + y :: Int  =  LT
_ :: Int `compare` 0 + 1 :: Int  =  LT
_ :: Int `compare` 0 + id x :: Int  =  LT
_ :: Int `compare` 0 + id 0 :: Int  =  LT
_ :: Int `compare` 0 + id (id _) :: Int  =  LT
_ :: Int `compare` 0 + negate _ :: Int  =  LT
_ :: Int `compare` 0 + abs _ :: Int  =  LT
_ :: Int `compare` 0 + (_ + _) :: Int  =  LT
_ :: Int `compare` 0 + head _ :: Int  =  LT
_ :: Int `compare` 0 + ord _ :: Int  =  LT
_ :: Int `compare` id _ + y :: Int  =  LT
_ :: Int `compare` id _ + 1 :: Int  =  LT
_ :: Int `compare` id _ + id x :: Int  =  LT
_ :: Int `compare` id _ + id 0 :: Int  =  LT
_ :: Int `compare` id _ + id (id _) :: Int  =  LT
_ :: Int `compare` id _ + negate _ :: Int  =  LT
_ :: Int `compare` id _ + abs _ :: Int  =  LT
_ :: Int `compare` id _ + (_ + _) :: Int  =  LT
_ :: Int `compare` id _ + head _ :: Int  =  LT
_ :: Int `compare` id _ + ord _ :: Int  =  LT
_ :: Int `compare` _ * y :: Int  =  LT
_ :: Int `compare` _ * 1 :: Int  =  LT
_ :: Int `compare` _ * id x :: Int  =  LT
_ :: Int `compare` _ * id 0 :: Int  =  LT
_ :: Int `compare` _ * id (id _) :: Int  =  LT
_ :: Int `compare` _ * negate _ :: Int  =  LT
_ :: Int `compare` _ * abs _ :: Int  =  LT
_ :: Int `compare` _ * (_ + _) :: Int  =  LT
_ :: Int `compare` _ * head _ :: Int  =  LT
_ :: Int `compare` _ * ord _ :: Int  =  LT
_ :: Int `compare` f y :: Int  =  LT
_ :: Int `compare` f 1 :: Int  =  LT
_ :: Int `compare` f (id x) :: Int  =  LT
_ :: Int `compare` f (id 0) :: Int  =  LT
_ :: Int `compare` f (id (id _)) :: Int  =  LT
_ :: Int `compare` f (negate _) :: Int  =  LT
_ :: Int `compare` f (abs _) :: Int  =  LT
_ :: Int `compare` f (_ + _) :: Int  =  LT
_ :: Int `compare` f (head _) :: Int  =  LT
_ :: Int `compare` f (ord _) :: Int  =  LT
_ :: Int `compare` y + x :: Int  =  LT
_ :: Int `compare` y + 0 :: Int  =  LT
_ :: Int `compare` y + id _ :: Int  =  LT
_ :: Int `compare` 1 + x :: Int  =  LT
_ :: Int `compare` 1 + 0 :: Int  =  LT
_ :: Int `compare` 1 + id _ :: Int  =  LT
_ :: Int `compare` id x + x :: Int  =  LT
_ :: Int `compare` id x + 0 :: Int  =  LT
_ :: Int `compare` id x + id _ :: Int  =  LT
_ :: Int `compare` id 0 + x :: Int  =  LT
_ :: Int `compare` id 0 + 0 :: Int  =  LT
_ :: Int `compare` id 0 + id _ :: Int  =  LT
_ :: Int `compare` id (id _) + x :: Int  =  LT
_ :: Int `compare` id (id _) + 0 :: Int  =  LT
_ :: Int `compare` id (id _) + id _ :: Int  =  LT
_ :: Int `compare` negate _ + x :: Int  =  LT
_ :: Int `compare` negate _ + 0 :: Int  =  LT
_ :: Int `compare` negate _ + id _ :: Int  =  LT
_ :: Int `compare` abs _ + x :: Int  =  LT
_ :: Int `compare` abs _ + 0 :: Int  =  LT
_ :: Int `compare` abs _ + id _ :: Int  =  LT
_ :: Int `compare` (_ + _) + x :: Int  =  LT
_ :: Int `compare` (_ + _) + 0 :: Int  =  LT
_ :: Int `compare` (_ + _) + id _ :: Int  =  LT
_ :: Int `compare` head _ + x :: Int  =  LT
_ :: Int `compare` head _ + 0 :: Int  =  LT
_ :: Int `compare` head _ + id _ :: Int  =  LT
_ :: Int `compare` ord _ + x :: Int  =  LT
_ :: Int `compare` ord _ + 0 :: Int  =  LT
_ :: Int `compare` ord _ + id _ :: Int  =  LT
_ :: Int `compare` x * x :: Int  =  LT
_ :: Int `compare` x * 0 :: Int  =  LT
_ :: Int `compare` x * id _ :: Int  =  LT
_ :: Int `compare` 0 * x :: Int  =  LT
_ :: Int `compare` 0 * 0 :: Int  =  LT
_ :: Int `compare` 0 * id _ :: Int  =  LT
_ :: Int `compare` id _ * x :: Int  =  LT
_ :: Int `compare` id _ * 0 :: Int  =  LT
_ :: Int `compare` id _ * id _ :: Int  =  LT
_ :: Int `compare` g x :: Int  =  LT
_ :: Int `compare` g 0 :: Int  =  LT
_ :: Int `compare` g (id _) :: Int  =  LT
_ :: Int `compare` z + _ :: Int  =  LT
_ :: Int `compare` (-1) + _ :: Int  =  LT
_ :: Int `compare` id y + _ :: Int  =  LT
_ :: Int `compare` id 1 + _ :: Int  =  LT
_ :: Int `compare` id (id x) + _ :: Int  =  LT
_ :: Int `compare` id (id 0) + _ :: Int  =  LT
_ :: Int `compare` id (id (id _)) + _ :: Int  =  LT
_ :: Int `compare` id (negate _) + _ :: Int  =  LT
_ :: Int `compare` id (abs _) + _ :: Int  =  LT
_ :: Int `compare` id (_ + _) + _ :: Int  =  LT
_ :: Int `compare` id (head _) + _ :: Int  =  LT
_ :: Int `compare` id (ord _) + _ :: Int  =  LT
_ :: Int `compare` negate x + _ :: Int  =  LT
_ :: Int `compare` negate 0 + _ :: Int  =  LT
_ :: Int `compare` negate (id _) + _ :: Int  =  LT
_ :: Int `compare` abs x + _ :: Int  =  LT
_ :: Int `compare` abs 0 + _ :: Int  =  LT
_ :: Int `compare` abs (id _) + _ :: Int  =  LT
_ :: Int `compare` (_ + x) + _ :: Int  =  LT
_ :: Int `compare` (_ + 0) + _ :: Int  =  LT
_ :: Int `compare` (_ + id _) + _ :: Int  =  LT
_ :: Int `compare` (x + _) + _ :: Int  =  LT
_ :: Int `compare` (0 + _) + _ :: Int  =  LT
_ :: Int `compare` (id _ + _) + _ :: Int  =  LT
_ :: Int `compare` _ * _ + _ :: Int  =  LT
_ :: Int `compare` f _ + _ :: Int  =  LT
_ :: Int `compare` head xs + _ :: Int  =  LT
_ :: Int `compare` head [] + _ :: Int  =  LT
_ :: Int `compare` head (_:_) + _ :: Int  =  LT
_ :: Int `compare` ord c + _ :: Int  =  LT
_ :: Int `compare` ord 'a' + _ :: Int  =  LT
_ :: Int `compare` y * _ :: Int  =  LT
_ :: Int `compare` 1 * _ :: Int  =  LT
_ :: Int `compare` id x * _ :: Int  =  LT
_ :: Int `compare` id 0 * _ :: Int  =  LT
_ :: Int `compare` id (id _) * _ :: Int  =  LT
_ :: Int `compare` negate _ * _ :: Int  =  LT
_ :: Int `compare` abs _ * _ :: Int  =  LT
_ :: Int `compare` (_ + _) * _ :: Int  =  LT
_ :: Int `compare` head _ * _ :: Int  =  LT
_ :: Int `compare` ord _ * _ :: Int  =  LT
_ :: Int `compare` h _ :: Int  =  LT
_ :: Int `compare` head zs :: Int  =  LT
_ :: Int `compare` head [0,0] :: Int  =  LT
_ :: Int `compare` head [1] :: Int  =  LT
_ :: Int `compare` head (_:ys) :: Int  =  LT
_ :: Int `compare` head [_,0] :: Int  =  LT
_ :: Int `compare` head (_:_:xs) :: Int  =  LT
_ :: Int `compare` head [_,_] :: Int  =  LT
_ :: Int `compare` head (_:_:_:_) :: Int  =  LT
_ :: Int `compare` head (_:x:_) :: Int  =  LT
_ :: Int `compare` head (_:0:_) :: Int  =  LT
_ :: Int `compare` head (_:id _:_) :: Int  =  LT
_ :: Int `compare` head (_:tail _) :: Int  =  LT
_ :: Int `compare` head (_:(_ ++ _)) :: Int  =  LT
_ :: Int `compare` head (x:xs) :: Int  =  LT
_ :: Int `compare` head [x] :: Int  =  LT
_ :: Int `compare` head (x:_:_) :: Int  =  LT
_ :: Int `compare` head (0:xs) :: Int  =  LT
_ :: Int `compare` head [0] :: Int  =  LT
_ :: Int `compare` head (0:_:_) :: Int  =  LT
_ :: Int `compare` head (id _:xs) :: Int  =  LT
_ :: Int `compare` head [id _] :: Int  =  LT
_ :: Int `compare` head (id _:_:_) :: Int  =  LT
_ :: Int `compare` head (y:_) :: Int  =  LT
_ :: Int `compare` head (1:_) :: Int  =  LT
_ :: Int `compare` head (id x:_) :: Int  =  LT
_ :: Int `compare` head (id 0:_) :: Int  =  LT
_ :: Int `compare` head (id (id _):_) :: Int  =  LT
_ :: Int `compare` head (negate _:_) :: Int  =  LT
_ :: Int `compare` head (abs _:_) :: Int  =  LT
_ :: Int `compare` head (_ + _:_) :: Int  =  LT
_ :: Int `compare` head (head _:_) :: Int  =  LT
_ :: Int `compare` head (ord _:_) :: Int  =  LT
_ :: Int `compare` head (tail xs) :: Int  =  LT
_ :: Int `compare` head (tail []) :: Int  =  LT
_ :: Int `compare` head (tail (_:_)) :: Int  =  LT
_ :: Int `compare` head (_ ++ xs) :: Int  =  LT
_ :: Int `compare` head (_ ++ []) :: Int  =  LT
_ :: Int `compare` head (_ ++ (_:_)) :: Int  =  LT
_ :: Int `compare` head (xs ++ _) :: Int  =  LT
_ :: Int `compare` head ([] ++ _) :: Int  =  LT
_ :: Int `compare` head ((_:_) ++ _) :: Int  =  LT
_ :: Int `compare` head (sort _) :: Int  =  LT
_ :: Int `compare` head (insert _ _) :: Int  =  LT
_ :: Int `compare` ord e :: Int  =  LT
_ :: Int `compare` ord 'b' :: Int  =  LT
_ :: Int `compare` p' :: Bool  =  GT
_ :: Int `compare` not r :: Bool  =  LT
_ :: Int `compare` not (not q) :: Bool  =  LT
_ :: Int `compare` not (not (not p)) :: Bool  =  LT
_ :: Int `compare` not (not (not False)) :: Bool  =  LT
_ :: Int `compare` not (not (not True)) :: Bool  =  LT
_ :: Int `compare` not (not (not (not _))) :: Bool  =  LT
_ :: Int `compare` not (not (_ || _)) :: Bool  =  LT
_ :: Int `compare` not (_ || p) :: Bool  =  LT
_ :: Int `compare` not (_ || False) :: Bool  =  LT
_ :: Int `compare` not (_ || True) :: Bool  =  LT
_ :: Int `compare` not (_ || not _) :: Bool  =  LT
_ :: Int `compare` not (p || _) :: Bool  =  LT
_ :: Int `compare` not (False || _) :: Bool  =  LT
_ :: Int `compare` not (True || _) :: Bool  =  LT
_ :: Int `compare` not (not _ || _) :: Bool  =  LT
_ :: Int `compare` not (_ && _) :: Bool  =  LT
_ :: Int `compare` not (_ == _) :: Bool  =  LT
_ :: Int `compare` not (_ == _) :: Bool  =  LT
_ :: Int `compare` not (odd _) :: Bool  =  LT
_ :: Int `compare` not (even _) :: Bool  =  LT
_ :: Int `compare` not (elem _ _) :: Bool  =  LT
_ :: Int `compare` _ || q :: Bool  =  LT
_ :: Int `compare` _ || not p :: Bool  =  LT
_ :: Int `compare` _ || not False :: Bool  =  LT
_ :: Int `compare` _ || not True :: Bool  =  LT
_ :: Int `compare` _ || not (not _) :: Bool  =  LT
_ :: Int `compare` _ || (_ || _) :: Bool  =  LT
_ :: Int `compare` p || p :: Bool  =  LT
_ :: Int `compare` p || False :: Bool  =  LT
_ :: Int `compare` p || True :: Bool  =  LT
_ :: Int `compare` p || not _ :: Bool  =  LT
_ :: Int `compare` False || p :: Bool  =  LT
_ :: Int `compare` False || False :: Bool  =  LT
_ :: Int `compare` False || True :: Bool  =  LT
_ :: Int `compare` False || not _ :: Bool  =  LT
_ :: Int `compare` True || p :: Bool  =  LT
_ :: Int `compare` True || False :: Bool  =  LT
_ :: Int `compare` True || True :: Bool  =  LT
_ :: Int `compare` True || not _ :: Bool  =  LT
_ :: Int `compare` not _ || p :: Bool  =  LT
_ :: Int `compare` not _ || False :: Bool  =  LT
_ :: Int `compare` not _ || True :: Bool  =  LT
_ :: Int `compare` not _ || not _ :: Bool  =  LT
_ :: Int `compare` _ && p :: Bool  =  LT
_ :: Int `compare` _ && False :: Bool  =  LT
_ :: Int `compare` _ && True :: Bool  =  LT
_ :: Int `compare` _ && not _ :: Bool  =  LT
_ :: Int `compare` q || _ :: Bool  =  LT
_ :: Int `compare` not p || _ :: Bool  =  LT
_ :: Int `compare` not False || _ :: Bool  =  LT
_ :: Int `compare` not True || _ :: Bool  =  LT
_ :: Int `compare` not (not _) || _ :: Bool  =  LT
_ :: Int `compare` (_ || _) || _ :: Bool  =  LT
_ :: Int `compare` p && _ :: Bool  =  LT
_ :: Int `compare` False && _ :: Bool  =  LT
_ :: Int `compare` True && _ :: Bool  =  LT
_ :: Int `compare` not _ && _ :: Bool  =  LT
_ :: Int `compare` _ ==> _ :: Bool  =  LT
_ :: Int `compare` _ == x :: Bool  =  LT
_ :: Int `compare` _ == 0 :: Bool  =  LT
_ :: Int `compare` _ == id _ :: Bool  =  LT
_ :: Int `compare` x == _ :: Bool  =  LT
_ :: Int `compare` 0 == _ :: Bool  =  LT
_ :: Int `compare` id _ == _ :: Bool  =  LT
_ :: Int `compare` _ == p :: Bool  =  LT
_ :: Int `compare` _ == False :: Bool  =  LT
_ :: Int `compare` _ == True :: Bool  =  LT
_ :: Int `compare` _ == not _ :: Bool  =  LT
_ :: Int `compare` p == _ :: Bool  =  LT
_ :: Int `compare` False == _ :: Bool  =  LT
_ :: Int `compare` True == _ :: Bool  =  LT
_ :: Int `compare` not _ == _ :: Bool  =  LT
_ :: Int `compare` _ <= _ :: Bool  =  LT
_ :: Int `compare` _ <= _ :: Bool  =  LT
_ :: Int `compare` odd x :: Bool  =  LT
_ :: Int `compare` odd 0 :: Bool  =  LT
_ :: Int `compare` odd (id _) :: Bool  =  LT
_ :: Int `compare` even x :: Bool  =  LT
_ :: Int `compare` even 0 :: Bool  =  LT
_ :: Int `compare` even (id _) :: Bool  =  LT
_ :: Int `compare` elem _ xs :: Bool  =  LT
_ :: Int `compare` elem _ [] :: Bool  =  LT
_ :: Int `compare` elem _ (_:_) :: Bool  =  LT
_ :: Int `compare` elem x _ :: Bool  =  LT
_ :: Int `compare` elem 0 _ :: Bool  =  LT
_ :: Int `compare` elem (id _) _ :: Bool  =  LT
_ :: Int `compare` c' :: Char  =  GT
_ :: Int `compare` 'A' :: Char  =  LT
_ :: Int `compare` xs' :: [Int]  =  LT
_ :: Int `compare` [0,0,0] :: [Int]  =  LT
_ :: Int `compare` [0,1] :: [Int]  =  LT
_ :: Int `compare` [1,0] :: [Int]  =  LT
_ :: Int `compare` [-1] :: [Int]  =  LT
_ :: Int `compare` _:zs :: [Int]  =  LT
_ :: Int `compare` [_,0,0] :: [Int]  =  LT
_ :: Int `compare` [_,1] :: [Int]  =  LT
_ :: Int `compare` _:_:ys :: [Int]  =  LT
_ :: Int `compare` [_,_,0] :: [Int]  =  LT
_ :: Int `compare` _:_:_:xs :: [Int]  =  LT
_ :: Int `compare` [_,_,_] :: [Int]  =  LT
_ :: Int `compare` _:_:_:_:_ :: [Int]  =  LT
_ :: Int `compare` _:_:x:_ :: [Int]  =  LT
_ :: Int `compare` _:_:0:_ :: [Int]  =  LT
_ :: Int `compare` _:_:id _:_ :: [Int]  =  LT
_ :: Int `compare` _:_:tail _ :: [Int]  =  LT
_ :: Int `compare` _:_:(_ ++ _) :: [Int]  =  LT
_ :: Int `compare` _:x:xs :: [Int]  =  LT
_ :: Int `compare` [_,x] :: [Int]  =  LT
_ :: Int `compare` _:x:_:_ :: [Int]  =  LT
_ :: Int `compare` _:0:xs :: [Int]  =  LT
_ :: Int `compare` [_,0] :: [Int]  =  LT
_ :: Int `compare` _:0:_:_ :: [Int]  =  LT
_ :: Int `compare` _:id _:xs :: [Int]  =  LT
_ :: Int `compare` [_,id _] :: [Int]  =  LT
_ :: Int `compare` _:id _:_:_ :: [Int]  =  LT
_ :: Int `compare` _:y:_ :: [Int]  =  LT
_ :: Int `compare` _:1:_ :: [Int]  =  LT
_ :: Int `compare` _:id x:_ :: [Int]  =  LT
_ :: Int `compare` _:id 0:_ :: [Int]  =  LT
_ :: Int `compare` _:id (id _):_ :: [Int]  =  LT
_ :: Int `compare` _:negate _:_ :: [Int]  =  LT
_ :: Int `compare` _:abs _:_ :: [Int]  =  LT
_ :: Int `compare` _:_ + _:_ :: [Int]  =  LT
_ :: Int `compare` _:head _:_ :: [Int]  =  LT
_ :: Int `compare` _:ord _:_ :: [Int]  =  LT
_ :: Int `compare` _:tail xs :: [Int]  =  LT
_ :: Int `compare` _:tail [] :: [Int]  =  LT
_ :: Int `compare` _:tail (_:_) :: [Int]  =  LT
_ :: Int `compare` _:(_ ++ xs) :: [Int]  =  LT
_ :: Int `compare` _:(_ ++ []) :: [Int]  =  LT
_ :: Int `compare` _:(_ ++ (_:_)) :: [Int]  =  LT
_ :: Int `compare` _:(xs ++ _) :: [Int]  =  LT
_ :: Int `compare` _:([] ++ _) :: [Int]  =  LT
_ :: Int `compare` _:((_:_) ++ _) :: [Int]  =  LT
_ :: Int `compare` _:sort _ :: [Int]  =  LT
_ :: Int `compare` _:insert _ _ :: [Int]  =  LT
_ :: Int `compare` x:ys :: [Int]  =  LT
_ :: Int `compare` [x,0] :: [Int]  =  LT
_ :: Int `compare` x:_:xs :: [Int]  =  LT
_ :: Int `compare` [x,_] :: [Int]  =  LT
_ :: Int `compare` x:_:_:_ :: [Int]  =  LT
_ :: Int `compare` x:x:_ :: [Int]  =  LT
_ :: Int `compare` x:0:_ :: [Int]  =  LT
_ :: Int `compare` x:id _:_ :: [Int]  =  LT
_ :: Int `compare` x:tail _ :: [Int]  =  LT
_ :: Int `compare` x:(_ ++ _) :: [Int]  =  LT
_ :: Int `compare` 0:ys :: [Int]  =  LT
_ :: Int `compare` [0,0] :: [Int]  =  LT
_ :: Int `compare` 0:_:xs :: [Int]  =  LT
_ :: Int `compare` [0,_] :: [Int]  =  LT
_ :: Int `compare` 0:_:_:_ :: [Int]  =  LT
_ :: Int `compare` 0:x:_ :: [Int]  =  LT
_ :: Int `compare` 0:0:_ :: [Int]  =  LT
_ :: Int `compare` 0:id _:_ :: [Int]  =  LT
_ :: Int `compare` 0:tail _ :: [Int]  =  LT
_ :: Int `compare` 0:(_ ++ _) :: [Int]  =  LT
_ :: Int `compare` id _:ys :: [Int]  =  LT
_ :: Int `compare` [id _,0] :: [Int]  =  LT
_ :: Int `compare` id _:_:xs :: [Int]  =  LT
_ :: Int `compare` [id _,_] :: [Int]  =  LT
_ :: Int `compare` id _:_:_:_ :: [Int]  =  LT
_ :: Int `compare` id _:x:_ :: [Int]  =  LT
_ :: Int `compare` id _:0:_ :: [Int]  =  LT
_ :: Int `compare` id _:id _:_ :: [Int]  =  LT
_ :: Int `compare` id _:tail _ :: [Int]  =  LT
_ :: Int `compare` id _:(_ ++ _) :: [Int]  =  LT
_ :: Int `compare` y:xs :: [Int]  =  LT
_ :: Int `compare` [y] :: [Int]  =  LT
_ :: Int `compare` y:_:_ :: [Int]  =  LT
_ :: Int `compare` 1:xs :: [Int]  =  LT
_ :: Int `compare` [1] :: [Int]  =  LT
_ :: Int `compare` 1:_:_ :: [Int]  =  LT
_ :: Int `compare` id x:xs :: [Int]  =  LT
_ :: Int `compare` [id x] :: [Int]  =  LT
_ :: Int `compare` id x:_:_ :: [Int]  =  LT
_ :: Int `compare` id 0:xs :: [Int]  =  LT
_ :: Int `compare` [id 0] :: [Int]  =  LT
_ :: Int `compare` id 0:_:_ :: [Int]  =  LT
_ :: Int `compare` id (id _):xs :: [Int]  =  LT
_ :: Int `compare` [id (id _)] :: [Int]  =  LT
_ :: Int `compare` id (id _):_:_ :: [Int]  =  LT
_ :: Int `compare` negate _:xs :: [Int]  =  LT
_ :: Int `compare` [negate _] :: [Int]  =  LT
_ :: Int `compare` negate _:_:_ :: [Int]  =  LT
_ :: Int `compare` abs _:xs :: [Int]  =  LT
_ :: Int `compare` [abs _] :: [Int]  =  LT
_ :: Int `compare` abs _:_:_ :: [Int]  =  LT
_ :: Int `compare` _ + _:xs :: [Int]  =  LT
_ :: Int `compare` [_ + _] :: [Int]  =  LT
_ :: Int `compare` _ + _:_:_ :: [Int]  =  LT
_ :: Int `compare` head _:xs :: [Int]  =  LT
_ :: Int `compare` [head _] :: [Int]  =  LT
_ :: Int `compare` head _:_:_ :: [Int]  =  LT
_ :: Int `compare` ord _:xs :: [Int]  =  LT
_ :: Int `compare` [ord _] :: [Int]  =  LT
_ :: Int `compare` ord _:_:_ :: [Int]  =  LT
_ :: Int `compare` z:_ :: [Int]  =  LT
_ :: Int `compare` (-1):_ :: [Int]  =  LT
_ :: Int `compare` id y:_ :: [Int]  =  LT
_ :: Int `compare` id 1:_ :: [Int]  =  LT
_ :: Int `compare` id (id x):_ :: [Int]  =  LT
_ :: Int `compare` id (id 0):_ :: [Int]  =  LT
_ :: Int `compare` id (id (id _)):_ :: [Int]  =  LT
_ :: Int `compare` id (negate _):_ :: [Int]  =  LT
_ :: Int `compare` id (abs _):_ :: [Int]  =  LT
_ :: Int `compare` id (_ + _):_ :: [Int]  =  LT
_ :: Int `compare` id (head _):_ :: [Int]  =  LT
_ :: Int `compare` id (ord _):_ :: [Int]  =  LT
_ :: Int `compare` negate x:_ :: [Int]  =  LT
_ :: Int `compare` negate 0:_ :: [Int]  =  LT
_ :: Int `compare` negate (id _):_ :: [Int]  =  LT
_ :: Int `compare` abs x:_ :: [Int]  =  LT
_ :: Int `compare` abs 0:_ :: [Int]  =  LT
_ :: Int `compare` abs (id _):_ :: [Int]  =  LT
_ :: Int `compare` _ + x:_ :: [Int]  =  LT
_ :: Int `compare` _ + 0:_ :: [Int]  =  LT
_ :: Int `compare` _ + id _:_ :: [Int]  =  LT
_ :: Int `compare` x + _:_ :: [Int]  =  LT
_ :: Int `compare` 0 + _:_ :: [Int]  =  LT
_ :: Int `compare` id _ + _:_ :: [Int]  =  LT
_ :: Int `compare` _ * _:_ :: [Int]  =  LT
_ :: Int `compare` f _:_ :: [Int]  =  LT
_ :: Int `compare` head xs:_ :: [Int]  =  LT
_ :: Int `compare` head []:_ :: [Int]  =  LT
_ :: Int `compare` head (_:_):_ :: [Int]  =  LT
_ :: Int `compare` ord c:_ :: [Int]  =  LT
_ :: Int `compare` ord 'a':_ :: [Int]  =  LT
_ :: Int `compare` tail ys :: [Int]  =  LT
_ :: Int `compare` tail [0] :: [Int]  =  LT
_ :: Int `compare` tail (_:xs) :: [Int]  =  LT
_ :: Int `compare` tail [_] :: [Int]  =  LT
_ :: Int `compare` tail (_:_:_) :: [Int]  =  LT
_ :: Int `compare` tail (x:_) :: [Int]  =  LT
_ :: Int `compare` tail (0:_) :: [Int]  =  LT
_ :: Int `compare` tail (id _:_) :: [Int]  =  LT
_ :: Int `compare` tail (tail _) :: [Int]  =  LT
_ :: Int `compare` tail (_ ++ _) :: [Int]  =  LT
_ :: Int `compare` _ ++ ys :: [Int]  =  LT
_ :: Int `compare` _ ++ [0] :: [Int]  =  LT
_ :: Int `compare` _ ++ (_:xs) :: [Int]  =  LT
_ :: Int `compare` _ ++ [_] :: [Int]  =  LT
_ :: Int `compare` _ ++ (_:_:_) :: [Int]  =  LT
_ :: Int `compare` _ ++ (x:_) :: [Int]  =  LT
_ :: Int `compare` _ ++ (0:_) :: [Int]  =  LT
_ :: Int `compare` _ ++ (id _:_) :: [Int]  =  LT
_ :: Int `compare` _ ++ tail _ :: [Int]  =  LT
_ :: Int `compare` _ ++ (_ ++ _) :: [Int]  =  LT
_ :: Int `compare` xs ++ xs :: [Int]  =  LT
_ :: Int `compare` xs ++ [] :: [Int]  =  LT
_ :: Int `compare` xs ++ (_:_) :: [Int]  =  LT
_ :: Int `compare` [] ++ xs :: [Int]  =  LT
_ :: Int `compare` [] ++ [] :: [Int]  =  LT
_ :: Int `compare` [] ++ (_:_) :: [Int]  =  LT
_ :: Int `compare` (_:_) ++ xs :: [Int]  =  LT
_ :: Int `compare` (_:_) ++ [] :: [Int]  =  LT
_ :: Int `compare` (_:_) ++ (_:_) :: [Int]  =  LT
_ :: Int `compare` ys ++ _ :: [Int]  =  LT
_ :: Int `compare` [0] ++ _ :: [Int]  =  LT
_ :: Int `compare` (_:xs) ++ _ :: [Int]  =  LT
_ :: Int `compare` [_] ++ _ :: [Int]  =  LT
_ :: Int `compare` (_:_:_) ++ _ :: [Int]  =  LT
_ :: Int `compare` (x:_) ++ _ :: [Int]  =  LT
_ :: Int `compare` (0:_) ++ _ :: [Int]  =  LT
_ :: Int `compare` (id _:_) ++ _ :: [Int]  =  LT
_ :: Int `compare` tail _ ++ _ :: [Int]  =  LT
_ :: Int `compare` (_ ++ _) ++ _ :: [Int]  =  LT
_ :: Int `compare` sort xs :: [Int]  =  LT
_ :: Int `compare` sort [] :: [Int]  =  LT
_ :: Int `compare` sort (_:_) :: [Int]  =  LT
_ :: Int `compare` insert _ xs :: [Int]  =  LT
_ :: Int `compare` insert _ [] :: [Int]  =  LT
_ :: Int `compare` insert _ (_:_) :: [Int]  =  LT
_ :: Int `compare` insert x _ :: [Int]  =  LT
_ :: Int `compare` insert 0 _ :: [Int]  =  LT
_ :: Int `compare` insert (id _) _ :: [Int]  =  LT
_ :: Int `compare` (y +) :: Int -> Int  =  LT
_ :: Int `compare` (1 +) :: Int -> Int  =  LT
_ :: Int `compare` (id x +) :: Int -> Int  =  LT
_ :: Int `compare` (id 0 +) :: Int -> Int  =  LT
_ :: Int `compare` (id (id _) +) :: Int -> Int  =  LT
_ :: Int `compare` (negate _ +) :: Int -> Int  =  LT
_ :: Int `compare` (abs _ +) :: Int -> Int  =  LT
_ :: Int `compare` ((_ + _) +) :: Int -> Int  =  LT
_ :: Int `compare` (head _ +) :: Int -> Int  =  LT
_ :: Int `compare` (ord _ +) :: Int -> Int  =  LT
_ :: Int `compare` (x *) :: Int -> Int  =  LT
_ :: Int `compare` (0 *) :: Int -> Int  =  LT
_ :: Int `compare` (id _ *) :: Int -> Int  =  LT
_ :: Int `compare` g :: Int -> Int  =  LT
_ :: Int `compare` (p ||) :: Bool -> Bool  =  LT
_ :: Int `compare` (False ||) :: Bool -> Bool  =  LT
_ :: Int `compare` (True ||) :: Bool -> Bool  =  LT
_ :: Int `compare` (not _ ||) :: Bool -> Bool  =  LT
_ :: Int `compare` (_ &&) :: Bool -> Bool  =  LT
_ :: Int `compare` (==>) :: Bool -> Bool -> Bool  =  LT
x :: Int `compare` x' :: Int  =  LT
x :: Int `compare` 2 :: Int  =  LT
x :: Int `compare` id z :: Int  =  LT
x :: Int `compare` id (-1) :: Int  =  LT
x :: Int `compare` id (id y) :: Int  =  LT
x :: Int `compare` id (id 1) :: Int  =  LT
x :: Int `compare` id (id (id x)) :: Int  =  LT
x :: Int `compare` id (id (id 0)) :: Int  =  LT
x :: Int `compare` id (id (id (id _))) :: Int  =  LT
x :: Int `compare` id (id (negate _)) :: Int  =  LT
x :: Int `compare` id (id (abs _)) :: Int  =  LT
x :: Int `compare` id (id (_ + _)) :: Int  =  LT
x :: Int `compare` id (id (head _)) :: Int  =  LT
x :: Int `compare` id (id (ord _)) :: Int  =  LT
x :: Int `compare` id (negate x) :: Int  =  LT
x :: Int `compare` id (negate 0) :: Int  =  LT
x :: Int `compare` id (negate (id _)) :: Int  =  LT
x :: Int `compare` id (abs x) :: Int  =  LT
x :: Int `compare` id (abs 0) :: Int  =  LT
x :: Int `compare` id (abs (id _)) :: Int  =  LT
x :: Int `compare` id (_ + x) :: Int  =  LT
x :: Int `compare` id (_ + 0) :: Int  =  LT
x :: Int `compare` id (_ + id _) :: Int  =  LT
x :: Int `compare` id (x + _) :: Int  =  LT
x :: Int `compare` id (0 + _) :: Int  =  LT
x :: Int `compare` id (id _ + _) :: Int  =  LT
x :: Int `compare` id (_ * _) :: Int  =  LT
x :: Int `compare` id (f _) :: Int  =  LT
x :: Int `compare` id (head xs) :: Int  =  LT
x :: Int `compare` id (head []) :: Int  =  LT
x :: Int `compare` id (head (_:_)) :: Int  =  LT
x :: Int `compare` id (ord c) :: Int  =  LT
x :: Int `compare` id (ord 'a') :: Int  =  LT
x :: Int `compare` negate y :: Int  =  LT
x :: Int `compare` negate 1 :: Int  =  LT
x :: Int `compare` negate (id x) :: Int  =  LT
x :: Int `compare` negate (id 0) :: Int  =  LT
x :: Int `compare` negate (id (id _)) :: Int  =  LT
x :: Int `compare` negate (negate _) :: Int  =  LT
x :: Int `compare` negate (abs _) :: Int  =  LT
x :: Int `compare` negate (_ + _) :: Int  =  LT
x :: Int `compare` negate (head _) :: Int  =  LT
x :: Int `compare` negate (ord _) :: Int  =  LT
x :: Int `compare` abs y :: Int  =  LT
x :: Int `compare` abs 1 :: Int  =  LT
x :: Int `compare` abs (id x) :: Int  =  LT
x :: Int `compare` abs (id 0) :: Int  =  LT
x :: Int `compare` abs (id (id _)) :: Int  =  LT
x :: Int `compare` abs (negate _) :: Int  =  LT
x :: Int `compare` abs (abs _) :: Int  =  LT
x :: Int `compare` abs (_ + _) :: Int  =  LT
x :: Int `compare` abs (head _) :: Int  =  LT
x :: Int `compare` abs (ord _) :: Int  =  LT
x :: Int `compare` _ + y :: Int  =  LT
x :: Int `compare` _ + 1 :: Int  =  LT
x :: Int `compare` _ + id x :: Int  =  LT
x :: Int `compare` _ + id 0 :: Int  =  LT
x :: Int `compare` _ + id (id _) :: Int  =  LT
x :: Int `compare` _ + negate _ :: Int  =  LT
x :: Int `compare` _ + abs _ :: Int  =  LT
x :: Int `compare` _ + (_ + _) :: Int  =  LT
x :: Int `compare` _ + head _ :: Int  =  LT
x :: Int `compare` _ + ord _ :: Int  =  LT
x :: Int `compare` x + x :: Int  =  LT
x :: Int `compare` x + 0 :: Int  =  LT
x :: Int `compare` x + id _ :: Int  =  LT
x :: Int `compare` 0 + x :: Int  =  LT
x :: Int `compare` 0 + 0 :: Int  =  LT
x :: Int `compare` 0 + id _ :: Int  =  LT
x :: Int `compare` id _ + x :: Int  =  LT
x :: Int `compare` id _ + 0 :: Int  =  LT
x :: Int `compare` id _ + id _ :: Int  =  LT
x :: Int `compare` _ * x :: Int  =  LT
x :: Int `compare` _ * 0 :: Int  =  LT
x :: Int `compare` _ * id _ :: Int  =  LT
x :: Int `compare` f x :: Int  =  LT
x :: Int `compare` f 0 :: Int  =  LT
x :: Int `compare` f (id _) :: Int  =  LT
x :: Int `compare` y + _ :: Int  =  LT
x :: Int `compare` 1 + _ :: Int  =  LT
x :: Int `compare` id x + _ :: Int  =  LT
x :: Int `compare` id 0 + _ :: Int  =  LT
x :: Int `compare` id (id _) + _ :: Int  =  LT
x :: Int `compare` negate _ + _ :: Int  =  LT
x :: Int `compare` abs _ + _ :: Int  =  LT
x :: Int `compare` (_ + _) + _ :: Int  =  LT
x :: Int `compare` head _ + _ :: Int  =  LT
x :: Int `compare` ord _ + _ :: Int  =  LT
x :: Int `compare` x * _ :: Int  =  LT
x :: Int `compare` 0 * _ :: Int  =  LT
x :: Int `compare` id _ * _ :: Int  =  LT
x :: Int `compare` g _ :: Int  =  LT
x :: Int `compare` head ys :: Int  =  LT
x :: Int `compare` head [0] :: Int  =  LT
x :: Int `compare` head (_:xs) :: Int  =  LT
x :: Int `compare` head [_] :: Int  =  LT
x :: Int `compare` head (_:_:_) :: Int  =  LT
x :: Int `compare` head (x:_) :: Int  =  LT
x :: Int `compare` head (0:_) :: Int  =  LT
x :: Int `compare` head (id _:_) :: Int  =  LT
x :: Int `compare` head (tail _) :: Int  =  LT
x :: Int `compare` head (_ ++ _) :: Int  =  LT
x :: Int `compare` ord d :: Int  =  LT
x :: Int `compare` ord ' ' :: Int  =  LT
x :: Int `compare` r :: Bool  =  GT
x :: Int `compare` not q :: Bool  =  LT
x :: Int `compare` not (not p) :: Bool  =  LT
x :: Int `compare` not (not False) :: Bool  =  LT
x :: Int `compare` not (not True) :: Bool  =  LT
x :: Int `compare` not (not (not _)) :: Bool  =  LT
x :: Int `compare` not (_ || _) :: Bool  =  LT
x :: Int `compare` _ || p :: Bool  =  LT
x :: Int `compare` _ || False :: Bool  =  LT
x :: Int `compare` _ || True :: Bool  =  LT
x :: Int `compare` _ || not _ :: Bool  =  LT
x :: Int `compare` p || _ :: Bool  =  LT
x :: Int `compare` False || _ :: Bool  =  LT
x :: Int `compare` True || _ :: Bool  =  LT
x :: Int `compare` not _ || _ :: Bool  =  LT
x :: Int `compare` _ && _ :: Bool  =  LT
x :: Int `compare` _ == _ :: Bool  =  LT
x :: Int `compare` _ == _ :: Bool  =  LT
x :: Int `compare` odd _ :: Bool  =  LT
x :: Int `compare` even _ :: Bool  =  LT
x :: Int `compare` elem _ _ :: Bool  =  LT
x :: Int `compare` e :: Char  =  GT
x :: Int `compare` 'b' :: Char  =  LT
x :: Int `compare` zs :: [Int]  =  LT
x :: Int `compare` [0,0] :: [Int]  =  LT
x :: Int `compare` [1] :: [Int]  =  LT
x :: Int `compare` _:ys :: [Int]  =  LT
x :: Int `compare` [_,0] :: [Int]  =  LT
x :: Int `compare` _:_:xs :: [Int]  =  LT
x :: Int `compare` [_,_] :: [Int]  =  LT
x :: Int `compare` _:_:_:_ :: [Int]  =  LT
x :: Int `compare` _:x:_ :: [Int]  =  LT
x :: Int `compare` _:0:_ :: [Int]  =  LT
x :: Int `compare` _:id _:_ :: [Int]  =  LT
x :: Int `compare` _:tail _ :: [Int]  =  LT
x :: Int `compare` _:(_ ++ _) :: [Int]  =  LT
x :: Int `compare` x:xs :: [Int]  =  LT
x :: Int `compare` [x] :: [Int]  =  LT
x :: Int `compare` x:_:_ :: [Int]  =  LT
x :: Int `compare` 0:xs :: [Int]  =  LT
x :: Int `compare` [0] :: [Int]  =  LT
x :: Int `compare` 0:_:_ :: [Int]  =  LT
x :: Int `compare` id _:xs :: [Int]  =  LT
x :: Int `compare` [id _] :: [Int]  =  LT
x :: Int `compare` id _:_:_ :: [Int]  =  LT
x :: Int `compare` y:_ :: [Int]  =  LT
x :: Int `compare` 1:_ :: [Int]  =  LT
x :: Int `compare` id x:_ :: [Int]  =  LT
x :: Int `compare` id 0:_ :: [Int]  =  LT
x :: Int `compare` id (id _):_ :: [Int]  =  LT
x :: Int `compare` negate _:_ :: [Int]  =  LT
x :: Int `compare` abs _:_ :: [Int]  =  LT
x :: Int `compare` _ + _:_ :: [Int]  =  LT
x :: Int `compare` head _:_ :: [Int]  =  LT
x :: Int `compare` ord _:_ :: [Int]  =  LT
x :: Int `compare` tail xs :: [Int]  =  LT
x :: Int `compare` tail [] :: [Int]  =  LT
x :: Int `compare` tail (_:_) :: [Int]  =  LT
x :: Int `compare` _ ++ xs :: [Int]  =  LT
x :: Int `compare` _ ++ [] :: [Int]  =  LT
x :: Int `compare` _ ++ (_:_) :: [Int]  =  LT
x :: Int `compare` xs ++ _ :: [Int]  =  LT
x :: Int `compare` [] ++ _ :: [Int]  =  LT
x :: Int `compare` (_:_) ++ _ :: [Int]  =  LT
x :: Int `compare` sort _ :: [Int]  =  LT
x :: Int `compare` insert _ _ :: [Int]  =  LT
x :: Int `compare` (x +) :: Int -> Int  =  LT
x :: Int `compare` (0 +) :: Int -> Int  =  LT
x :: Int `compare` (id _ +) :: Int -> Int  =  LT
x :: Int `compare` (_ *) :: Int -> Int  =  LT
x :: Int `compare` f :: Int -> Int  =  LT
x :: Int `compare` (_ ||) :: Bool -> Bool  =  LT
x :: Int `compare` (&&) :: Bool -> Bool -> Bool  =  LT
0 :: Int `compare` x' :: Int  =  GT
0 :: Int `compare` 2 :: Int  =  LT
0 :: Int `compare` id z :: Int  =  LT
0 :: Int `compare` id (-1) :: Int  =  LT
0 :: Int `compare` id (id y) :: Int  =  LT
0 :: Int `compare` id (id 1) :: Int  =  LT
0 :: Int `compare` id (id (id x)) :: Int  =  LT
0 :: Int `compare` id (id (id 0)) :: Int  =  LT
0 :: Int `compare` id (id (id (id _))) :: Int  =  LT
0 :: Int `compare` id (id (negate _)) :: Int  =  LT
0 :: Int `compare` id (id (abs _)) :: Int  =  LT
0 :: Int `compare` id (id (_ + _)) :: Int  =  LT
0 :: Int `compare` id (id (head _)) :: Int  =  LT
0 :: Int `compare` id (id (ord _)) :: Int  =  LT
0 :: Int `compare` id (negate x) :: Int  =  LT
0 :: Int `compare` id (negate 0) :: Int  =  LT
0 :: Int `compare` id (negate (id _)) :: Int  =  LT
0 :: Int `compare` id (abs x) :: Int  =  LT
0 :: Int `compare` id (abs 0) :: Int  =  LT
0 :: Int `compare` id (abs (id _)) :: Int  =  LT
0 :: Int `compare` id (_ + x) :: Int  =  LT
0 :: Int `compare` id (_ + 0) :: Int  =  LT
0 :: Int `compare` id (_ + id _) :: Int  =  LT
0 :: Int `compare` id (x + _) :: Int  =  LT
0 :: Int `compare` id (0 + _) :: Int  =  LT
0 :: Int `compare` id (id _ + _) :: Int  =  LT
0 :: Int `compare` id (_ * _) :: Int  =  LT
0 :: Int `compare` id (f _) :: Int  =  LT
0 :: Int `compare` id (head xs) :: Int  =  LT
0 :: Int `compare` id (head []) :: Int  =  LT
0 :: Int `compare` id (head (_:_)) :: Int  =  LT
0 :: Int `compare` id (ord c) :: Int  =  LT
0 :: Int `compare` id (ord 'a') :: Int  =  LT
0 :: Int `compare` negate y :: Int  =  LT
0 :: Int `compare` negate 1 :: Int  =  LT
0 :: Int `compare` negate (id x) :: Int  =  LT
0 :: Int `compare` negate (id 0) :: Int  =  LT
0 :: Int `compare` negate (id (id _)) :: Int  =  LT
0 :: Int `compare` negate (negate _) :: Int  =  LT
0 :: Int `compare` negate (abs _) :: Int  =  LT
0 :: Int `compare` negate (_ + _) :: Int  =  LT
0 :: Int `compare` negate (head _) :: Int  =  LT
0 :: Int `compare` negate (ord _) :: Int  =  LT
0 :: Int `compare` abs y :: Int  =  LT
0 :: Int `compare` abs 1 :: Int  =  LT
0 :: Int `compare` abs (id x) :: Int  =  LT
0 :: Int `compare` abs (id 0) :: Int  =  LT
0 :: Int `compare` abs (id (id _)) :: Int  =  LT
0 :: Int `compare` abs (negate _) :: Int  =  LT
0 :: Int `compare` abs (abs _) :: Int  =  LT
0 :: Int `compare` abs (_ + _) :: Int  =  LT
0 :: Int `compare` abs (head _) :: Int  =  LT
0 :: Int `compare` abs (ord _) :: Int  =  LT
0 :: Int `compare` _ + y :: Int  =  LT
0 :: Int `compare` _ + 1 :: Int  =  LT
0 :: Int `compare` _ + id x :: Int  =  LT
0 :: Int `compare` _ + id 0 :: Int  =  LT
0 :: Int `compare` _ + id (id _) :: Int  =  LT
0 :: Int `compare` _ + negate _ :: Int  =  LT
0 :: Int `compare` _ + abs _ :: Int  =  LT
0 :: Int `compare` _ + (_ + _) :: Int  =  LT
0 :: Int `compare` _ + head _ :: Int  =  LT
0 :: Int `compare` _ + ord _ :: Int  =  LT
0 :: Int `compare` x + x :: Int  =  LT
0 :: Int `compare` x + 0 :: Int  =  LT
0 :: Int `compare` x + id _ :: Int  =  LT
0 :: Int `compare` 0 + x :: Int  =  LT
0 :: Int `compare` 0 + 0 :: Int  =  LT
0 :: Int `compare` 0 + id _ :: Int  =  LT
0 :: Int `compare` id _ + x :: Int  =  LT
0 :: Int `compare` id _ + 0 :: Int  =  LT
0 :: Int `compare` id _ + id _ :: Int  =  LT
0 :: Int `compare` _ * x :: Int  =  LT
0 :: Int `compare` _ * 0 :: Int  =  LT
0 :: Int `compare` _ * id _ :: Int  =  LT
0 :: Int `compare` f x :: Int  =  LT
0 :: Int `compare` f 0 :: Int  =  LT
0 :: Int `compare` f (id _) :: Int  =  LT
0 :: Int `compare` y + _ :: Int  =  LT
0 :: Int `compare` 1 + _ :: Int  =  LT
0 :: Int `compare` id x + _ :: Int  =  LT
0 :: Int `compare` id 0 + _ :: Int  =  LT
0 :: Int `compare` id (id _) + _ :: Int  =  LT
0 :: Int `compare` negate _ + _ :: Int  =  LT
0 :: Int `compare` abs _ + _ :: Int  =  LT
0 :: Int `compare` (_ + _) + _ :: Int  =  LT
0 :: Int `compare` head _ + _ :: Int  =  LT
0 :: Int `compare` ord _ + _ :: Int  =  LT
0 :: Int `compare` x * _ :: Int  =  LT
0 :: Int `compare` 0 * _ :: Int  =  LT
0 :: Int `compare` id _ * _ :: Int  =  LT
0 :: Int `compare` g _ :: Int  =  LT
0 :: Int `compare` head ys :: Int  =  LT
0 :: Int `compare` head [0] :: Int  =  LT
0 :: Int `compare` head (_:xs) :: Int  =  LT
0 :: Int `compare` head [_] :: Int  =  LT
0 :: Int `compare` head (_:_:_) :: Int  =  LT
0 :: Int `compare` head (x:_) :: Int  =  LT
0 :: Int `compare` head (0:_) :: Int  =  LT
0 :: Int `compare` head (id _:_) :: Int  =  LT
0 :: Int `compare` head (tail _) :: Int  =  LT
0 :: Int `compare` head (_ ++ _) :: Int  =  LT
0 :: Int `compare` ord d :: Int  =  LT
0 :: Int `compare` ord ' ' :: Int  =  LT
0 :: Int `compare` r :: Bool  =  GT
0 :: Int `compare` not q :: Bool  =  LT
0 :: Int `compare` not (not p) :: Bool  =  LT
0 :: Int `compare` not (not False) :: Bool  =  LT
0 :: Int `compare` not (not True) :: Bool  =  LT
0 :: Int `compare` not (not (not _)) :: Bool  =  LT
0 :: Int `compare` not (_ || _) :: Bool  =  LT
0 :: Int `compare` _ || p :: Bool  =  LT
0 :: Int `compare` _ || False :: Bool  =  LT
0 :: Int `compare` _ || True :: Bool  =  LT
0 :: Int `compare` _ || not _ :: Bool  =  LT
0 :: Int `compare` p || _ :: Bool  =  LT
0 :: Int `compare` False || _ :: Bool  =  LT
0 :: Int `compare` True || _ :: Bool  =  LT
0 :: Int `compare` not _ || _ :: Bool  =  LT
0 :: Int `compare` _ && _ :: Bool  =  LT
0 :: Int `compare` _ == _ :: Bool  =  LT
0 :: Int `compare` _ == _ :: Bool  =  LT
0 :: Int `compare` odd _ :: Bool  =  LT
0 :: Int `compare` even _ :: Bool  =  LT
0 :: Int `compare` elem _ _ :: Bool  =  LT
0 :: Int `compare` e :: Char  =  GT
0 :: Int `compare` 'b' :: Char  =  GT
0 :: Int `compare` zs :: [Int]  =  GT
0 :: Int `compare` [0,0] :: [Int]  =  LT
0 :: Int `compare` [1] :: [Int]  =  LT
0 :: Int `compare` _:ys :: [Int]  =  LT
0 :: Int `compare` [_,0] :: [Int]  =  LT
0 :: Int `compare` _:_:xs :: [Int]  =  LT
0 :: Int `compare` [_,_] :: [Int]  =  LT
0 :: Int `compare` _:_:_:_ :: [Int]  =  LT
0 :: Int `compare` _:x:_ :: [Int]  =  LT
0 :: Int `compare` _:0:_ :: [Int]  =  LT
0 :: Int `compare` _:id _:_ :: [Int]  =  LT
0 :: Int `compare` _:tail _ :: [Int]  =  LT
0 :: Int `compare` _:(_ ++ _) :: [Int]  =  LT
0 :: Int `compare` x:xs :: [Int]  =  LT
0 :: Int `compare` [x] :: [Int]  =  LT
0 :: Int `compare` x:_:_ :: [Int]  =  LT
0 :: Int `compare` 0:xs :: [Int]  =  LT
0 :: Int `compare` [0] :: [Int]  =  LT
0 :: Int `compare` 0:_:_ :: [Int]  =  LT
0 :: Int `compare` id _:xs :: [Int]  =  LT
0 :: Int `compare` [id _] :: [Int]  =  LT
0 :: Int `compare` id _:_:_ :: [Int]  =  LT
0 :: Int `compare` y:_ :: [Int]  =  LT
0 :: Int `compare` 1:_ :: [Int]  =  LT
0 :: Int `compare` id x:_ :: [Int]  =  LT
0 :: Int `compare` id 0:_ :: [Int]  =  LT
0 :: Int `compare` id (id _):_ :: [Int]  =  LT
0 :: Int `compare` negate _:_ :: [Int]  =  LT
0 :: Int `compare` abs _:_ :: [Int]  =  LT
0 :: Int `compare` _ + _:_ :: [Int]  =  LT
0 :: Int `compare` head _:_ :: [Int]  =  LT
0 :: Int `compare` ord _:_ :: [Int]  =  LT
0 :: Int `compare` tail xs :: [Int]  =  LT
0 :: Int `compare` tail [] :: [Int]  =  LT
0 :: Int `compare` tail (_:_) :: [Int]  =  LT
0 :: Int `compare` _ ++ xs :: [Int]  =  LT
0 :: Int `compare` _ ++ [] :: [Int]  =  LT
0 :: Int `compare` _ ++ (_:_) :: [Int]  =  LT
0 :: Int `compare` xs ++ _ :: [Int]  =  LT
0 :: Int `compare` [] ++ _ :: [Int]  =  LT
0 :: Int `compare` (_:_) ++ _ :: [Int]  =  LT
0 :: Int `compare` sort _ :: [Int]  =  LT
0 :: Int `compare` insert _ _ :: [Int]  =  LT
0 :: Int `compare` (x +) :: Int -> Int  =  LT
0 :: Int `compare` (0 +) :: Int -> Int  =  LT
0 :: Int `compare` (id _ +) :: Int -> Int  =  LT
0 :: Int `compare` (_ *) :: Int -> Int  =  LT
0 :: Int `compare` f :: Int -> Int  =  GT
0 :: Int `compare` (_ ||) :: Bool -> Bool  =  LT
0 :: Int `compare` (&&) :: Bool -> Bool -> Bool  =  LT
id _ :: Int `compare` x' :: Int  =  GT
id _ :: Int `compare` 2 :: Int  =  GT
id _ :: Int `compare` id z :: Int  =  LT
id _ :: Int `compare` id (-1) :: Int  =  LT
id _ :: Int `compare` id (id y) :: Int  =  LT
id _ :: Int `compare` id (id 1) :: Int  =  LT
id _ :: Int `compare` id (id (id x)) :: Int  =  LT
id _ :: Int `compare` id (id (id 0)) :: Int  =  LT
id _ :: Int `compare` id (id (id (id _))) :: Int  =  LT
id _ :: Int `compare` id (id (negate _)) :: Int  =  LT
id _ :: Int `compare` id (id (abs _)) :: Int  =  LT
id _ :: Int `compare` id (id (_ + _)) :: Int  =  LT
id _ :: Int `compare` id (id (head _)) :: Int  =  LT
id _ :: Int `compare` id (id (ord _)) :: Int  =  LT
id _ :: Int `compare` id (negate x) :: Int  =  LT
id _ :: Int `compare` id (negate 0) :: Int  =  LT
id _ :: Int `compare` id (negate (id _)) :: Int  =  LT
id _ :: Int `compare` id (abs x) :: Int  =  LT
id _ :: Int `compare` id (abs 0) :: Int  =  LT
id _ :: Int `compare` id (abs (id _)) :: Int  =  LT
id _ :: Int `compare` id (_ + x) :: Int  =  LT
id _ :: Int `compare` id (_ + 0) :: Int  =  LT
id _ :: Int `compare` id (_ + id _) :: Int  =  LT
id _ :: Int `compare` id (x + _) :: Int  =  LT
id _ :: Int `compare` id (0 + _) :: Int  =  LT
id _ :: Int `compare` id (id _ + _) :: Int  =  LT
id _ :: Int `compare` id (_ * _) :: Int  =  LT
id _ :: Int `compare` id (f _) :: Int  =  LT
id _ :: Int `compare` id (head xs) :: Int  =  LT
id _ :: Int `compare` id (head []) :: Int  =  LT
id _ :: Int `compare` id (head (_:_)) :: Int  =  LT
id _ :: Int `compare` id (ord c) :: Int  =  LT
id _ :: Int `compare` id (ord 'a') :: Int  =  LT
id _ :: Int `compare` negate y :: Int  =  LT
id _ :: Int `compare` negate 1 :: Int  =  LT
id _ :: Int `compare` negate (id x) :: Int  =  LT
id _ :: Int `compare` negate (id 0) :: Int  =  LT
id _ :: Int `compare` negate (id (id _)) :: Int  =  LT
id _ :: Int `compare` negate (negate _) :: Int  =  LT
id _ :: Int `compare` negate (abs _) :: Int  =  LT
id _ :: Int `compare` negate (_ + _) :: Int  =  LT
id _ :: Int `compare` negate (head _) :: Int  =  LT
id _ :: Int `compare` negate (ord _) :: Int  =  LT
id _ :: Int `compare` abs y :: Int  =  LT
id _ :: Int `compare` abs 1 :: Int  =  LT
id _ :: Int `compare` abs (id x) :: Int  =  LT
id _ :: Int `compare` abs (id 0) :: Int  =  LT
id _ :: Int `compare` abs (id (id _)) :: Int  =  LT
id _ :: Int `compare` abs (negate _) :: Int  =  LT
id _ :: Int `compare` abs (abs _) :: Int  =  LT
id _ :: Int `compare` abs (_ + _) :: Int  =  LT
id _ :: Int `compare` abs (head _) :: Int  =  LT
id _ :: Int `compare` abs (ord _) :: Int  =  LT
id _ :: Int `compare` _ + y :: Int  =  LT
id _ :: Int `compare` _ + 1 :: Int  =  LT
id _ :: Int `compare` _ + id x :: Int  =  LT
id _ :: Int `compare` _ + id 0 :: Int  =  LT
id _ :: Int `compare` _ + id (id _) :: Int  =  LT
id _ :: Int `compare` _ + negate _ :: Int  =  LT
id _ :: Int `compare` _ + abs _ :: Int  =  LT
id _ :: Int `compare` _ + (_ + _) :: Int  =  LT
id _ :: Int `compare` _ + head _ :: Int  =  LT
id _ :: Int `compare` _ + ord _ :: Int  =  LT
id _ :: Int `compare` x + x :: Int  =  LT
id _ :: Int `compare` x + 0 :: Int  =  LT
id _ :: Int `compare` x + id _ :: Int  =  LT
id _ :: Int `compare` 0 + x :: Int  =  LT
id _ :: Int `compare` 0 + 0 :: Int  =  LT
id _ :: Int `compare` 0 + id _ :: Int  =  LT
id _ :: Int `compare` id _ + x :: Int  =  LT
id _ :: Int `compare` id _ + 0 :: Int  =  LT
id _ :: Int `compare` id _ + id _ :: Int  =  LT
id _ :: Int `compare` _ * x :: Int  =  LT
id _ :: Int `compare` _ * 0 :: Int  =  LT
id _ :: Int `compare` _ * id _ :: Int  =  LT
id _ :: Int `compare` f x :: Int  =  GT
id _ :: Int `compare` f 0 :: Int  =  GT
id _ :: Int `compare` f (id _) :: Int  =  LT
id _ :: Int `compare` y + _ :: Int  =  LT
id _ :: Int `compare` 1 + _ :: Int  =  LT
id _ :: Int `compare` id x + _ :: Int  =  LT
id _ :: Int `compare` id 0 + _ :: Int  =  LT
id _ :: Int `compare` id (id _) + _ :: Int  =  LT
id _ :: Int `compare` negate _ + _ :: Int  =  LT
id _ :: Int `compare` abs _ + _ :: Int  =  LT
id _ :: Int `compare` (_ + _) + _ :: Int  =  LT
id _ :: Int `compare` head _ + _ :: Int  =  LT
id _ :: Int `compare` ord _ + _ :: Int  =  LT
id _ :: Int `compare` x * _ :: Int  =  LT
id _ :: Int `compare` 0 * _ :: Int  =  LT
id _ :: Int `compare` id _ * _ :: Int  =  LT
id _ :: Int `compare` g _ :: Int  =  GT
id _ :: Int `compare` head ys :: Int  =  LT
id _ :: Int `compare` head [0] :: Int  =  LT
id _ :: Int `compare` head (_:xs) :: Int  =  LT
id _ :: Int `compare` head [_] :: Int  =  LT
id _ :: Int `compare` head (_:_:_) :: Int  =  LT
id _ :: Int `compare` head (x:_) :: Int  =  LT
id _ :: Int `compare` head (0:_) :: Int  =  LT
id _ :: Int `compare` head (id _:_) :: Int  =  LT
id _ :: Int `compare` head (tail _) :: Int  =  LT
id _ :: Int `compare` head (_ ++ _) :: Int  =  LT
id _ :: Int `compare` ord d :: Int  =  GT
id _ :: Int `compare` ord ' ' :: Int  =  LT
id _ :: Int `compare` r :: Bool  =  GT
id _ :: Int `compare` not q :: Bool  =  GT
id _ :: Int `compare` not (not p) :: Bool  =  LT
id _ :: Int `compare` not (not False) :: Bool  =  LT
id _ :: Int `compare` not (not True) :: Bool  =  LT
id _ :: Int `compare` not (not (not _)) :: Bool  =  LT
id _ :: Int `compare` not (_ || _) :: Bool  =  LT
id _ :: Int `compare` _ || p :: Bool  =  LT
id _ :: Int `compare` _ || False :: Bool  =  LT
id _ :: Int `compare` _ || True :: Bool  =  LT
id _ :: Int `compare` _ || not _ :: Bool  =  LT
id _ :: Int `compare` p || _ :: Bool  =  LT
id _ :: Int `compare` False || _ :: Bool  =  LT
id _ :: Int `compare` True || _ :: Bool  =  LT
id _ :: Int `compare` not _ || _ :: Bool  =  LT
id _ :: Int `compare` _ && _ :: Bool  =  LT
id _ :: Int `compare` _ == _ :: Bool  =  LT
id _ :: Int `compare` _ == _ :: Bool  =  LT
id _ :: Int `compare` odd _ :: Bool  =  GT
id _ :: Int `compare` even _ :: Bool  =  GT
id _ :: Int `compare` elem _ _ :: Bool  =  LT
id _ :: Int `compare` e :: Char  =  GT
id _ :: Int `compare` 'b' :: Char  =  GT
id _ :: Int `compare` zs :: [Int]  =  GT
id _ :: Int `compare` [0,0] :: [Int]  =  GT
id _ :: Int `compare` [1] :: [Int]  =  GT
id _ :: Int `compare` _:ys :: [Int]  =  LT
id _ :: Int `compare` [_,0] :: [Int]  =  LT
id _ :: Int `compare` _:_:xs :: [Int]  =  LT
id _ :: Int `compare` [_,_] :: [Int]  =  LT
id _ :: Int `compare` _:_:_:_ :: [Int]  =  LT
id _ :: Int `compare` _:x:_ :: [Int]  =  LT
id _ :: Int `compare` _:0:_ :: [Int]  =  LT
id _ :: Int `compare` _:id _:_ :: [Int]  =  LT
id _ :: Int `compare` _:tail _ :: [Int]  =  LT
id _ :: Int `compare` _:(_ ++ _) :: [Int]  =  LT
id _ :: Int `compare` x:xs :: [Int]  =  LT
id _ :: Int `compare` [x] :: [Int]  =  LT
id _ :: Int `compare` x:_:_ :: [Int]  =  LT
id _ :: Int `compare` 0:xs :: [Int]  =  LT
id _ :: Int `compare` [0] :: [Int]  =  LT
id _ :: Int `compare` 0:_:_ :: [Int]  =  LT
id _ :: Int `compare` id _:xs :: [Int]  =  LT
id _ :: Int `compare` [id _] :: [Int]  =  LT
id _ :: Int `compare` id _:_:_ :: [Int]  =  LT
id _ :: Int `compare` y:_ :: [Int]  =  LT
id _ :: Int `compare` 1:_ :: [Int]  =  LT
id _ :: Int `compare` id x:_ :: [Int]  =  LT
id _ :: Int `compare` id 0:_ :: [Int]  =  LT
id _ :: Int `compare` id (id _):_ :: [Int]  =  LT
id _ :: Int `compare` negate _:_ :: [Int]  =  LT
id _ :: Int `compare` abs _:_ :: [Int]  =  LT
id _ :: Int `compare` _ + _:_ :: [Int]  =  LT
id _ :: Int `compare` head _:_ :: [Int]  =  LT
id _ :: Int `compare` ord _:_ :: [Int]  =  LT
id _ :: Int `compare` tail xs :: [Int]  =  LT
id _ :: Int `compare` tail [] :: [Int]  =  LT
id _ :: Int `compare` tail (_:_) :: [Int]  =  LT
id _ :: Int `compare` _ ++ xs :: [Int]  =  LT
id _ :: Int `compare` _ ++ [] :: [Int]  =  LT
id _ :: Int `compare` _ ++ (_:_) :: [Int]  =  LT
id _ :: Int `compare` xs ++ _ :: [Int]  =  LT
id _ :: Int `compare` [] ++ _ :: [Int]  =  LT
id _ :: Int `compare` (_:_) ++ _ :: [Int]  =  LT
id _ :: Int `compare` sort _ :: [Int]  =  LT
id _ :: Int `compare` insert _ _ :: [Int]  =  LT
id _ :: Int `compare` (x +) :: Int -> Int  =  LT
id _ :: Int `compare` (0 +) :: Int -> Int  =  LT
id _ :: Int `compare` (id _ +) :: Int -> Int  =  LT
id _ :: Int `compare` (_ *) :: Int -> Int  =  LT
id _ :: Int `compare` f :: Int -> Int  =  GT
id _ :: Int `compare` (_ ||) :: Bool -> Bool  =  LT
id _ :: Int `compare` (&&) :: Bool -> Bool -> Bool  =  GT
_ :: Bool `compare` x' :: Int  =  LT
_ :: Bool `compare` 2 :: Int  =  LT
_ :: Bool `compare` id z :: Int  =  LT
_ :: Bool `compare` id (-1) :: Int  =  LT
_ :: Bool `compare` id (id y) :: Int  =  LT
_ :: Bool `compare` id (id 1) :: Int  =  LT
_ :: Bool `compare` id (id (id x)) :: Int  =  LT
_ :: Bool `compare` id (id (id 0)) :: Int  =  LT
_ :: Bool `compare` id (id (id (id _))) :: Int  =  LT
_ :: Bool `compare` id (id (negate _)) :: Int  =  LT
_ :: Bool `compare` id (id (abs _)) :: Int  =  LT
_ :: Bool `compare` id (id (_ + _)) :: Int  =  LT
_ :: Bool `compare` id (id (head _)) :: Int  =  LT
_ :: Bool `compare` id (id (ord _)) :: Int  =  LT
_ :: Bool `compare` id (negate x) :: Int  =  LT
_ :: Bool `compare` id (negate 0) :: Int  =  LT
_ :: Bool `compare` id (negate (id _)) :: Int  =  LT
_ :: Bool `compare` id (abs x) :: Int  =  LT
_ :: Bool `compare` id (abs 0) :: Int  =  LT
_ :: Bool `compare` id (abs (id _)) :: Int  =  LT
_ :: Bool `compare` id (_ + x) :: Int  =  LT
_ :: Bool `compare` id (_ + 0) :: Int  =  LT
_ :: Bool `compare` id (_ + id _) :: Int  =  LT
_ :: Bool `compare` id (x + _) :: Int  =  LT
_ :: Bool `compare` id (0 + _) :: Int  =  LT
_ :: Bool `compare` id (id _ + _) :: Int  =  LT
_ :: Bool `compare` id (_ * _) :: Int  =  LT
_ :: Bool `compare` id (f _) :: Int  =  LT
_ :: Bool `compare` id (head xs) :: Int  =  LT
_ :: Bool `compare` id (head []) :: Int  =  LT
_ :: Bool `compare` id (head (_:_)) :: Int  =  LT
_ :: Bool `compare` id (ord c) :: Int  =  LT
_ :: Bool `compare` id (ord 'a') :: Int  =  LT
_ :: Bool `compare` negate y :: Int  =  LT
_ :: Bool `compare` negate 1 :: Int  =  LT
_ :: Bool `compare` negate (id x) :: Int  =  LT
_ :: Bool `compare` negate (id 0) :: Int  =  LT
_ :: Bool `compare` negate (id (id _)) :: Int  =  LT
_ :: Bool `compare` negate (negate _) :: Int  =  LT
_ :: Bool `compare` negate (abs _) :: Int  =  LT
_ :: Bool `compare` negate (_ + _) :: Int  =  LT
_ :: Bool `compare` negate (head _) :: Int  =  LT
_ :: Bool `compare` negate (ord _) :: Int  =  LT
_ :: Bool `compare` abs y :: Int  =  LT
_ :: Bool `compare` abs 1 :: Int  =  LT
_ :: Bool `compare` abs (id x) :: Int  =  LT
_ :: Bool `compare` abs (id 0) :: Int  =  LT
_ :: Bool `compare` abs (id (id _)) :: Int  =  LT
_ :: Bool `compare` abs (negate _) :: Int  =  LT
_ :: Bool `compare` abs (abs _) :: Int  =  LT
_ :: Bool `compare` abs (_ + _) :: Int  =  LT
_ :: Bool `compare` abs (head _) :: Int  =  LT
_ :: Bool `compare` abs (ord _) :: Int  =  LT
_ :: Bool `compare` _ + y :: Int  =  LT
_ :: Bool `compare` _ + 1 :: Int  =  LT
_ :: Bool `compare` _ + id x :: Int  =  LT
_ :: Bool `compare` _ + id 0 :: Int  =  LT
_ :: Bool `compare` _ + id (id _) :: Int  =  LT
_ :: Bool `compare` _ + negate _ :: Int  =  LT
_ :: Bool `compare` _ + abs _ :: Int  =  LT
_ :: Bool `compare` _ + (_ + _) :: Int  =  LT
_ :: Bool `compare` _ + head _ :: Int  =  LT
_ :: Bool `compare` _ + ord _ :: Int  =  LT
_ :: Bool `compare` x + x :: Int  =  LT
_ :: Bool `compare` x + 0 :: Int  =  LT
_ :: Bool `compare` x + id _ :: Int  =  LT
_ :: Bool `compare` 0 + x :: Int  =  LT
_ :: Bool `compare` 0 + 0 :: Int  =  LT
_ :: Bool `compare` 0 + id _ :: Int  =  LT
_ :: Bool `compare` id _ + x :: Int  =  LT
_ :: Bool `compare` id _ + 0 :: Int  =  LT
_ :: Bool `compare` id _ + id _ :: Int  =  LT
_ :: Bool `compare` _ * x :: Int  =  LT
_ :: Bool `compare` _ * 0 :: Int  =  LT
_ :: Bool `compare` _ * id _ :: Int  =  LT
_ :: Bool `compare` f x :: Int  =  LT
_ :: Bool `compare` f 0 :: Int  =  LT
_ :: Bool `compare` f (id _) :: Int  =  LT
_ :: Bool `compare` y + _ :: Int  =  LT
_ :: Bool `compare` 1 + _ :: Int  =  LT
_ :: Bool `compare` id x + _ :: Int  =  LT
_ :: Bool `compare` id 0 + _ :: Int  =  LT
_ :: Bool `compare` id (id _) + _ :: Int  =  LT
_ :: Bool `compare` negate _ + _ :: Int  =  LT
_ :: Bool `compare` abs _ + _ :: Int  =  LT
_ :: Bool `compare` (_ + _) + _ :: Int  =  LT
_ :: Bool `compare` head _ + _ :: Int  =  LT
_ :: Bool `compare` ord _ + _ :: Int  =  LT
_ :: Bool `compare` x * _ :: Int  =  LT
_ :: Bool `compare` 0 * _ :: Int  =  LT
_ :: Bool `compare` id _ * _ :: Int  =  LT
_ :: Bool `compare` g _ :: Int  =  LT
_ :: Bool `compare` head ys :: Int  =  LT
_ :: Bool `compare` head [0] :: Int  =  LT
_ :: Bool `compare` head (_:xs) :: Int  =  LT
_ :: Bool `compare` head [_] :: Int  =  LT
_ :: Bool `compare` head (_:_:_) :: Int  =  LT
_ :: Bool `compare` head (x:_) :: Int  =  LT
_ :: Bool `compare` head (0:_) :: Int  =  LT
_ :: Bool `compare` head (id _:_) :: Int  =  LT
_ :: Bool `compare` head (tail _) :: Int  =  LT
_ :: Bool `compare` head (_ ++ _) :: Int  =  LT
_ :: Bool `compare` ord d :: Int  =  LT
_ :: Bool `compare` ord ' ' :: Int  =  LT
_ :: Bool `compare` r :: Bool  =  LT
_ :: Bool `compare` not q :: Bool  =  LT
_ :: Bool `compare` not (not p) :: Bool  =  LT
_ :: Bool `compare` not (not False) :: Bool  =  LT
_ :: Bool `compare` not (not True) :: Bool  =  LT
_ :: Bool `compare` not (not (not _)) :: Bool  =  LT
_ :: Bool `compare` not (_ || _) :: Bool  =  LT
_ :: Bool `compare` _ || p :: Bool  =  LT
_ :: Bool `compare` _ || False :: Bool  =  LT
_ :: Bool `compare` _ || True :: Bool  =  LT
_ :: Bool `compare` _ || not _ :: Bool  =  LT
_ :: Bool `compare` p || _ :: Bool  =  LT
_ :: Bool `compare` False || _ :: Bool  =  LT
_ :: Bool `compare` True || _ :: Bool  =  LT
_ :: Bool `compare` not _ || _ :: Bool  =  LT
_ :: Bool `compare` _ && _ :: Bool  =  LT
_ :: Bool `compare` _ == _ :: Bool  =  LT
_ :: Bool `compare` _ == _ :: Bool  =  LT
_ :: Bool `compare` odd _ :: Bool  =  LT
_ :: Bool `compare` even _ :: Bool  =  LT
_ :: Bool `compare` elem _ _ :: Bool  =  LT
_ :: Bool `compare` e :: Char  =  LT
_ :: Bool `compare` 'b' :: Char  =  LT
_ :: Bool `compare` zs :: [Int]  =  LT
_ :: Bool `compare` [0,0] :: [Int]  =  LT
_ :: Bool `compare` [1] :: [Int]  =  LT
_ :: Bool `compare` _:ys :: [Int]  =  LT
_ :: Bool `compare` [_,0] :: [Int]  =  LT
_ :: Bool `compare` _:_:xs :: [Int]  =  LT
_ :: Bool `compare` [_,_] :: [Int]  =  LT
_ :: Bool `compare` _:_:_:_ :: [Int]  =  LT
_ :: Bool `compare` _:x:_ :: [Int]  =  LT
_ :: Bool `compare` _:0:_ :: [Int]  =  LT
_ :: Bool `compare` _:id _:_ :: [Int]  =  LT
_ :: Bool `compare` _:tail _ :: [Int]  =  LT
_ :: Bool `compare` _:(_ ++ _) :: [Int]  =  LT
_ :: Bool `compare` x:xs :: [Int]  =  LT
_ :: Bool `compare` [x] :: [Int]  =  LT
_ :: Bool `compare` x:_:_ :: [Int]  =  LT
_ :: Bool `compare` 0:xs :: [Int]  =  LT
_ :: Bool `compare` [0] :: [Int]  =  LT
_ :: Bool `compare` 0:_:_ :: [Int]  =  LT
_ :: Bool `compare` id _:xs :: [Int]  =  LT
_ :: Bool `compare` [id _] :: [Int]  =  LT
_ :: Bool `compare` id _:_:_ :: [Int]  =  LT
_ :: Bool `compare` y:_ :: [Int]  =  LT
_ :: Bool `compare` 1:_ :: [Int]  =  LT
_ :: Bool `compare` id x:_ :: [Int]  =  LT
_ :: Bool `compare` id 0:_ :: [Int]  =  LT
_ :: Bool `compare` id (id _):_ :: [Int]  =  LT
_ :: Bool `compare` negate _:_ :: [Int]  =  LT
_ :: Bool `compare` abs _:_ :: [Int]  =  LT
_ :: Bool `compare` _ + _:_ :: [Int]  =  LT
_ :: Bool `compare` head _:_ :: [Int]  =  LT
_ :: Bool `compare` ord _:_ :: [Int]  =  LT
_ :: Bool `compare` tail xs :: [Int]  =  LT
_ :: Bool `compare` tail [] :: [Int]  =  LT
_ :: Bool `compare` tail (_:_) :: [Int]  =  LT
_ :: Bool `compare` _ ++ xs :: [Int]  =  LT
_ :: Bool `compare` _ ++ [] :: [Int]  =  LT
_ :: Bool `compare` _ ++ (_:_) :: [Int]  =  LT
_ :: Bool `compare` xs ++ _ :: [Int]  =  LT
_ :: Bool `compare` [] ++ _ :: [Int]  =  LT
_ :: Bool `compare` (_:_) ++ _ :: [Int]  =  LT
_ :: Bool `compare` sort _ :: [Int]  =  LT
_ :: Bool `compare` insert _ _ :: [Int]  =  LT
_ :: Bool `compare` (x +) :: Int -> Int  =  LT
_ :: Bool `compare` (0 +) :: Int -> Int  =  LT
_ :: Bool `compare` (id _ +) :: Int -> Int  =  LT
_ :: Bool `compare` (_ *) :: Int -> Int  =  LT
_ :: Bool `compare` f :: Int -> Int  =  LT
_ :: Bool `compare` (_ ||) :: Bool -> Bool  =  LT
_ :: Bool `compare` (&&) :: Bool -> Bool -> Bool  =  LT
_ :: Char `compare` x' :: Int  =  LT
_ :: Char `compare` 2 :: Int  =  LT
_ :: Char `compare` id z :: Int  =  LT
_ :: Char `compare` id (-1) :: Int  =  LT
_ :: Char `compare` id (id y) :: Int  =  LT
_ :: Char `compare` id (id 1) :: Int  =  LT
_ :: Char `compare` id (id (id x)) :: Int  =  LT
_ :: Char `compare` id (id (id 0)) :: Int  =  LT
_ :: Char `compare` id (id (id (id _))) :: Int  =  LT
_ :: Char `compare` id (id (negate _)) :: Int  =  LT
_ :: Char `compare` id (id (abs _)) :: Int  =  LT
_ :: Char `compare` id (id (_ + _)) :: Int  =  LT
_ :: Char `compare` id (id (head _)) :: Int  =  LT
_ :: Char `compare` id (id (ord _)) :: Int  =  LT
_ :: Char `compare` id (negate x) :: Int  =  LT
_ :: Char `compare` id (negate 0) :: Int  =  LT
_ :: Char `compare` id (negate (id _)) :: Int  =  LT
_ :: Char `compare` id (abs x) :: Int  =  LT
_ :: Char `compare` id (abs 0) :: Int  =  LT
_ :: Char `compare` id (abs (id _)) :: Int  =  LT
_ :: Char `compare` id (_ + x) :: Int  =  LT
_ :: Char `compare` id (_ + 0) :: Int  =  LT
_ :: Char `compare` id (_ + id _) :: Int  =  LT
_ :: Char `compare` id (x + _) :: Int  =  LT
_ :: Char `compare` id (0 + _) :: Int  =  LT
_ :: Char `compare` id (id _ + _) :: Int  =  LT
_ :: Char `compare` id (_ * _) :: Int  =  LT
_ :: Char `compare` id (f _) :: Int  =  LT
_ :: Char `compare` id (head xs) :: Int  =  LT
_ :: Char `compare` id (head []) :: Int  =  LT
_ :: Char `compare` id (head (_:_)) :: Int  =  LT
_ :: Char `compare` id (ord c) :: Int  =  LT
_ :: Char `compare` id (ord 'a') :: Int  =  LT
_ :: Char `compare` negate y :: Int  =  LT
_ :: Char `compare` negate 1 :: Int  =  LT
_ :: Char `compare` negate (id x) :: Int  =  LT
_ :: Char `compare` negate (id 0) :: Int  =  LT
_ :: Char `compare` negate (id (id _)) :: Int  =  LT
_ :: Char `compare` negate (negate _) :: Int  =  LT
_ :: Char `compare` negate (abs _) :: Int  =  LT
_ :: Char `compare` negate (_ + _) :: Int  =  LT
_ :: Char `compare` negate (head _) :: Int  =  LT
_ :: Char `compare` negate (ord _) :: Int  =  LT
_ :: Char `compare` abs y :: Int  =  LT
_ :: Char `compare` abs 1 :: Int  =  LT
_ :: Char `compare` abs (id x) :: Int  =  LT
_ :: Char `compare` abs (id 0) :: Int  =  LT
_ :: Char `compare` abs (id (id _)) :: Int  =  LT
_ :: Char `compare` abs (negate _) :: Int  =  LT
_ :: Char `compare` abs (abs _) :: Int  =  LT
_ :: Char `compare` abs (_ + _) :: Int  =  LT
_ :: Char `compare` abs (head _) :: Int  =  LT
_ :: Char `compare` abs (ord _) :: Int  =  LT
_ :: Char `compare` _ + y :: Int  =  LT
_ :: Char `compare` _ + 1 :: Int  =  LT
_ :: Char `compare` _ + id x :: Int  =  LT
_ :: Char `compare` _ + id 0 :: Int  =  LT
_ :: Char `compare` _ + id (id _) :: Int  =  LT
_ :: Char `compare` _ + negate _ :: Int  =  LT
_ :: Char `compare` _ + abs _ :: Int  =  LT
_ :: Char `compare` _ + (_ + _) :: Int  =  LT
_ :: Char `compare` _ + head _ :: Int  =  LT
_ :: Char `compare` _ + ord _ :: Int  =  LT
_ :: Char `compare` x + x :: Int  =  LT
_ :: Char `compare` x + 0 :: Int  =  LT
_ :: Char `compare` x + id _ :: Int  =  LT
_ :: Char `compare` 0 + x :: Int  =  LT
_ :: Char `compare` 0 + 0 :: Int  =  LT
_ :: Char `compare` 0 + id _ :: Int  =  LT
_ :: Char `compare` id _ + x :: Int  =  LT
_ :: Char `compare` id _ + 0 :: Int  =  LT
_ :: Char `compare` id _ + id _ :: Int  =  LT
_ :: Char `compare` _ * x :: Int  =  LT
_ :: Char `compare` _ * 0 :: Int  =  LT
_ :: Char `compare` _ * id _ :: Int  =  LT
_ :: Char `compare` f x :: Int  =  LT
_ :: Char `compare` f 0 :: Int  =  LT
_ :: Char `compare` f (id _) :: Int  =  LT
_ :: Char `compare` y + _ :: Int  =  LT
_ :: Char `compare` 1 + _ :: Int  =  LT
_ :: Char `compare` id x + _ :: Int  =  LT
_ :: Char `compare` id 0 + _ :: Int  =  LT
_ :: Char `compare` id (id _) + _ :: Int  =  LT
_ :: Char `compare` negate _ + _ :: Int  =  LT
_ :: Char `compare` abs _ + _ :: Int  =  LT
_ :: Char `compare` (_ + _) + _ :: Int  =  LT
_ :: Char `compare` head _ + _ :: Int  =  LT
_ :: Char `compare` ord _ + _ :: Int  =  LT
_ :: Char `compare` x * _ :: Int  =  LT
_ :: Char `compare` 0 * _ :: Int  =  LT
_ :: Char `compare` id _ * _ :: Int  =  LT
_ :: Char `compare` g _ :: Int  =  LT
_ :: Char `compare` head ys :: Int  =  LT
_ :: Char `compare` head [0] :: Int  =  LT
_ :: Char `compare` head (_:xs) :: Int  =  LT
_ :: Char `compare` head [_] :: Int  =  LT
_ :: Char `compare` head (_:_:_) :: Int  =  LT
_ :: Char `compare` head (x:_) :: Int  =  LT
_ :: Char `compare` head (0:_) :: Int  =  LT
_ :: Char `compare` head (id _:_) :: Int  =  LT
_ :: Char `compare` head (tail _) :: Int  =  LT
_ :: Char `compare` head (_ ++ _) :: Int  =  LT
_ :: Char `compare` ord d :: Int  =  LT
_ :: Char `compare` ord ' ' :: Int  =  LT
_ :: Char `compare` r :: Bool  =  GT
_ :: Char `compare` not q :: Bool  =  LT
_ :: Char `compare` not (not p) :: Bool  =  LT
_ :: Char `compare` not (not False) :: Bool  =  LT
_ :: Char `compare` not (not True) :: Bool  =  LT
_ :: Char `compare` not (not (not _)) :: Bool  =  LT
_ :: Char `compare` not (_ || _) :: Bool  =  LT
_ :: Char `compare` _ || p :: Bool  =  LT
_ :: Char `compare` _ || False :: Bool  =  LT
_ :: Char `compare` _ || True :: Bool  =  LT
_ :: Char `compare` _ || not _ :: Bool  =  LT
_ :: Char `compare` p || _ :: Bool  =  LT
_ :: Char `compare` False || _ :: Bool  =  LT
_ :: Char `compare` True || _ :: Bool  =  LT
_ :: Char `compare` not _ || _ :: Bool  =  LT
_ :: Char `compare` _ && _ :: Bool  =  LT
_ :: Char `compare` _ == _ :: Bool  =  LT
_ :: Char `compare` _ == _ :: Bool  =  LT
_ :: Char `compare` odd _ :: Bool  =  LT
_ :: Char `compare` even _ :: Bool  =  LT
_ :: Char `compare` elem _ _ :: Bool  =  LT
_ :: Char `compare` e :: Char  =  LT
_ :: Char `compare` 'b' :: Char  =  LT
_ :: Char `compare` zs :: [Int]  =  LT
_ :: Char `compare` [0,0] :: [Int]  =  LT
_ :: Char `compare` [1] :: [Int]  =  LT
_ :: Char `compare` _:ys :: [Int]  =  LT
_ :: Char `compare` [_,0] :: [Int]  =  LT
_ :: Char `compare` _:_:xs :: [Int]  =  LT
_ :: Char `compare` [_,_] :: [Int]  =  LT
_ :: Char `compare` _:_:_:_ :: [Int]  =  LT
_ :: Char `compare` _:x:_ :: [Int]  =  LT
_ :: Char `compare` _:0:_ :: [Int]  =  LT
_ :: Char `compare` _:id _:_ :: [Int]  =  LT
_ :: Char `compare` _:tail _ :: [Int]  =  LT
_ :: Char `compare` _:(_ ++ _) :: [Int]  =  LT
_ :: Char `compare` x:xs :: [Int]  =  LT
_ :: Char `compare` [x] :: [Int]  =  LT
_ :: Char `compare` x:_:_ :: [Int]  =  LT
_ :: Char `compare` 0:xs :: [Int]  =  LT
_ :: Char `compare` [0] :: [Int]  =  LT
_ :: Char `compare` 0:_:_ :: [Int]  =  LT
_ :: Char `compare` id _:xs :: [Int]  =  LT
_ :: Char `compare` [id _] :: [Int]  =  LT
_ :: Char `compare` id _:_:_ :: [Int]  =  LT
_ :: Char `compare` y:_ :: [Int]  =  LT
_ :: Char `compare` 1:_ :: [Int]  =  LT
_ :: Char `compare` id x:_ :: [Int]  =  LT
_ :: Char `compare` id 0:_ :: [Int]  =  LT
_ :: Char `compare` id (id _):_ :: [Int]  =  LT
_ :: Char `compare` negate _:_ :: [Int]  =  LT
_ :: Char `compare` abs _:_ :: [Int]  =  LT
_ :: Char `compare` _ + _:_ :: [Int]  =  LT
_ :: Char `compare` head _:_ :: [Int]  =  LT
_ :: Char `compare` ord _:_ :: [Int]  =  LT
_ :: Char `compare` tail xs :: [Int]  =  LT
_ :: Char `compare` tail [] :: [Int]  =  LT
_ :: Char `compare` tail (_:_) :: [Int]  =  LT
_ :: Char `compare` _ ++ xs :: [Int]  =  LT
_ :: Char `compare` _ ++ [] :: [Int]  =  LT
_ :: Char `compare` _ ++ (_:_) :: [Int]  =  LT
_ :: Char `compare` xs ++ _ :: [Int]  =  LT
_ :: Char `compare` [] ++ _ :: [Int]  =  LT
_ :: Char `compare` (_:_) ++ _ :: [Int]  =  LT
_ :: Char `compare` sort _ :: [Int]  =  LT
_ :: Char `compare` insert _ _ :: [Int]  =  LT
_ :: Char `compare` (x +) :: Int -> Int  =  LT
_ :: Char `compare` (0 +) :: Int -> Int  =  LT
_ :: Char `compare` (id _ +) :: Int -> Int  =  LT
_ :: Char `compare` (_ *) :: Int -> Int  =  LT
_ :: Char `compare` f :: Int -> Int  =  LT
_ :: Char `compare` (_ ||) :: Bool -> Bool  =  LT
_ :: Char `compare` (&&) :: Bool -> Bool -> Bool  =  LT
_ :: [Int] `compare` x' :: Int  =  GT
_ :: [Int] `compare` 2 :: Int  =  LT
_ :: [Int] `compare` id z :: Int  =  LT
_ :: [Int] `compare` id (-1) :: Int  =  LT
_ :: [Int] `compare` id (id y) :: Int  =  LT
_ :: [Int] `compare` id (id 1) :: Int  =  LT
_ :: [Int] `compare` id (id (id x)) :: Int  =  LT
_ :: [Int] `compare` id (id (id 0)) :: Int  =  LT
_ :: [Int] `compare` id (id (id (id _))) :: Int  =  LT
_ :: [Int] `compare` id (id (negate _)) :: Int  =  LT
_ :: [Int] `compare` id (id (abs _)) :: Int  =  LT
_ :: [Int] `compare` id (id (_ + _)) :: Int  =  LT
_ :: [Int] `compare` id (id (head _)) :: Int  =  LT
_ :: [Int] `compare` id (id (ord _)) :: Int  =  LT
_ :: [Int] `compare` id (negate x) :: Int  =  LT
_ :: [Int] `compare` id (negate 0) :: Int  =  LT
_ :: [Int] `compare` id (negate (id _)) :: Int  =  LT
_ :: [Int] `compare` id (abs x) :: Int  =  LT
_ :: [Int] `compare` id (abs 0) :: Int  =  LT
_ :: [Int] `compare` id (abs (id _)) :: Int  =  LT
_ :: [Int] `compare` id (_ + x) :: Int  =  LT
_ :: [Int] `compare` id (_ + 0) :: Int  =  LT
_ :: [Int] `compare` id (_ + id _) :: Int  =  LT
_ :: [Int] `compare` id (x + _) :: Int  =  LT
_ :: [Int] `compare` id (0 + _) :: Int  =  LT
_ :: [Int] `compare` id (id _ + _) :: Int  =  LT
_ :: [Int] `compare` id (_ * _) :: Int  =  LT
_ :: [Int] `compare` id (f _) :: Int  =  LT
_ :: [Int] `compare` id (head xs) :: Int  =  LT
_ :: [Int] `compare` id (head []) :: Int  =  LT
_ :: [Int] `compare` id (head (_:_)) :: Int  =  LT
_ :: [Int] `compare` id (ord c) :: Int  =  LT
_ :: [Int] `compare` id (ord 'a') :: Int  =  LT
_ :: [Int] `compare` negate y :: Int  =  LT
_ :: [Int] `compare` negate 1 :: Int  =  LT
_ :: [Int] `compare` negate (id x) :: Int  =  LT
_ :: [Int] `compare` negate (id 0) :: Int  =  LT
_ :: [Int] `compare` negate (id (id _)) :: Int  =  LT
_ :: [Int] `compare` negate (negate _) :: Int  =  LT
_ :: [Int] `compare` negate (abs _) :: Int  =  LT
_ :: [Int] `compare` negate (_ + _) :: Int  =  LT
_ :: [Int] `compare` negate (head _) :: Int  =  LT
_ :: [Int] `compare` negate (ord _) :: Int  =  LT
_ :: [Int] `compare` abs y :: Int  =  LT
_ :: [Int] `compare` abs 1 :: Int  =  LT
_ :: [Int] `compare` abs (id x) :: Int  =  LT
_ :: [Int] `compare` abs (id 0) :: Int  =  LT
_ :: [Int] `compare` abs (id (id _)) :: Int  =  LT
_ :: [Int] `compare` abs (negate _) :: Int  =  LT
_ :: [Int] `compare` abs (abs _) :: Int  =  LT
_ :: [Int] `compare` abs (_ + _) :: Int  =  LT
_ :: [Int] `compare` abs (head _) :: Int  =  LT
_ :: [Int] `compare` abs (ord _) :: Int  =  LT
_ :: [Int] `compare` _ + y :: Int  =  LT
_ :: [Int] `compare` _ + 1 :: Int  =  LT
_ :: [Int] `compare` _ + id x :: Int  =  LT
_ :: [Int] `compare` _ + id 0 :: Int  =  LT
_ :: [Int] `compare` _ + id (id _) :: Int  =  LT
_ :: [Int] `compare` _ + negate _ :: Int  =  LT
_ :: [Int] `compare` _ + abs _ :: Int  =  LT
_ :: [Int] `compare` _ + (_ + _) :: Int  =  LT
_ :: [Int] `compare` _ + head _ :: Int  =  LT
_ :: [Int] `compare` _ + ord _ :: Int  =  LT
_ :: [Int] `compare` x + x :: Int  =  LT
_ :: [Int] `compare` x + 0 :: Int  =  LT
_ :: [Int] `compare` x + id _ :: Int  =  LT
_ :: [Int] `compare` 0 + x :: Int  =  LT
_ :: [Int] `compare` 0 + 0 :: Int  =  LT
_ :: [Int] `compare` 0 + id _ :: Int  =  LT
_ :: [Int] `compare` id _ + x :: Int  =  LT
_ :: [Int] `compare` id _ + 0 :: Int  =  LT
_ :: [Int] `compare` id _ + id _ :: Int  =  LT
_ :: [Int] `compare` _ * x :: Int  =  LT
_ :: [Int] `compare` _ * 0 :: Int  =  LT
_ :: [Int] `compare` _ * id _ :: Int  =  LT
_ :: [Int] `compare` f x :: Int  =  LT
_ :: [Int] `compare` f 0 :: Int  =  LT
_ :: [Int] `compare` f (id _) :: Int  =  LT
_ :: [Int] `compare` y + _ :: Int  =  LT
_ :: [Int] `compare` 1 + _ :: Int  =  LT
_ :: [Int] `compare` id x + _ :: Int  =  LT
_ :: [Int] `compare` id 0 + _ :: Int  =  LT
_ :: [Int] `compare` id (id _) + _ :: Int  =  LT
_ :: [Int] `compare` negate _ + _ :: Int  =  LT
_ :: [Int] `compare` abs _ + _ :: Int  =  LT
_ :: [Int] `compare` (_ + _) + _ :: Int  =  LT
_ :: [Int] `compare` head _ + _ :: Int  =  LT
_ :: [Int] `compare` ord _ + _ :: Int  =  LT
_ :: [Int] `compare` x * _ :: Int  =  LT
_ :: [Int] `compare` 0 * _ :: Int  =  LT
_ :: [Int] `compare` id _ * _ :: Int  =  LT
_ :: [Int] `compare` g _ :: Int  =  LT
_ :: [Int] `compare` head ys :: Int  =  LT
_ :: [Int] `compare` head [0] :: Int  =  LT
_ :: [Int] `compare` head (_:xs) :: Int  =  LT
_ :: [Int] `compare` head [_] :: Int  =  LT
_ :: [Int] `compare` head (_:_:_) :: Int  =  LT
_ :: [Int] `compare` head (x:_) :: Int  =  LT
_ :: [Int] `compare` head (0:_) :: Int  =  LT
_ :: [Int] `compare` head (id _:_) :: Int  =  LT
_ :: [Int] `compare` head (tail _) :: Int  =  LT
_ :: [Int] `compare` head (_ ++ _) :: Int  =  LT
_ :: [Int] `compare` ord d :: Int  =  LT
_ :: [Int] `compare` ord ' ' :: Int  =  LT
_ :: [Int] `compare` r :: Bool  =  GT
_ :: [Int] `compare` not q :: Bool  =  LT
_ :: [Int] `compare` not (not p) :: Bool  =  LT
_ :: [Int] `compare` not (not False) :: Bool  =  LT
_ :: [Int] `compare` not (not True) :: Bool  =  LT
_ :: [Int] `compare` not (not (not _)) :: Bool  =  LT
_ :: [Int] `compare` not (_ || _) :: Bool  =  LT
_ :: [Int] `compare` _ || p :: Bool  =  LT
_ :: [Int] `compare` _ || False :: Bool  =  LT
_ :: [Int] `compare` _ || True :: Bool  =  LT
_ :: [Int] `compare` _ || not _ :: Bool  =  LT
_ :: [Int] `compare` p || _ :: Bool  =  LT
_ :: [Int] `compare` False || _ :: Bool  =  LT
_ :: [Int] `compare` True || _ :: Bool  =  LT
_ :: [Int] `compare` not _ || _ :: Bool  =  LT
_ :: [Int] `compare` _ && _ :: Bool  =  LT
_ :: [Int] `compare` _ == _ :: Bool  =  LT
_ :: [Int] `compare` _ == _ :: Bool  =  LT
_ :: [Int] `compare` odd _ :: Bool  =  LT
_ :: [Int] `compare` even _ :: Bool  =  LT
_ :: [Int] `compare` elem _ _ :: Bool  =  LT
_ :: [Int] `compare` e :: Char  =  GT
_ :: [Int] `compare` 'b' :: Char  =  LT
_ :: [Int] `compare` zs :: [Int]  =  LT
_ :: [Int] `compare` [0,0] :: [Int]  =  LT
_ :: [Int] `compare` [1] :: [Int]  =  LT
_ :: [Int] `compare` _:ys :: [Int]  =  LT
_ :: [Int] `compare` [_,0] :: [Int]  =  LT
_ :: [Int] `compare` _:_:xs :: [Int]  =  LT
_ :: [Int] `compare` [_,_] :: [Int]  =  LT
_ :: [Int] `compare` _:_:_:_ :: [Int]  =  LT
_ :: [Int] `compare` _:x:_ :: [Int]  =  LT
_ :: [Int] `compare` _:0:_ :: [Int]  =  LT
_ :: [Int] `compare` _:id _:_ :: [Int]  =  LT
_ :: [Int] `compare` _:tail _ :: [Int]  =  LT
_ :: [Int] `compare` _:(_ ++ _) :: [Int]  =  LT
_ :: [Int] `compare` x:xs :: [Int]  =  LT
_ :: [Int] `compare` [x] :: [Int]  =  LT
_ :: [Int] `compare` x:_:_ :: [Int]  =  LT
_ :: [Int] `compare` 0:xs :: [Int]  =  LT
_ :: [Int] `compare` [0] :: [Int]  =  LT
_ :: [Int] `compare` 0:_:_ :: [Int]  =  LT
_ :: [Int] `compare` id _:xs :: [Int]  =  LT
_ :: [Int] `compare` [id _] :: [Int]  =  LT
_ :: [Int] `compare` id _:_:_ :: [Int]  =  LT
_ :: [Int] `compare` y:_ :: [Int]  =  LT
_ :: [Int] `compare` 1:_ :: [Int]  =  LT
_ :: [Int] `compare` id x:_ :: [Int]  =  LT
_ :: [Int] `compare` id 0:_ :: [Int]  =  LT
_ :: [Int] `compare` id (id _):_ :: [Int]  =  LT
_ :: [Int] `compare` negate _:_ :: [Int]  =  LT
_ :: [Int] `compare` abs _:_ :: [Int]  =  LT
_ :: [Int] `compare` _ + _:_ :: [Int]  =  LT
_ :: [Int] `compare` head _:_ :: [Int]  =  LT
_ :: [Int] `compare` ord _:_ :: [Int]  =  LT
_ :: [Int] `compare` tail xs :: [Int]  =  LT
_ :: [Int] `compare` tail [] :: [Int]  =  LT
_ :: [Int] `compare` tail (_:_) :: [Int]  =  LT
_ :: [Int] `compare` _ ++ xs :: [Int]  =  LT
_ :: [Int] `compare` _ ++ [] :: [Int]  =  LT
_ :: [Int] `compare` _ ++ (_:_) :: [Int]  =  LT
_ :: [Int] `compare` xs ++ _ :: [Int]  =  LT
_ :: [Int] `compare` [] ++ _ :: [Int]  =  LT
_ :: [Int] `compare` (_:_) ++ _ :: [Int]  =  LT
_ :: [Int] `compare` sort _ :: [Int]  =  LT
_ :: [Int] `compare` insert _ _ :: [Int]  =  LT
_ :: [Int] `compare` (x +) :: Int -> Int  =  LT
_ :: [Int] `compare` (0 +) :: Int -> Int  =  LT
_ :: [Int] `compare` (id _ +) :: Int -> Int  =  LT
_ :: [Int] `compare` (_ *) :: Int -> Int  =  LT
_ :: [Int] `compare` f :: Int -> Int  =  LT
_ :: [Int] `compare` (_ ||) :: Bool -> Bool  =  LT
_ :: [Int] `compare` (&&) :: Bool -> Bool -> Bool  =  LT
y :: Int `compare` z :: Int  =  LT
y :: Int `compare` -1 :: Int  =  LT
y :: Int `compare` id y :: Int  =  LT
y :: Int `compare` id 1 :: Int  =  LT
y :: Int `compare` id (id x) :: Int  =  LT
y :: Int `compare` id (id 0) :: Int  =  LT
y :: Int `compare` id (id (id _)) :: Int  =  LT
y :: Int `compare` id (negate _) :: Int  =  LT
y :: Int `compare` id (abs _) :: Int  =  LT
y :: Int `compare` id (_ + _) :: Int  =  LT
y :: Int `compare` id (head _) :: Int  =  LT
y :: Int `compare` id (ord _) :: Int  =  LT
y :: Int `compare` negate x :: Int  =  LT
y :: Int `compare` negate 0 :: Int  =  LT
y :: Int `compare` negate (id _) :: Int  =  LT
y :: Int `compare` abs x :: Int  =  LT
y :: Int `compare` abs 0 :: Int  =  LT
y :: Int `compare` abs (id _) :: Int  =  LT
y :: Int `compare` _ + x :: Int  =  LT
y :: Int `compare` _ + 0 :: Int  =  LT
y :: Int `compare` _ + id _ :: Int  =  LT
y :: Int `compare` x + _ :: Int  =  LT
y :: Int `compare` 0 + _ :: Int  =  LT
y :: Int `compare` id _ + _ :: Int  =  LT
y :: Int `compare` _ * _ :: Int  =  LT
y :: Int `compare` f _ :: Int  =  LT
y :: Int `compare` head xs :: Int  =  LT
y :: Int `compare` head [] :: Int  =  LT
y :: Int `compare` head (_:_) :: Int  =  LT
y :: Int `compare` ord c :: Int  =  LT
y :: Int `compare` ord 'a' :: Int  =  LT
y :: Int `compare` q :: Bool  =  GT
y :: Int `compare` not p :: Bool  =  LT
y :: Int `compare` not False :: Bool  =  LT
y :: Int `compare` not True :: Bool  =  LT
y :: Int `compare` not (not _) :: Bool  =  LT
y :: Int `compare` _ || _ :: Bool  =  LT
y :: Int `compare` d :: Char  =  GT
y :: Int `compare` ' ' :: Char  =  LT
y :: Int `compare` ys :: [Int]  =  LT
y :: Int `compare` [0] :: [Int]  =  LT
y :: Int `compare` _:xs :: [Int]  =  LT
y :: Int `compare` [_] :: [Int]  =  LT
y :: Int `compare` _:_:_ :: [Int]  =  LT
y :: Int `compare` x:_ :: [Int]  =  LT
y :: Int `compare` 0:_ :: [Int]  =  LT
y :: Int `compare` id _:_ :: [Int]  =  LT
y :: Int `compare` tail _ :: [Int]  =  LT
y :: Int `compare` _ ++ _ :: [Int]  =  LT
y :: Int `compare` negate :: Int -> Int  =  LT
y :: Int `compare` abs :: Int -> Int  =  LT
y :: Int `compare` (_ +) :: Int -> Int  =  LT
y :: Int `compare` (*) :: Int -> Int -> Int  =  LT
y :: Int `compare` not :: Bool -> Bool  =  LT
y :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
1 :: Int `compare` z :: Int  =  GT
1 :: Int `compare` -1 :: Int  =  LT
1 :: Int `compare` id y :: Int  =  LT
1 :: Int `compare` id 1 :: Int  =  LT
1 :: Int `compare` id (id x) :: Int  =  LT
1 :: Int `compare` id (id 0) :: Int  =  LT
1 :: Int `compare` id (id (id _)) :: Int  =  LT
1 :: Int `compare` id (negate _) :: Int  =  LT
1 :: Int `compare` id (abs _) :: Int  =  LT
1 :: Int `compare` id (_ + _) :: Int  =  LT
1 :: Int `compare` id (head _) :: Int  =  LT
1 :: Int `compare` id (ord _) :: Int  =  LT
1 :: Int `compare` negate x :: Int  =  LT
1 :: Int `compare` negate 0 :: Int  =  LT
1 :: Int `compare` negate (id _) :: Int  =  LT
1 :: Int `compare` abs x :: Int  =  LT
1 :: Int `compare` abs 0 :: Int  =  LT
1 :: Int `compare` abs (id _) :: Int  =  LT
1 :: Int `compare` _ + x :: Int  =  LT
1 :: Int `compare` _ + 0 :: Int  =  LT
1 :: Int `compare` _ + id _ :: Int  =  LT
1 :: Int `compare` x + _ :: Int  =  LT
1 :: Int `compare` 0 + _ :: Int  =  LT
1 :: Int `compare` id _ + _ :: Int  =  LT
1 :: Int `compare` _ * _ :: Int  =  LT
1 :: Int `compare` f _ :: Int  =  LT
1 :: Int `compare` head xs :: Int  =  LT
1 :: Int `compare` head [] :: Int  =  LT
1 :: Int `compare` head (_:_) :: Int  =  LT
1 :: Int `compare` ord c :: Int  =  LT
1 :: Int `compare` ord 'a' :: Int  =  LT
1 :: Int `compare` q :: Bool  =  GT
1 :: Int `compare` not p :: Bool  =  LT
1 :: Int `compare` not False :: Bool  =  LT
1 :: Int `compare` not True :: Bool  =  LT
1 :: Int `compare` not (not _) :: Bool  =  LT
1 :: Int `compare` _ || _ :: Bool  =  LT
1 :: Int `compare` d :: Char  =  GT
1 :: Int `compare` ' ' :: Char  =  GT
1 :: Int `compare` ys :: [Int]  =  GT
1 :: Int `compare` [0] :: [Int]  =  LT
1 :: Int `compare` _:xs :: [Int]  =  LT
1 :: Int `compare` [_] :: [Int]  =  LT
1 :: Int `compare` _:_:_ :: [Int]  =  LT
1 :: Int `compare` x:_ :: [Int]  =  LT
1 :: Int `compare` 0:_ :: [Int]  =  LT
1 :: Int `compare` id _:_ :: [Int]  =  LT
1 :: Int `compare` tail _ :: [Int]  =  LT
1 :: Int `compare` _ ++ _ :: [Int]  =  LT
1 :: Int `compare` negate :: Int -> Int  =  LT
1 :: Int `compare` abs :: Int -> Int  =  LT
1 :: Int `compare` (_ +) :: Int -> Int  =  LT
1 :: Int `compare` (*) :: Int -> Int -> Int  =  LT
1 :: Int `compare` not :: Bool -> Bool  =  LT
1 :: Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
id x :: Int `compare` z :: Int  =  GT
id x :: Int `compare` -1 :: Int  =  GT
id x :: Int `compare` id y :: Int  =  LT
id x :: Int `compare` id 1 :: Int  =  LT
id x :: Int `compare` id (id x) :: Int  =  LT
id x :: Int `compare` id (id 0) :: Int  =  LT
id x :: Int `compare` id (id (id _)) :: Int  =  LT
id x :: Int `compare` id (negate _) :: Int  =  LT
id x :: Int `compare` id (abs _) :: Int  =  LT
id x :: Int `compare` id (_ + _) :: Int  =  LT
id x :: Int `compare` id (head _) :: Int  =  LT
id x :: Int `compare` id (ord _) :: Int  =  LT
id x :: Int `compare` negate x :: Int  =  LT
id x :: Int `compare` negate 0 :: Int  =  LT
id x :: Int `compare` negate (id _) :: Int  =  LT
id x :: Int `compare` abs x :: Int  =  LT
id x :: Int `compare` abs 0 :: Int  =  LT
id x :: Int `compare` abs (id _) :: Int  =  LT
id x :: Int `compare` _ + x :: Int  =  LT
id x :: Int `compare` _ + 0 :: Int  =  LT
id x :: Int `compare` _ + id _ :: Int  =  LT
id x :: Int `compare` x + _ :: Int  =  LT
id x :: Int `compare` 0 + _ :: Int  =  LT
id x :: Int `compare` id _ + _ :: Int  =  LT
id x :: Int `compare` _ * _ :: Int  =  LT
id x :: Int `compare` f _ :: Int  =  GT
id x :: Int `compare` head xs :: Int  =  LT
id x :: Int `compare` head [] :: Int  =  LT
id x :: Int `compare` head (_:_) :: Int  =  LT
id x :: Int `compare` ord c :: Int  =  GT
id x :: Int `compare` ord 'a' :: Int  =  LT
id x :: Int `compare` q :: Bool  =  GT
id x :: Int `compare` not p :: Bool  =  GT
id x :: Int `compare` not False :: Bool  =  LT
id x :: Int `compare` not True :: Bool  =  LT
id x :: Int `compare` not (not _) :: Bool  =  LT
id x :: Int `compare` _ || _ :: Bool  =  LT
id x :: Int `compare` d :: Char  =  GT
id x :: Int `compare` ' ' :: Char  =  GT
id x :: Int `compare` ys :: [Int]  =  GT
id x :: Int `compare` [0] :: [Int]  =  GT
id x :: Int `compare` _:xs :: [Int]  =  LT
id x :: Int `compare` [_] :: [Int]  =  LT
id x :: Int `compare` _:_:_ :: [Int]  =  LT
id x :: Int `compare` x:_ :: [Int]  =  LT
id x :: Int `compare` 0:_ :: [Int]  =  LT
id x :: Int `compare` id _:_ :: [Int]  =  LT
id x :: Int `compare` tail _ :: [Int]  =  LT
id x :: Int `compare` _ ++ _ :: [Int]  =  LT
id x :: Int `compare` negate :: Int -> Int  =  GT
id x :: Int `compare` abs :: Int -> Int  =  GT
id x :: Int `compare` (_ +) :: Int -> Int  =  LT
id x :: Int `compare` (*) :: Int -> Int -> Int  =  GT
id x :: Int `compare` not :: Bool -> Bool  =  GT
id x :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
id 0 :: Int `compare` z :: Int  =  GT
id 0 :: Int `compare` -1 :: Int  =  GT
id 0 :: Int `compare` id y :: Int  =  GT
id 0 :: Int `compare` id 1 :: Int  =  LT
id 0 :: Int `compare` id (id x) :: Int  =  LT
id 0 :: Int `compare` id (id 0) :: Int  =  LT
id 0 :: Int `compare` id (id (id _)) :: Int  =  LT
id 0 :: Int `compare` id (negate _) :: Int  =  LT
id 0 :: Int `compare` id (abs _) :: Int  =  LT
id 0 :: Int `compare` id (_ + _) :: Int  =  LT
id 0 :: Int `compare` id (head _) :: Int  =  LT
id 0 :: Int `compare` id (ord _) :: Int  =  LT
id 0 :: Int `compare` negate x :: Int  =  GT
id 0 :: Int `compare` negate 0 :: Int  =  LT
id 0 :: Int `compare` negate (id _) :: Int  =  LT
id 0 :: Int `compare` abs x :: Int  =  GT
id 0 :: Int `compare` abs 0 :: Int  =  LT
id 0 :: Int `compare` abs (id _) :: Int  =  LT
id 0 :: Int `compare` _ + x :: Int  =  LT
id 0 :: Int `compare` _ + 0 :: Int  =  LT
id 0 :: Int `compare` _ + id _ :: Int  =  LT
id 0 :: Int `compare` x + _ :: Int  =  LT
id 0 :: Int `compare` 0 + _ :: Int  =  LT
id 0 :: Int `compare` id _ + _ :: Int  =  LT
id 0 :: Int `compare` _ * _ :: Int  =  LT
id 0 :: Int `compare` f _ :: Int  =  GT
id 0 :: Int `compare` head xs :: Int  =  GT
id 0 :: Int `compare` head [] :: Int  =  LT
id 0 :: Int `compare` head (_:_) :: Int  =  LT
id 0 :: Int `compare` ord c :: Int  =  GT
id 0 :: Int `compare` ord 'a' :: Int  =  GT
id 0 :: Int `compare` q :: Bool  =  GT
id 0 :: Int `compare` not p :: Bool  =  GT
id 0 :: Int `compare` not False :: Bool  =  GT
id 0 :: Int `compare` not True :: Bool  =  GT
id 0 :: Int `compare` not (not _) :: Bool  =  LT
id 0 :: Int `compare` _ || _ :: Bool  =  LT
id 0 :: Int `compare` d :: Char  =  GT
id 0 :: Int `compare` ' ' :: Char  =  GT
id 0 :: Int `compare` ys :: [Int]  =  GT
id 0 :: Int `compare` [0] :: [Int]  =  GT
id 0 :: Int `compare` _:xs :: [Int]  =  LT
id 0 :: Int `compare` [_] :: [Int]  =  LT
id 0 :: Int `compare` _:_:_ :: [Int]  =  LT
id 0 :: Int `compare` x:_ :: [Int]  =  LT
id 0 :: Int `compare` 0:_ :: [Int]  =  LT
id 0 :: Int `compare` id _:_ :: [Int]  =  LT
id 0 :: Int `compare` tail _ :: [Int]  =  GT
id 0 :: Int `compare` _ ++ _ :: [Int]  =  LT
id 0 :: Int `compare` negate :: Int -> Int  =  GT
id 0 :: Int `compare` abs :: Int -> Int  =  GT
id 0 :: Int `compare` (_ +) :: Int -> Int  =  GT
id 0 :: Int `compare` (*) :: Int -> Int -> Int  =  GT
id 0 :: Int `compare` not :: Bool -> Bool  =  GT
id 0 :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
id (id _) :: Int `compare` z :: Int  =  GT
id (id _) :: Int `compare` -1 :: Int  =  GT
id (id _) :: Int `compare` id y :: Int  =  GT
id (id _) :: Int `compare` id 1 :: Int  =  GT
id (id _) :: Int `compare` id (id x) :: Int  =  LT
id (id _) :: Int `compare` id (id 0) :: Int  =  LT
id (id _) :: Int `compare` id (id (id _)) :: Int  =  LT
id (id _) :: Int `compare` id (negate _) :: Int  =  LT
id (id _) :: Int `compare` id (abs _) :: Int  =  LT
id (id _) :: Int `compare` id (_ + _) :: Int  =  LT
id (id _) :: Int `compare` id (head _) :: Int  =  LT
id (id _) :: Int `compare` id (ord _) :: Int  =  LT
id (id _) :: Int `compare` negate x :: Int  =  GT
id (id _) :: Int `compare` negate 0 :: Int  =  GT
id (id _) :: Int `compare` negate (id _) :: Int  =  LT
id (id _) :: Int `compare` abs x :: Int  =  GT
id (id _) :: Int `compare` abs 0 :: Int  =  GT
id (id _) :: Int `compare` abs (id _) :: Int  =  LT
id (id _) :: Int `compare` _ + x :: Int  =  GT
id (id _) :: Int `compare` _ + 0 :: Int  =  LT
id (id _) :: Int `compare` _ + id _ :: Int  =  LT
id (id _) :: Int `compare` x + _ :: Int  =  GT
id (id _) :: Int `compare` 0 + _ :: Int  =  LT
id (id _) :: Int `compare` id _ + _ :: Int  =  LT
id (id _) :: Int `compare` _ * _ :: Int  =  GT
id (id _) :: Int `compare` f _ :: Int  =  GT
id (id _) :: Int `compare` head xs :: Int  =  GT
id (id _) :: Int `compare` head [] :: Int  =  GT
id (id _) :: Int `compare` head (_:_) :: Int  =  LT
id (id _) :: Int `compare` ord c :: Int  =  GT
id (id _) :: Int `compare` ord 'a' :: Int  =  GT
id (id _) :: Int `compare` q :: Bool  =  GT
id (id _) :: Int `compare` not p :: Bool  =  GT
id (id _) :: Int `compare` not False :: Bool  =  GT
id (id _) :: Int `compare` not True :: Bool  =  GT
id (id _) :: Int `compare` not (not _) :: Bool  =  GT
id (id _) :: Int `compare` _ || _ :: Bool  =  GT
id (id _) :: Int `compare` d :: Char  =  GT
id (id _) :: Int `compare` ' ' :: Char  =  GT
id (id _) :: Int `compare` ys :: [Int]  =  GT
id (id _) :: Int `compare` [0] :: [Int]  =  GT
id (id _) :: Int `compare` _:xs :: [Int]  =  GT
id (id _) :: Int `compare` [_] :: [Int]  =  LT
id (id _) :: Int `compare` _:_:_ :: [Int]  =  LT
id (id _) :: Int `compare` x:_ :: [Int]  =  GT
id (id _) :: Int `compare` 0:_ :: [Int]  =  LT
id (id _) :: Int `compare` id _:_ :: [Int]  =  LT
id (id _) :: Int `compare` tail _ :: [Int]  =  GT
id (id _) :: Int `compare` _ ++ _ :: [Int]  =  GT
id (id _) :: Int `compare` negate :: Int -> Int  =  GT
id (id _) :: Int `compare` abs :: Int -> Int  =  GT
id (id _) :: Int `compare` (_ +) :: Int -> Int  =  GT
id (id _) :: Int `compare` (*) :: Int -> Int -> Int  =  GT
id (id _) :: Int `compare` not :: Bool -> Bool  =  GT
id (id _) :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
negate _ :: Int `compare` z :: Int  =  GT
negate _ :: Int `compare` -1 :: Int  =  GT
negate _ :: Int `compare` id y :: Int  =  GT
negate _ :: Int `compare` id 1 :: Int  =  LT
negate _ :: Int `compare` id (id x) :: Int  =  LT
negate _ :: Int `compare` id (id 0) :: Int  =  LT
negate _ :: Int `compare` id (id (id _)) :: Int  =  LT
negate _ :: Int `compare` id (negate _) :: Int  =  LT
negate _ :: Int `compare` id (abs _) :: Int  =  LT
negate _ :: Int `compare` id (_ + _) :: Int  =  LT
negate _ :: Int `compare` id (head _) :: Int  =  LT
negate _ :: Int `compare` id (ord _) :: Int  =  LT
negate _ :: Int `compare` negate x :: Int  =  LT
negate _ :: Int `compare` negate 0 :: Int  =  LT
negate _ :: Int `compare` negate (id _) :: Int  =  LT
negate _ :: Int `compare` abs x :: Int  =  GT
negate _ :: Int `compare` abs 0 :: Int  =  LT
negate _ :: Int `compare` abs (id _) :: Int  =  LT
negate _ :: Int `compare` _ + x :: Int  =  LT
negate _ :: Int `compare` _ + 0 :: Int  =  LT
negate _ :: Int `compare` _ + id _ :: Int  =  LT
negate _ :: Int `compare` x + _ :: Int  =  LT
negate _ :: Int `compare` 0 + _ :: Int  =  LT
negate _ :: Int `compare` id _ + _ :: Int  =  LT
negate _ :: Int `compare` _ * _ :: Int  =  LT
negate _ :: Int `compare` f _ :: Int  =  GT
negate _ :: Int `compare` head xs :: Int  =  LT
negate _ :: Int `compare` head [] :: Int  =  LT
negate _ :: Int `compare` head (_:_) :: Int  =  LT
negate _ :: Int `compare` ord c :: Int  =  GT
negate _ :: Int `compare` ord 'a' :: Int  =  LT
negate _ :: Int `compare` q :: Bool  =  GT
negate _ :: Int `compare` not p :: Bool  =  GT
negate _ :: Int `compare` not False :: Bool  =  LT
negate _ :: Int `compare` not True :: Bool  =  LT
negate _ :: Int `compare` not (not _) :: Bool  =  LT
negate _ :: Int `compare` _ || _ :: Bool  =  LT
negate _ :: Int `compare` d :: Char  =  GT
negate _ :: Int `compare` ' ' :: Char  =  GT
negate _ :: Int `compare` ys :: [Int]  =  GT
negate _ :: Int `compare` [0] :: [Int]  =  GT
negate _ :: Int `compare` _:xs :: [Int]  =  LT
negate _ :: Int `compare` [_] :: [Int]  =  LT
negate _ :: Int `compare` _:_:_ :: [Int]  =  LT
negate _ :: Int `compare` x:_ :: [Int]  =  LT
negate _ :: Int `compare` 0:_ :: [Int]  =  LT
negate _ :: Int `compare` id _:_ :: [Int]  =  LT
negate _ :: Int `compare` tail _ :: [Int]  =  LT
negate _ :: Int `compare` _ ++ _ :: [Int]  =  LT
negate _ :: Int `compare` negate :: Int -> Int  =  GT
negate _ :: Int `compare` abs :: Int -> Int  =  GT
negate _ :: Int `compare` (_ +) :: Int -> Int  =  LT
negate _ :: Int `compare` (*) :: Int -> Int -> Int  =  GT
negate _ :: Int `compare` not :: Bool -> Bool  =  GT
negate _ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
abs _ :: Int `compare` z :: Int  =  GT
abs _ :: Int `compare` -1 :: Int  =  GT
abs _ :: Int `compare` id y :: Int  =  GT
abs _ :: Int `compare` id 1 :: Int  =  LT
abs _ :: Int `compare` id (id x) :: Int  =  LT
abs _ :: Int `compare` id (id 0) :: Int  =  LT
abs _ :: Int `compare` id (id (id _)) :: Int  =  LT
abs _ :: Int `compare` id (negate _) :: Int  =  LT
abs _ :: Int `compare` id (abs _) :: Int  =  LT
abs _ :: Int `compare` id (_ + _) :: Int  =  LT
abs _ :: Int `compare` id (head _) :: Int  =  LT
abs _ :: Int `compare` id (ord _) :: Int  =  LT
abs _ :: Int `compare` negate x :: Int  =  LT
abs _ :: Int `compare` negate 0 :: Int  =  LT
abs _ :: Int `compare` negate (id _) :: Int  =  LT
abs _ :: Int `compare` abs x :: Int  =  LT
abs _ :: Int `compare` abs 0 :: Int  =  LT
abs _ :: Int `compare` abs (id _) :: Int  =  LT
abs _ :: Int `compare` _ + x :: Int  =  LT
abs _ :: Int `compare` _ + 0 :: Int  =  LT
abs _ :: Int `compare` _ + id _ :: Int  =  LT
abs _ :: Int `compare` x + _ :: Int  =  LT
abs _ :: Int `compare` 0 + _ :: Int  =  LT
abs _ :: Int `compare` id _ + _ :: Int  =  LT
abs _ :: Int `compare` _ * _ :: Int  =  LT
abs _ :: Int `compare` f _ :: Int  =  GT
abs _ :: Int `compare` head xs :: Int  =  LT
abs _ :: Int `compare` head [] :: Int  =  LT
abs _ :: Int `compare` head (_:_) :: Int  =  LT
abs _ :: Int `compare` ord c :: Int  =  GT
abs _ :: Int `compare` ord 'a' :: Int  =  LT
abs _ :: Int `compare` q :: Bool  =  GT
abs _ :: Int `compare` not p :: Bool  =  GT
abs _ :: Int `compare` not False :: Bool  =  LT
abs _ :: Int `compare` not True :: Bool  =  LT
abs _ :: Int `compare` not (not _) :: Bool  =  LT
abs _ :: Int `compare` _ || _ :: Bool  =  LT
abs _ :: Int `compare` d :: Char  =  GT
abs _ :: Int `compare` ' ' :: Char  =  GT
abs _ :: Int `compare` ys :: [Int]  =  GT
abs _ :: Int `compare` [0] :: [Int]  =  GT
abs _ :: Int `compare` _:xs :: [Int]  =  LT
abs _ :: Int `compare` [_] :: [Int]  =  LT
abs _ :: Int `compare` _:_:_ :: [Int]  =  LT
abs _ :: Int `compare` x:_ :: [Int]  =  LT
abs _ :: Int `compare` 0:_ :: [Int]  =  LT
abs _ :: Int `compare` id _:_ :: [Int]  =  LT
abs _ :: Int `compare` tail _ :: [Int]  =  LT
abs _ :: Int `compare` _ ++ _ :: [Int]  =  LT
abs _ :: Int `compare` negate :: Int -> Int  =  GT
abs _ :: Int `compare` abs :: Int -> Int  =  GT
abs _ :: Int `compare` (_ +) :: Int -> Int  =  LT
abs _ :: Int `compare` (*) :: Int -> Int -> Int  =  GT
abs _ :: Int `compare` not :: Bool -> Bool  =  GT
abs _ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
_ + _ :: Int `compare` z :: Int  =  GT
_ + _ :: Int `compare` -1 :: Int  =  GT
_ + _ :: Int `compare` id y :: Int  =  GT
_ + _ :: Int `compare` id 1 :: Int  =  GT
_ + _ :: Int `compare` id (id x) :: Int  =  LT
_ + _ :: Int `compare` id (id 0) :: Int  =  LT
_ + _ :: Int `compare` id (id (id _)) :: Int  =  LT
_ + _ :: Int `compare` id (negate _) :: Int  =  LT
_ + _ :: Int `compare` id (abs _) :: Int  =  LT
_ + _ :: Int `compare` id (_ + _) :: Int  =  LT
_ + _ :: Int `compare` id (head _) :: Int  =  LT
_ + _ :: Int `compare` id (ord _) :: Int  =  LT
_ + _ :: Int `compare` negate x :: Int  =  GT
_ + _ :: Int `compare` negate 0 :: Int  =  GT
_ + _ :: Int `compare` negate (id _) :: Int  =  LT
_ + _ :: Int `compare` abs x :: Int  =  GT
_ + _ :: Int `compare` abs 0 :: Int  =  GT
_ + _ :: Int `compare` abs (id _) :: Int  =  LT
_ + _ :: Int `compare` _ + x :: Int  =  GT
_ + _ :: Int `compare` _ + 0 :: Int  =  LT
_ + _ :: Int `compare` _ + id _ :: Int  =  LT
_ + _ :: Int `compare` x + _ :: Int  =  GT
_ + _ :: Int `compare` 0 + _ :: Int  =  LT
_ + _ :: Int `compare` id _ + _ :: Int  =  LT
_ + _ :: Int `compare` _ * _ :: Int  =  GT
_ + _ :: Int `compare` f _ :: Int  =  GT
_ + _ :: Int `compare` head xs :: Int  =  GT
_ + _ :: Int `compare` head [] :: Int  =  GT
_ + _ :: Int `compare` head (_:_) :: Int  =  LT
_ + _ :: Int `compare` ord c :: Int  =  GT
_ + _ :: Int `compare` ord 'a' :: Int  =  GT
_ + _ :: Int `compare` q :: Bool  =  GT
_ + _ :: Int `compare` not p :: Bool  =  GT
_ + _ :: Int `compare` not False :: Bool  =  GT
_ + _ :: Int `compare` not True :: Bool  =  GT
_ + _ :: Int `compare` not (not _) :: Bool  =  LT
_ + _ :: Int `compare` _ || _ :: Bool  =  GT
_ + _ :: Int `compare` d :: Char  =  GT
_ + _ :: Int `compare` ' ' :: Char  =  GT
_ + _ :: Int `compare` ys :: [Int]  =  GT
_ + _ :: Int `compare` [0] :: [Int]  =  GT
_ + _ :: Int `compare` _:xs :: [Int]  =  GT
_ + _ :: Int `compare` [_] :: [Int]  =  LT
_ + _ :: Int `compare` _:_:_ :: [Int]  =  LT
_ + _ :: Int `compare` x:_ :: [Int]  =  GT
_ + _ :: Int `compare` 0:_ :: [Int]  =  LT
_ + _ :: Int `compare` id _:_ :: [Int]  =  LT
_ + _ :: Int `compare` tail _ :: [Int]  =  GT
_ + _ :: Int `compare` _ ++ _ :: [Int]  =  LT
_ + _ :: Int `compare` negate :: Int -> Int  =  GT
_ + _ :: Int `compare` abs :: Int -> Int  =  GT
_ + _ :: Int `compare` (_ +) :: Int -> Int  =  GT
_ + _ :: Int `compare` (*) :: Int -> Int -> Int  =  GT
_ + _ :: Int `compare` not :: Bool -> Bool  =  GT
_ + _ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
head _ :: Int `compare` z :: Int  =  GT
head _ :: Int `compare` -1 :: Int  =  GT
head _ :: Int `compare` id y :: Int  =  GT
head _ :: Int `compare` id 1 :: Int  =  LT
head _ :: Int `compare` id (id x) :: Int  =  LT
head _ :: Int `compare` id (id 0) :: Int  =  LT
head _ :: Int `compare` id (id (id _)) :: Int  =  LT
head _ :: Int `compare` id (negate _) :: Int  =  LT
head _ :: Int `compare` id (abs _) :: Int  =  LT
head _ :: Int `compare` id (_ + _) :: Int  =  LT
head _ :: Int `compare` id (head _) :: Int  =  LT
head _ :: Int `compare` id (ord _) :: Int  =  LT
head _ :: Int `compare` negate x :: Int  =  GT
head _ :: Int `compare` negate 0 :: Int  =  LT
head _ :: Int `compare` negate (id _) :: Int  =  LT
head _ :: Int `compare` abs x :: Int  =  GT
head _ :: Int `compare` abs 0 :: Int  =  LT
head _ :: Int `compare` abs (id _) :: Int  =  LT
head _ :: Int `compare` _ + x :: Int  =  LT
head _ :: Int `compare` _ + 0 :: Int  =  LT
head _ :: Int `compare` _ + id _ :: Int  =  LT
head _ :: Int `compare` x + _ :: Int  =  LT
head _ :: Int `compare` 0 + _ :: Int  =  LT
head _ :: Int `compare` id _ + _ :: Int  =  LT
head _ :: Int `compare` _ * _ :: Int  =  LT
head _ :: Int `compare` f _ :: Int  =  GT
head _ :: Int `compare` head xs :: Int  =  LT
head _ :: Int `compare` head [] :: Int  =  LT
head _ :: Int `compare` head (_:_) :: Int  =  LT
head _ :: Int `compare` ord c :: Int  =  GT
head _ :: Int `compare` ord 'a' :: Int  =  LT
head _ :: Int `compare` q :: Bool  =  GT
head _ :: Int `compare` not p :: Bool  =  GT
head _ :: Int `compare` not False :: Bool  =  LT
head _ :: Int `compare` not True :: Bool  =  LT
head _ :: Int `compare` not (not _) :: Bool  =  LT
head _ :: Int `compare` _ || _ :: Bool  =  LT
head _ :: Int `compare` d :: Char  =  GT
head _ :: Int `compare` ' ' :: Char  =  GT
head _ :: Int `compare` ys :: [Int]  =  GT
head _ :: Int `compare` [0] :: [Int]  =  GT
head _ :: Int `compare` _:xs :: [Int]  =  LT
head _ :: Int `compare` [_] :: [Int]  =  LT
head _ :: Int `compare` _:_:_ :: [Int]  =  LT
head _ :: Int `compare` x:_ :: [Int]  =  LT
head _ :: Int `compare` 0:_ :: [Int]  =  LT
head _ :: Int `compare` id _:_ :: [Int]  =  LT
head _ :: Int `compare` tail _ :: [Int]  =  LT
head _ :: Int `compare` _ ++ _ :: [Int]  =  LT
head _ :: Int `compare` negate :: Int -> Int  =  GT
head _ :: Int `compare` abs :: Int -> Int  =  GT
head _ :: Int `compare` (_ +) :: Int -> Int  =  LT
head _ :: Int `compare` (*) :: Int -> Int -> Int  =  GT
head _ :: Int `compare` not :: Bool -> Bool  =  GT
head _ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
ord _ :: Int `compare` z :: Int  =  GT
ord _ :: Int `compare` -1 :: Int  =  GT
ord _ :: Int `compare` id y :: Int  =  LT
ord _ :: Int `compare` id 1 :: Int  =  LT
ord _ :: Int `compare` id (id x) :: Int  =  LT
ord _ :: Int `compare` id (id 0) :: Int  =  LT
ord _ :: Int `compare` id (id (id _)) :: Int  =  LT
ord _ :: Int `compare` id (negate _) :: Int  =  LT
ord _ :: Int `compare` id (abs _) :: Int  =  LT
ord _ :: Int `compare` id (_ + _) :: Int  =  LT
ord _ :: Int `compare` id (head _) :: Int  =  LT
ord _ :: Int `compare` id (ord _) :: Int  =  LT
ord _ :: Int `compare` negate x :: Int  =  LT
ord _ :: Int `compare` negate 0 :: Int  =  LT
ord _ :: Int `compare` negate (id _) :: Int  =  LT
ord _ :: Int `compare` abs x :: Int  =  LT
ord _ :: Int `compare` abs 0 :: Int  =  LT
ord _ :: Int `compare` abs (id _) :: Int  =  LT
ord _ :: Int `compare` _ + x :: Int  =  LT
ord _ :: Int `compare` _ + 0 :: Int  =  LT
ord _ :: Int `compare` _ + id _ :: Int  =  LT
ord _ :: Int `compare` x + _ :: Int  =  LT
ord _ :: Int `compare` 0 + _ :: Int  =  LT
ord _ :: Int `compare` id _ + _ :: Int  =  LT
ord _ :: Int `compare` _ * _ :: Int  =  LT
ord _ :: Int `compare` f _ :: Int  =  GT
ord _ :: Int `compare` head xs :: Int  =  LT
ord _ :: Int `compare` head [] :: Int  =  LT
ord _ :: Int `compare` head (_:_) :: Int  =  LT
ord _ :: Int `compare` ord c :: Int  =  LT
ord _ :: Int `compare` ord 'a' :: Int  =  LT
ord _ :: Int `compare` q :: Bool  =  GT
ord _ :: Int `compare` not p :: Bool  =  GT
ord _ :: Int `compare` not False :: Bool  =  LT
ord _ :: Int `compare` not True :: Bool  =  LT
ord _ :: Int `compare` not (not _) :: Bool  =  LT
ord _ :: Int `compare` _ || _ :: Bool  =  LT
ord _ :: Int `compare` d :: Char  =  GT
ord _ :: Int `compare` ' ' :: Char  =  GT
ord _ :: Int `compare` ys :: [Int]  =  GT
ord _ :: Int `compare` [0] :: [Int]  =  GT
ord _ :: Int `compare` _:xs :: [Int]  =  LT
ord _ :: Int `compare` [_] :: [Int]  =  LT
ord _ :: Int `compare` _:_:_ :: [Int]  =  LT
ord _ :: Int `compare` x:_ :: [Int]  =  LT
ord _ :: Int `compare` 0:_ :: [Int]  =  LT
ord _ :: Int `compare` id _:_ :: [Int]  =  LT
ord _ :: Int `compare` tail _ :: [Int]  =  LT
ord _ :: Int `compare` _ ++ _ :: [Int]  =  LT
ord _ :: Int `compare` negate :: Int -> Int  =  GT
ord _ :: Int `compare` abs :: Int -> Int  =  GT
ord _ :: Int `compare` (_ +) :: Int -> Int  =  LT
ord _ :: Int `compare` (*) :: Int -> Int -> Int  =  GT
ord _ :: Int `compare` not :: Bool -> Bool  =  GT
ord _ :: Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
p :: Bool `compare` z :: Int  =  LT
p :: Bool `compare` -1 :: Int  =  LT
p :: Bool `compare` id y :: Int  =  LT
p :: Bool `compare` id 1 :: Int  =  LT
p :: Bool `compare` id (id x) :: Int  =  LT
p :: Bool `compare` id (id 0) :: Int  =  LT
p :: Bool `compare` id (id (id _)) :: Int  =  LT
p :: Bool `compare` id (negate _) :: Int  =  LT
p :: Bool `compare` id (abs _) :: Int  =  LT
p :: Bool `compare` id (_ + _) :: Int  =  LT
p :: Bool `compare` id (head _) :: Int  =  LT
p :: Bool `compare` id (ord _) :: Int  =  LT
p :: Bool `compare` negate x :: Int  =  LT
p :: Bool `compare` negate 0 :: Int  =  LT
p :: Bool `compare` negate (id _) :: Int  =  LT
p :: Bool `compare` abs x :: Int  =  LT
p :: Bool `compare` abs 0 :: Int  =  LT
p :: Bool `compare` abs (id _) :: Int  =  LT
p :: Bool `compare` _ + x :: Int  =  LT
p :: Bool `compare` _ + 0 :: Int  =  LT
p :: Bool `compare` _ + id _ :: Int  =  LT
p :: Bool `compare` x + _ :: Int  =  LT
p :: Bool `compare` 0 + _ :: Int  =  LT
p :: Bool `compare` id _ + _ :: Int  =  LT
p :: Bool `compare` _ * _ :: Int  =  LT
p :: Bool `compare` f _ :: Int  =  LT
p :: Bool `compare` head xs :: Int  =  LT
p :: Bool `compare` head [] :: Int  =  LT
p :: Bool `compare` head (_:_) :: Int  =  LT
p :: Bool `compare` ord c :: Int  =  LT
p :: Bool `compare` ord 'a' :: Int  =  LT
p :: Bool `compare` q :: Bool  =  LT
p :: Bool `compare` not p :: Bool  =  LT
p :: Bool `compare` not False :: Bool  =  LT
p :: Bool `compare` not True :: Bool  =  LT
p :: Bool `compare` not (not _) :: Bool  =  LT
p :: Bool `compare` _ || _ :: Bool  =  LT
p :: Bool `compare` d :: Char  =  LT
p :: Bool `compare` ' ' :: Char  =  LT
p :: Bool `compare` ys :: [Int]  =  LT
p :: Bool `compare` [0] :: [Int]  =  LT
p :: Bool `compare` _:xs :: [Int]  =  LT
p :: Bool `compare` [_] :: [Int]  =  LT
p :: Bool `compare` _:_:_ :: [Int]  =  LT
p :: Bool `compare` x:_ :: [Int]  =  LT
p :: Bool `compare` 0:_ :: [Int]  =  LT
p :: Bool `compare` id _:_ :: [Int]  =  LT
p :: Bool `compare` tail _ :: [Int]  =  LT
p :: Bool `compare` _ ++ _ :: [Int]  =  LT
p :: Bool `compare` negate :: Int -> Int  =  LT
p :: Bool `compare` abs :: Int -> Int  =  LT
p :: Bool `compare` (_ +) :: Int -> Int  =  LT
p :: Bool `compare` (*) :: Int -> Int -> Int  =  LT
p :: Bool `compare` not :: Bool -> Bool  =  LT
p :: Bool `compare` (||) :: Bool -> Bool -> Bool  =  LT
False :: Bool `compare` z :: Int  =  GT
False :: Bool `compare` -1 :: Int  =  LT
False :: Bool `compare` id y :: Int  =  LT
False :: Bool `compare` id 1 :: Int  =  LT
False :: Bool `compare` id (id x) :: Int  =  LT
False :: Bool `compare` id (id 0) :: Int  =  LT
False :: Bool `compare` id (id (id _)) :: Int  =  LT
False :: Bool `compare` id (negate _) :: Int  =  LT
False :: Bool `compare` id (abs _) :: Int  =  LT
False :: Bool `compare` id (_ + _) :: Int  =  LT
False :: Bool `compare` id (head _) :: Int  =  LT
False :: Bool `compare` id (ord _) :: Int  =  LT
False :: Bool `compare` negate x :: Int  =  LT
False :: Bool `compare` negate 0 :: Int  =  LT
False :: Bool `compare` negate (id _) :: Int  =  LT
False :: Bool `compare` abs x :: Int  =  LT
False :: Bool `compare` abs 0 :: Int  =  LT
False :: Bool `compare` abs (id _) :: Int  =  LT
False :: Bool `compare` _ + x :: Int  =  LT
False :: Bool `compare` _ + 0 :: Int  =  LT
False :: Bool `compare` _ + id _ :: Int  =  LT
False :: Bool `compare` x + _ :: Int  =  LT
False :: Bool `compare` 0 + _ :: Int  =  LT
False :: Bool `compare` id _ + _ :: Int  =  LT
False :: Bool `compare` _ * _ :: Int  =  LT
False :: Bool `compare` f _ :: Int  =  LT
False :: Bool `compare` head xs :: Int  =  LT
False :: Bool `compare` head [] :: Int  =  LT
False :: Bool `compare` head (_:_) :: Int  =  LT
False :: Bool `compare` ord c :: Int  =  LT
False :: Bool `compare` ord 'a' :: Int  =  LT
False :: Bool `compare` q :: Bool  =  GT
False :: Bool `compare` not p :: Bool  =  LT
False :: Bool `compare` not False :: Bool  =  LT
False :: Bool `compare` not True :: Bool  =  LT
False :: Bool `compare` not (not _) :: Bool  =  LT
False :: Bool `compare` _ || _ :: Bool  =  LT
False :: Bool `compare` d :: Char  =  GT
False :: Bool `compare` ' ' :: Char  =  LT
False :: Bool `compare` ys :: [Int]  =  GT
False :: Bool `compare` [0] :: [Int]  =  LT
False :: Bool `compare` _:xs :: [Int]  =  LT
False :: Bool `compare` [_] :: [Int]  =  LT
False :: Bool `compare` _:_:_ :: [Int]  =  LT
False :: Bool `compare` x:_ :: [Int]  =  LT
False :: Bool `compare` 0:_ :: [Int]  =  LT
False :: Bool `compare` id _:_ :: [Int]  =  LT
False :: Bool `compare` tail _ :: [Int]  =  LT
False :: Bool `compare` _ ++ _ :: [Int]  =  LT
False :: Bool `compare` negate :: Int -> Int  =  LT
False :: Bool `compare` abs :: Int -> Int  =  LT
False :: Bool `compare` (_ +) :: Int -> Int  =  LT
False :: Bool `compare` (*) :: Int -> Int -> Int  =  LT
False :: Bool `compare` not :: Bool -> Bool  =  LT
False :: Bool `compare` (||) :: Bool -> Bool -> Bool  =  LT
True :: Bool `compare` z :: Int  =  GT
True :: Bool `compare` -1 :: Int  =  LT
True :: Bool `compare` id y :: Int  =  LT
True :: Bool `compare` id 1 :: Int  =  LT
True :: Bool `compare` id (id x) :: Int  =  LT
True :: Bool `compare` id (id 0) :: Int  =  LT
True :: Bool `compare` id (id (id _)) :: Int  =  LT
True :: Bool `compare` id (negate _) :: Int  =  LT
True :: Bool `compare` id (abs _) :: Int  =  LT
True :: Bool `compare` id (_ + _) :: Int  =  LT
True :: Bool `compare` id (head _) :: Int  =  LT
True :: Bool `compare` id (ord _) :: Int  =  LT
True :: Bool `compare` negate x :: Int  =  LT
True :: Bool `compare` negate 0 :: Int  =  LT
True :: Bool `compare` negate (id _) :: Int  =  LT
True :: Bool `compare` abs x :: Int  =  LT
True :: Bool `compare` abs 0 :: Int  =  LT
True :: Bool `compare` abs (id _) :: Int  =  LT
True :: Bool `compare` _ + x :: Int  =  LT
True :: Bool `compare` _ + 0 :: Int  =  LT
True :: Bool `compare` _ + id _ :: Int  =  LT
True :: Bool `compare` x + _ :: Int  =  LT
True :: Bool `compare` 0 + _ :: Int  =  LT
True :: Bool `compare` id _ + _ :: Int  =  LT
True :: Bool `compare` _ * _ :: Int  =  LT
True :: Bool `compare` f _ :: Int  =  LT
True :: Bool `compare` head xs :: Int  =  LT
True :: Bool `compare` head [] :: Int  =  LT
True :: Bool `compare` head (_:_) :: Int  =  LT
True :: Bool `compare` ord c :: Int  =  LT
True :: Bool `compare` ord 'a' :: Int  =  LT
True :: Bool `compare` q :: Bool  =  GT
True :: Bool `compare` not p :: Bool  =  LT
True :: Bool `compare` not False :: Bool  =  LT
True :: Bool `compare` not True :: Bool  =  LT
True :: Bool `compare` not (not _) :: Bool  =  LT
True :: Bool `compare` _ || _ :: Bool  =  LT
True :: Bool `compare` d :: Char  =  GT
True :: Bool `compare` ' ' :: Char  =  LT
True :: Bool `compare` ys :: [Int]  =  GT
True :: Bool `compare` [0] :: [Int]  =  LT
True :: Bool `compare` _:xs :: [Int]  =  LT
True :: Bool `compare` [_] :: [Int]  =  LT
True :: Bool `compare` _:_:_ :: [Int]  =  LT
True :: Bool `compare` x:_ :: [Int]  =  LT
True :: Bool `compare` 0:_ :: [Int]  =  LT
True :: Bool `compare` id _:_ :: [Int]  =  LT
True :: Bool `compare` tail _ :: [Int]  =  LT
True :: Bool `compare` _ ++ _ :: [Int]  =  LT
True :: Bool `compare` negate :: Int -> Int  =  LT
True :: Bool `compare` abs :: Int -> Int  =  LT
True :: Bool `compare` (_ +) :: Int -> Int  =  LT
True :: Bool `compare` (*) :: Int -> Int -> Int  =  LT
True :: Bool `compare` not :: Bool -> Bool  =  LT
True :: Bool `compare` (||) :: Bool -> Bool -> Bool  =  LT
not _ :: Bool `compare` z :: Int  =  GT
not _ :: Bool `compare` -1 :: Int  =  GT
not _ :: Bool `compare` id y :: Int  =  LT
not _ :: Bool `compare` id 1 :: Int  =  LT
not _ :: Bool `compare` id (id x) :: Int  =  LT
not _ :: Bool `compare` id (id 0) :: Int  =  LT
not _ :: Bool `compare` id (id (id _)) :: Int  =  LT
not _ :: Bool `compare` id (negate _) :: Int  =  LT
not _ :: Bool `compare` id (abs _) :: Int  =  LT
not _ :: Bool `compare` id (_ + _) :: Int  =  LT
not _ :: Bool `compare` id (head _) :: Int  =  LT
not _ :: Bool `compare` id (ord _) :: Int  =  LT
not _ :: Bool `compare` negate x :: Int  =  LT
not _ :: Bool `compare` negate 0 :: Int  =  LT
not _ :: Bool `compare` negate (id _) :: Int  =  LT
not _ :: Bool `compare` abs x :: Int  =  LT
not _ :: Bool `compare` abs 0 :: Int  =  LT
not _ :: Bool `compare` abs (id _) :: Int  =  LT
not _ :: Bool `compare` _ + x :: Int  =  LT
not _ :: Bool `compare` _ + 0 :: Int  =  LT
not _ :: Bool `compare` _ + id _ :: Int  =  LT
not _ :: Bool `compare` x + _ :: Int  =  LT
not _ :: Bool `compare` 0 + _ :: Int  =  LT
not _ :: Bool `compare` id _ + _ :: Int  =  LT
not _ :: Bool `compare` _ * _ :: Int  =  LT
not _ :: Bool `compare` f _ :: Int  =  GT
not _ :: Bool `compare` head xs :: Int  =  LT
not _ :: Bool `compare` head [] :: Int  =  LT
not _ :: Bool `compare` head (_:_) :: Int  =  LT
not _ :: Bool `compare` ord c :: Int  =  LT
not _ :: Bool `compare` ord 'a' :: Int  =  LT
not _ :: Bool `compare` q :: Bool  =  GT
not _ :: Bool `compare` not p :: Bool  =  LT
not _ :: Bool `compare` not False :: Bool  =  LT
not _ :: Bool `compare` not True :: Bool  =  LT
not _ :: Bool `compare` not (not _) :: Bool  =  LT
not _ :: Bool `compare` _ || _ :: Bool  =  LT
not _ :: Bool `compare` d :: Char  =  GT
not _ :: Bool `compare` ' ' :: Char  =  GT
not _ :: Bool `compare` ys :: [Int]  =  GT
not _ :: Bool `compare` [0] :: [Int]  =  GT
not _ :: Bool `compare` _:xs :: [Int]  =  LT
not _ :: Bool `compare` [_] :: [Int]  =  LT
not _ :: Bool `compare` _:_:_ :: [Int]  =  LT
not _ :: Bool `compare` x:_ :: [Int]  =  LT
not _ :: Bool `compare` 0:_ :: [Int]  =  LT
not _ :: Bool `compare` id _:_ :: [Int]  =  LT
not _ :: Bool `compare` tail _ :: [Int]  =  LT
not _ :: Bool `compare` _ ++ _ :: [Int]  =  LT
not _ :: Bool `compare` negate :: Int -> Int  =  GT
not _ :: Bool `compare` abs :: Int -> Int  =  GT
not _ :: Bool `compare` (_ +) :: Int -> Int  =  LT
not _ :: Bool `compare` (*) :: Int -> Int -> Int  =  GT
not _ :: Bool `compare` not :: Bool -> Bool  =  GT
not _ :: Bool `compare` (||) :: Bool -> Bool -> Bool  =  GT
c :: Char `compare` z :: Int  =  LT
c :: Char `compare` -1 :: Int  =  LT
c :: Char `compare` id y :: Int  =  LT
c :: Char `compare` id 1 :: Int  =  LT
c :: Char `compare` id (id x) :: Int  =  LT
c :: Char `compare` id (id 0) :: Int  =  LT
c :: Char `compare` id (id (id _)) :: Int  =  LT
c :: Char `compare` id (negate _) :: Int  =  LT
c :: Char `compare` id (abs _) :: Int  =  LT
c :: Char `compare` id (_ + _) :: Int  =  LT
c :: Char `compare` id (head _) :: Int  =  LT
c :: Char `compare` id (ord _) :: Int  =  LT
c :: Char `compare` negate x :: Int  =  LT
c :: Char `compare` negate 0 :: Int  =  LT
c :: Char `compare` negate (id _) :: Int  =  LT
c :: Char `compare` abs x :: Int  =  LT
c :: Char `compare` abs 0 :: Int  =  LT
c :: Char `compare` abs (id _) :: Int  =  LT
c :: Char `compare` _ + x :: Int  =  LT
c :: Char `compare` _ + 0 :: Int  =  LT
c :: Char `compare` _ + id _ :: Int  =  LT
c :: Char `compare` x + _ :: Int  =  LT
c :: Char `compare` 0 + _ :: Int  =  LT
c :: Char `compare` id _ + _ :: Int  =  LT
c :: Char `compare` _ * _ :: Int  =  LT
c :: Char `compare` f _ :: Int  =  LT
c :: Char `compare` head xs :: Int  =  LT
c :: Char `compare` head [] :: Int  =  LT
c :: Char `compare` head (_:_) :: Int  =  LT
c :: Char `compare` ord c :: Int  =  LT
c :: Char `compare` ord 'a' :: Int  =  LT
c :: Char `compare` q :: Bool  =  GT
c :: Char `compare` not p :: Bool  =  LT
c :: Char `compare` not False :: Bool  =  LT
c :: Char `compare` not True :: Bool  =  LT
c :: Char `compare` not (not _) :: Bool  =  LT
c :: Char `compare` _ || _ :: Bool  =  LT
c :: Char `compare` d :: Char  =  LT
c :: Char `compare` ' ' :: Char  =  LT
c :: Char `compare` ys :: [Int]  =  LT
c :: Char `compare` [0] :: [Int]  =  LT
c :: Char `compare` _:xs :: [Int]  =  LT
c :: Char `compare` [_] :: [Int]  =  LT
c :: Char `compare` _:_:_ :: [Int]  =  LT
c :: Char `compare` x:_ :: [Int]  =  LT
c :: Char `compare` 0:_ :: [Int]  =  LT
c :: Char `compare` id _:_ :: [Int]  =  LT
c :: Char `compare` tail _ :: [Int]  =  LT
c :: Char `compare` _ ++ _ :: [Int]  =  LT
c :: Char `compare` negate :: Int -> Int  =  LT
c :: Char `compare` abs :: Int -> Int  =  LT
c :: Char `compare` (_ +) :: Int -> Int  =  LT
c :: Char `compare` (*) :: Int -> Int -> Int  =  LT
c :: Char `compare` not :: Bool -> Bool  =  LT
c :: Char `compare` (||) :: Bool -> Bool -> Bool  =  LT
'a' :: Char `compare` z :: Int  =  GT
'a' :: Char `compare` -1 :: Int  =  LT
'a' :: Char `compare` id y :: Int  =  LT
'a' :: Char `compare` id 1 :: Int  =  LT
'a' :: Char `compare` id (id x) :: Int  =  LT
'a' :: Char `compare` id (id 0) :: Int  =  LT
'a' :: Char `compare` id (id (id _)) :: Int  =  LT
'a' :: Char `compare` id (negate _) :: Int  =  LT
'a' :: Char `compare` id (abs _) :: Int  =  LT
'a' :: Char `compare` id (_ + _) :: Int  =  LT
'a' :: Char `compare` id (head _) :: Int  =  LT
'a' :: Char `compare` id (ord _) :: Int  =  LT
'a' :: Char `compare` negate x :: Int  =  LT
'a' :: Char `compare` negate 0 :: Int  =  LT
'a' :: Char `compare` negate (id _) :: Int  =  LT
'a' :: Char `compare` abs x :: Int  =  LT
'a' :: Char `compare` abs 0 :: Int  =  LT
'a' :: Char `compare` abs (id _) :: Int  =  LT
'a' :: Char `compare` _ + x :: Int  =  LT
'a' :: Char `compare` _ + 0 :: Int  =  LT
'a' :: Char `compare` _ + id _ :: Int  =  LT
'a' :: Char `compare` x + _ :: Int  =  LT
'a' :: Char `compare` 0 + _ :: Int  =  LT
'a' :: Char `compare` id _ + _ :: Int  =  LT
'a' :: Char `compare` _ * _ :: Int  =  LT
'a' :: Char `compare` f _ :: Int  =  LT
'a' :: Char `compare` head xs :: Int  =  LT
'a' :: Char `compare` head [] :: Int  =  LT
'a' :: Char `compare` head (_:_) :: Int  =  LT
'a' :: Char `compare` ord c :: Int  =  LT
'a' :: Char `compare` ord 'a' :: Int  =  LT
'a' :: Char `compare` q :: Bool  =  GT
'a' :: Char `compare` not p :: Bool  =  LT
'a' :: Char `compare` not False :: Bool  =  LT
'a' :: Char `compare` not True :: Bool  =  LT
'a' :: Char `compare` not (not _) :: Bool  =  LT
'a' :: Char `compare` _ || _ :: Bool  =  LT
'a' :: Char `compare` d :: Char  =  GT
'a' :: Char `compare` ' ' :: Char  =  GT
'a' :: Char `compare` ys :: [Int]  =  GT
'a' :: Char `compare` [0] :: [Int]  =  LT
'a' :: Char `compare` _:xs :: [Int]  =  LT
'a' :: Char `compare` [_] :: [Int]  =  LT
'a' :: Char `compare` _:_:_ :: [Int]  =  LT
'a' :: Char `compare` x:_ :: [Int]  =  LT
'a' :: Char `compare` 0:_ :: [Int]  =  LT
'a' :: Char `compare` id _:_ :: [Int]  =  LT
'a' :: Char `compare` tail _ :: [Int]  =  LT
'a' :: Char `compare` _ ++ _ :: [Int]  =  LT
'a' :: Char `compare` negate :: Int -> Int  =  LT
'a' :: Char `compare` abs :: Int -> Int  =  LT
'a' :: Char `compare` (_ +) :: Int -> Int  =  LT
'a' :: Char `compare` (*) :: Int -> Int -> Int  =  LT
'a' :: Char `compare` not :: Bool -> Bool  =  LT
'a' :: Char `compare` (||) :: Bool -> Bool -> Bool  =  LT
xs :: [Int] `compare` z :: Int  =  GT
xs :: [Int] `compare` -1 :: Int  =  LT
xs :: [Int] `compare` id y :: Int  =  LT
xs :: [Int] `compare` id 1 :: Int  =  LT
xs :: [Int] `compare` id (id x) :: Int  =  LT
xs :: [Int] `compare` id (id 0) :: Int  =  LT
xs :: [Int] `compare` id (id (id _)) :: Int  =  LT
xs :: [Int] `compare` id (negate _) :: Int  =  LT
xs :: [Int] `compare` id (abs _) :: Int  =  LT
xs :: [Int] `compare` id (_ + _) :: Int  =  LT
xs :: [Int] `compare` id (head _) :: Int  =  LT
xs :: [Int] `compare` id (ord _) :: Int  =  LT
xs :: [Int] `compare` negate x :: Int  =  LT
xs :: [Int] `compare` negate 0 :: Int  =  LT
xs :: [Int] `compare` negate (id _) :: Int  =  LT
xs :: [Int] `compare` abs x :: Int  =  LT
xs :: [Int] `compare` abs 0 :: Int  =  LT
xs :: [Int] `compare` abs (id _) :: Int  =  LT
xs :: [Int] `compare` _ + x :: Int  =  LT
xs :: [Int] `compare` _ + 0 :: Int  =  LT
xs :: [Int] `compare` _ + id _ :: Int  =  LT
xs :: [Int] `compare` x + _ :: Int  =  LT
xs :: [Int] `compare` 0 + _ :: Int  =  LT
xs :: [Int] `compare` id _ + _ :: Int  =  LT
xs :: [Int] `compare` _ * _ :: Int  =  LT
xs :: [Int] `compare` f _ :: Int  =  LT
xs :: [Int] `compare` head xs :: Int  =  LT
xs :: [Int] `compare` head [] :: Int  =  LT
xs :: [Int] `compare` head (_:_) :: Int  =  LT
xs :: [Int] `compare` ord c :: Int  =  LT
xs :: [Int] `compare` ord 'a' :: Int  =  LT
xs :: [Int] `compare` q :: Bool  =  GT
xs :: [Int] `compare` not p :: Bool  =  LT
xs :: [Int] `compare` not False :: Bool  =  LT
xs :: [Int] `compare` not True :: Bool  =  LT
xs :: [Int] `compare` not (not _) :: Bool  =  LT
xs :: [Int] `compare` _ || _ :: Bool  =  LT
xs :: [Int] `compare` d :: Char  =  GT
xs :: [Int] `compare` ' ' :: Char  =  LT
xs :: [Int] `compare` ys :: [Int]  =  LT
xs :: [Int] `compare` [0] :: [Int]  =  LT
xs :: [Int] `compare` _:xs :: [Int]  =  LT
xs :: [Int] `compare` [_] :: [Int]  =  LT
xs :: [Int] `compare` _:_:_ :: [Int]  =  LT
xs :: [Int] `compare` x:_ :: [Int]  =  LT
xs :: [Int] `compare` 0:_ :: [Int]  =  LT
xs :: [Int] `compare` id _:_ :: [Int]  =  LT
xs :: [Int] `compare` tail _ :: [Int]  =  LT
xs :: [Int] `compare` _ ++ _ :: [Int]  =  LT
xs :: [Int] `compare` negate :: Int -> Int  =  LT
xs :: [Int] `compare` abs :: Int -> Int  =  LT
xs :: [Int] `compare` (_ +) :: Int -> Int  =  LT
xs :: [Int] `compare` (*) :: Int -> Int -> Int  =  LT
xs :: [Int] `compare` not :: Bool -> Bool  =  LT
xs :: [Int] `compare` (||) :: Bool -> Bool -> Bool  =  LT
[] :: [Int] `compare` z :: Int  =  GT
[] :: [Int] `compare` -1 :: Int  =  GT
[] :: [Int] `compare` id y :: Int  =  LT
[] :: [Int] `compare` id 1 :: Int  =  LT
[] :: [Int] `compare` id (id x) :: Int  =  LT
[] :: [Int] `compare` id (id 0) :: Int  =  LT
[] :: [Int] `compare` id (id (id _)) :: Int  =  LT
[] :: [Int] `compare` id (negate _) :: Int  =  LT
[] :: [Int] `compare` id (abs _) :: Int  =  LT
[] :: [Int] `compare` id (_ + _) :: Int  =  LT
[] :: [Int] `compare` id (head _) :: Int  =  LT
[] :: [Int] `compare` id (ord _) :: Int  =  LT
[] :: [Int] `compare` negate x :: Int  =  LT
[] :: [Int] `compare` negate 0 :: Int  =  LT
[] :: [Int] `compare` negate (id _) :: Int  =  LT
[] :: [Int] `compare` abs x :: Int  =  LT
[] :: [Int] `compare` abs 0 :: Int  =  LT
[] :: [Int] `compare` abs (id _) :: Int  =  LT
[] :: [Int] `compare` _ + x :: Int  =  LT
[] :: [Int] `compare` _ + 0 :: Int  =  LT
[] :: [Int] `compare` _ + id _ :: Int  =  LT
[] :: [Int] `compare` x + _ :: Int  =  LT
[] :: [Int] `compare` 0 + _ :: Int  =  LT
[] :: [Int] `compare` id _ + _ :: Int  =  LT
[] :: [Int] `compare` _ * _ :: Int  =  LT
[] :: [Int] `compare` f _ :: Int  =  LT
[] :: [Int] `compare` head xs :: Int  =  LT
[] :: [Int] `compare` head [] :: Int  =  LT
[] :: [Int] `compare` head (_:_) :: Int  =  LT
[] :: [Int] `compare` ord c :: Int  =  LT
[] :: [Int] `compare` ord 'a' :: Int  =  LT
[] :: [Int] `compare` q :: Bool  =  GT
[] :: [Int] `compare` not p :: Bool  =  LT
[] :: [Int] `compare` not False :: Bool  =  LT
[] :: [Int] `compare` not True :: Bool  =  LT
[] :: [Int] `compare` not (not _) :: Bool  =  LT
[] :: [Int] `compare` _ || _ :: Bool  =  LT
[] :: [Int] `compare` d :: Char  =  GT
[] :: [Int] `compare` ' ' :: Char  =  GT
[] :: [Int] `compare` ys :: [Int]  =  GT
[] :: [Int] `compare` [0] :: [Int]  =  LT
[] :: [Int] `compare` _:xs :: [Int]  =  LT
[] :: [Int] `compare` [_] :: [Int]  =  LT
[] :: [Int] `compare` _:_:_ :: [Int]  =  LT
[] :: [Int] `compare` x:_ :: [Int]  =  LT
[] :: [Int] `compare` 0:_ :: [Int]  =  LT
[] :: [Int] `compare` id _:_ :: [Int]  =  LT
[] :: [Int] `compare` tail _ :: [Int]  =  LT
[] :: [Int] `compare` _ ++ _ :: [Int]  =  LT
[] :: [Int] `compare` negate :: Int -> Int  =  LT
[] :: [Int] `compare` abs :: Int -> Int  =  LT
[] :: [Int] `compare` (_ +) :: Int -> Int  =  LT
[] :: [Int] `compare` (*) :: Int -> Int -> Int  =  LT
[] :: [Int] `compare` not :: Bool -> Bool  =  LT
[] :: [Int] `compare` (||) :: Bool -> Bool -> Bool  =  LT
_:_ :: [Int] `compare` z :: Int  =  GT
_:_ :: [Int] `compare` -1 :: Int  =  GT
_:_ :: [Int] `compare` id y :: Int  =  GT
_:_ :: [Int] `compare` id 1 :: Int  =  GT
_:_ :: [Int] `compare` id (id x) :: Int  =  LT
_:_ :: [Int] `compare` id (id 0) :: Int  =  LT
_:_ :: [Int] `compare` id (id (id _)) :: Int  =  LT
_:_ :: [Int] `compare` id (negate _) :: Int  =  LT
_:_ :: [Int] `compare` id (abs _) :: Int  =  LT
_:_ :: [Int] `compare` id (_ + _) :: Int  =  LT
_:_ :: [Int] `compare` id (head _) :: Int  =  LT
_:_ :: [Int] `compare` id (ord _) :: Int  =  LT
_:_ :: [Int] `compare` negate x :: Int  =  GT
_:_ :: [Int] `compare` negate 0 :: Int  =  GT
_:_ :: [Int] `compare` negate (id _) :: Int  =  LT
_:_ :: [Int] `compare` abs x :: Int  =  GT
_:_ :: [Int] `compare` abs 0 :: Int  =  GT
_:_ :: [Int] `compare` abs (id _) :: Int  =  LT
_:_ :: [Int] `compare` _ + x :: Int  =  GT
_:_ :: [Int] `compare` _ + 0 :: Int  =  LT
_:_ :: [Int] `compare` _ + id _ :: Int  =  LT
_:_ :: [Int] `compare` x + _ :: Int  =  GT
_:_ :: [Int] `compare` 0 + _ :: Int  =  LT
_:_ :: [Int] `compare` id _ + _ :: Int  =  LT
_:_ :: [Int] `compare` _ * _ :: Int  =  LT
_:_ :: [Int] `compare` f _ :: Int  =  GT
_:_ :: [Int] `compare` head xs :: Int  =  GT
_:_ :: [Int] `compare` head [] :: Int  =  GT
_:_ :: [Int] `compare` head (_:_) :: Int  =  LT
_:_ :: [Int] `compare` ord c :: Int  =  GT
_:_ :: [Int] `compare` ord 'a' :: Int  =  GT
_:_ :: [Int] `compare` q :: Bool  =  GT
_:_ :: [Int] `compare` not p :: Bool  =  GT
_:_ :: [Int] `compare` not False :: Bool  =  GT
_:_ :: [Int] `compare` not True :: Bool  =  GT
_:_ :: [Int] `compare` not (not _) :: Bool  =  LT
_:_ :: [Int] `compare` _ || _ :: Bool  =  LT
_:_ :: [Int] `compare` d :: Char  =  GT
_:_ :: [Int] `compare` ' ' :: Char  =  GT
_:_ :: [Int] `compare` ys :: [Int]  =  GT
_:_ :: [Int] `compare` [0] :: [Int]  =  GT
_:_ :: [Int] `compare` _:xs :: [Int]  =  LT
_:_ :: [Int] `compare` [_] :: [Int]  =  LT
_:_ :: [Int] `compare` _:_:_ :: [Int]  =  LT
_:_ :: [Int] `compare` x:_ :: [Int]  =  LT
_:_ :: [Int] `compare` 0:_ :: [Int]  =  LT
_:_ :: [Int] `compare` id _:_ :: [Int]  =  LT
_:_ :: [Int] `compare` tail _ :: [Int]  =  GT
_:_ :: [Int] `compare` _ ++ _ :: [Int]  =  LT
_:_ :: [Int] `compare` negate :: Int -> Int  =  GT
_:_ :: [Int] `compare` abs :: Int -> Int  =  GT
_:_ :: [Int] `compare` (_ +) :: Int -> Int  =  GT
_:_ :: [Int] `compare` (*) :: Int -> Int -> Int  =  GT
_:_ :: [Int] `compare` not :: Bool -> Bool  =  GT
_:_ :: [Int] `compare` (||) :: Bool -> Bool -> Bool  =  GT
id :: Int -> Int `compare` z :: Int  =  GT
id :: Int -> Int `compare` -1 :: Int  =  GT
id :: Int -> Int `compare` id y :: Int  =  LT
id :: Int -> Int `compare` id 1 :: Int  =  LT
id :: Int -> Int `compare` id (id x) :: Int  =  LT
id :: Int -> Int `compare` id (id 0) :: Int  =  LT
id :: Int -> Int `compare` id (id (id _)) :: Int  =  LT
id :: Int -> Int `compare` id (negate _) :: Int  =  LT
id :: Int -> Int `compare` id (abs _) :: Int  =  LT
id :: Int -> Int `compare` id (_ + _) :: Int  =  LT
id :: Int -> Int `compare` id (head _) :: Int  =  LT
id :: Int -> Int `compare` id (ord _) :: Int  =  LT
id :: Int -> Int `compare` negate x :: Int  =  LT
id :: Int -> Int `compare` negate 0 :: Int  =  LT
id :: Int -> Int `compare` negate (id _) :: Int  =  LT
id :: Int -> Int `compare` abs x :: Int  =  LT
id :: Int -> Int `compare` abs 0 :: Int  =  LT
id :: Int -> Int `compare` abs (id _) :: Int  =  LT
id :: Int -> Int `compare` _ + x :: Int  =  LT
id :: Int -> Int `compare` _ + 0 :: Int  =  LT
id :: Int -> Int `compare` _ + id _ :: Int  =  LT
id :: Int -> Int `compare` x + _ :: Int  =  LT
id :: Int -> Int `compare` 0 + _ :: Int  =  LT
id :: Int -> Int `compare` id _ + _ :: Int  =  LT
id :: Int -> Int `compare` _ * _ :: Int  =  LT
id :: Int -> Int `compare` f _ :: Int  =  LT
id :: Int -> Int `compare` head xs :: Int  =  LT
id :: Int -> Int `compare` head [] :: Int  =  LT
id :: Int -> Int `compare` head (_:_) :: Int  =  LT
id :: Int -> Int `compare` ord c :: Int  =  LT
id :: Int -> Int `compare` ord 'a' :: Int  =  LT
id :: Int -> Int `compare` q :: Bool  =  GT
id :: Int -> Int `compare` not p :: Bool  =  LT
id :: Int -> Int `compare` not False :: Bool  =  LT
id :: Int -> Int `compare` not True :: Bool  =  LT
id :: Int -> Int `compare` not (not _) :: Bool  =  LT
id :: Int -> Int `compare` _ || _ :: Bool  =  LT
id :: Int -> Int `compare` d :: Char  =  GT
id :: Int -> Int `compare` ' ' :: Char  =  GT
id :: Int -> Int `compare` ys :: [Int]  =  GT
id :: Int -> Int `compare` [0] :: [Int]  =  GT
id :: Int -> Int `compare` _:xs :: [Int]  =  LT
id :: Int -> Int `compare` [_] :: [Int]  =  LT
id :: Int -> Int `compare` _:_:_ :: [Int]  =  LT
id :: Int -> Int `compare` x:_ :: [Int]  =  LT
id :: Int -> Int `compare` 0:_ :: [Int]  =  LT
id :: Int -> Int `compare` id _:_ :: [Int]  =  LT
id :: Int -> Int `compare` tail _ :: [Int]  =  LT
id :: Int -> Int `compare` _ ++ _ :: [Int]  =  LT
id :: Int -> Int `compare` negate :: Int -> Int  =  LT
id :: Int -> Int `compare` abs :: Int -> Int  =  LT
id :: Int -> Int `compare` (_ +) :: Int -> Int  =  LT
id :: Int -> Int `compare` (*) :: Int -> Int -> Int  =  LT
id :: Int -> Int `compare` not :: Bool -> Bool  =  GT
id :: Int -> Int `compare` (||) :: Bool -> Bool -> Bool  =  LT
(+) :: Int -> Int -> Int `compare` z :: Int  =  GT
(+) :: Int -> Int -> Int `compare` -1 :: Int  =  GT
(+) :: Int -> Int -> Int `compare` id y :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id 1 :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (id x) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (id 0) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (id (id _)) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (negate _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (abs _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (_ + _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (head _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id (ord _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` negate x :: Int  =  LT
(+) :: Int -> Int -> Int `compare` negate 0 :: Int  =  LT
(+) :: Int -> Int -> Int `compare` negate (id _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` abs x :: Int  =  LT
(+) :: Int -> Int -> Int `compare` abs 0 :: Int  =  LT
(+) :: Int -> Int -> Int `compare` abs (id _) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` _ + x :: Int  =  LT
(+) :: Int -> Int -> Int `compare` _ + 0 :: Int  =  LT
(+) :: Int -> Int -> Int `compare` _ + id _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` x + _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` 0 + _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` id _ + _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` _ * _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` f _ :: Int  =  LT
(+) :: Int -> Int -> Int `compare` head xs :: Int  =  LT
(+) :: Int -> Int -> Int `compare` head [] :: Int  =  LT
(+) :: Int -> Int -> Int `compare` head (_:_) :: Int  =  LT
(+) :: Int -> Int -> Int `compare` ord c :: Int  =  LT
(+) :: Int -> Int -> Int `compare` ord 'a' :: Int  =  LT
(+) :: Int -> Int -> Int `compare` q :: Bool  =  GT
(+) :: Int -> Int -> Int `compare` not p :: Bool  =  LT
(+) :: Int -> Int -> Int `compare` not False :: Bool  =  LT
(+) :: Int -> Int -> Int `compare` not True :: Bool  =  LT
(+) :: Int -> Int -> Int `compare` not (not _) :: Bool  =  LT
(+) :: Int -> Int -> Int `compare` _ || _ :: Bool  =  LT
(+) :: Int -> Int -> Int `compare` d :: Char  =  GT
(+) :: Int -> Int -> Int `compare` ' ' :: Char  =  GT
(+) :: Int -> Int -> Int `compare` ys :: [Int]  =  GT
(+) :: Int -> Int -> Int `compare` [0] :: [Int]  =  GT
(+) :: Int -> Int -> Int `compare` _:xs :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` [_] :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` _:_:_ :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` x:_ :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` 0:_ :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` id _:_ :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` tail _ :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` _ ++ _ :: [Int]  =  LT
(+) :: Int -> Int -> Int `compare` negate :: Int -> Int  =  GT
(+) :: Int -> Int -> Int `compare` abs :: Int -> Int  =  GT
(+) :: Int -> Int -> Int `compare` (_ +) :: Int -> Int  =  LT
(+) :: Int -> Int -> Int `compare` (*) :: Int -> Int -> Int  =  GT
(+) :: Int -> Int -> Int `compare` not :: Bool -> Bool  =  GT
(+) :: Int -> Int -> Int `compare` (||) :: Bool -> Bool -> Bool  =  GT
z :: Int `compare` y :: Int  =  GT
z :: Int `compare` 1 :: Int  =  LT
z :: Int `compare` id x :: Int  =  LT
z :: Int `compare` id 0 :: Int  =  LT
z :: Int `compare` id (id _) :: Int  =  LT
z :: Int `compare` negate _ :: Int  =  LT
z :: Int `compare` abs _ :: Int  =  LT
z :: Int `compare` _ + _ :: Int  =  LT
z :: Int `compare` head _ :: Int  =  LT
z :: Int `compare` ord _ :: Int  =  LT
z :: Int `compare` p :: Bool  =  GT
z :: Int `compare` False :: Bool  =  LT
z :: Int `compare` True :: Bool  =  LT
z :: Int `compare` not _ :: Bool  =  LT
z :: Int `compare` c :: Char  =  GT
z :: Int `compare` 'a' :: Char  =  LT
z :: Int `compare` xs :: [Int]  =  LT
z :: Int `compare` [] :: [Int]  =  LT
z :: Int `compare` _:_ :: [Int]  =  LT
z :: Int `compare` id :: Int -> Int  =  LT
z :: Int `compare` (+) :: Int -> Int -> Int  =  LT
-1 :: Int `compare` y :: Int  =  GT
-1 :: Int `compare` 1 :: Int  =  GT
-1 :: Int `compare` id x :: Int  =  LT
-1 :: Int `compare` id 0 :: Int  =  LT
-1 :: Int `compare` id (id _) :: Int  =  LT
-1 :: Int `compare` negate _ :: Int  =  LT
-1 :: Int `compare` abs _ :: Int  =  LT
-1 :: Int `compare` _ + _ :: Int  =  LT
-1 :: Int `compare` head _ :: Int  =  LT
-1 :: Int `compare` ord _ :: Int  =  LT
-1 :: Int `compare` p :: Bool  =  GT
-1 :: Int `compare` False :: Bool  =  GT
-1 :: Int `compare` True :: Bool  =  GT
-1 :: Int `compare` not _ :: Bool  =  LT
-1 :: Int `compare` c :: Char  =  GT
-1 :: Int `compare` 'a' :: Char  =  GT
-1 :: Int `compare` xs :: [Int]  =  GT
-1 :: Int `compare` [] :: [Int]  =  LT
-1 :: Int `compare` _:_ :: [Int]  =  LT
-1 :: Int `compare` id :: Int -> Int  =  LT
-1 :: Int `compare` (+) :: Int -> Int -> Int  =  LT
id y :: Int `compare` y :: Int  =  GT
id y :: Int `compare` 1 :: Int  =  GT
id y :: Int `compare` id x :: Int  =  GT
id y :: Int `compare` id 0 :: Int  =  LT
id y :: Int `compare` id (id _) :: Int  =  LT
id y :: Int `compare` negate _ :: Int  =  LT
id y :: Int `compare` abs _ :: Int  =  LT
id y :: Int `compare` _ + _ :: Int  =  LT
id y :: Int `compare` head _ :: Int  =  LT
id y :: Int `compare` ord _ :: Int  =  GT
id y :: Int `compare` p :: Bool  =  GT
id y :: Int `compare` False :: Bool  =  GT
id y :: Int `compare` True :: Bool  =  GT
id y :: Int `compare` not _ :: Bool  =  GT
id y :: Int `compare` c :: Char  =  GT
id y :: Int `compare` 'a' :: Char  =  GT
id y :: Int `compare` xs :: [Int]  =  GT
id y :: Int `compare` [] :: [Int]  =  GT
id y :: Int `compare` _:_ :: [Int]  =  LT
id y :: Int `compare` id :: Int -> Int  =  GT
id y :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id 1 :: Int `compare` y :: Int  =  GT
id 1 :: Int `compare` 1 :: Int  =  GT
id 1 :: Int `compare` id x :: Int  =  GT
id 1 :: Int `compare` id 0 :: Int  =  GT
id 1 :: Int `compare` id (id _) :: Int  =  LT
id 1 :: Int `compare` negate _ :: Int  =  GT
id 1 :: Int `compare` abs _ :: Int  =  GT
id 1 :: Int `compare` _ + _ :: Int  =  LT
id 1 :: Int `compare` head _ :: Int  =  GT
id 1 :: Int `compare` ord _ :: Int  =  GT
id 1 :: Int `compare` p :: Bool  =  GT
id 1 :: Int `compare` False :: Bool  =  GT
id 1 :: Int `compare` True :: Bool  =  GT
id 1 :: Int `compare` not _ :: Bool  =  GT
id 1 :: Int `compare` c :: Char  =  GT
id 1 :: Int `compare` 'a' :: Char  =  GT
id 1 :: Int `compare` xs :: [Int]  =  GT
id 1 :: Int `compare` [] :: [Int]  =  GT
id 1 :: Int `compare` _:_ :: [Int]  =  LT
id 1 :: Int `compare` id :: Int -> Int  =  GT
id 1 :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (id x) :: Int `compare` y :: Int  =  GT
id (id x) :: Int `compare` 1 :: Int  =  GT
id (id x) :: Int `compare` id x :: Int  =  GT
id (id x) :: Int `compare` id 0 :: Int  =  GT
id (id x) :: Int `compare` id (id _) :: Int  =  GT
id (id x) :: Int `compare` negate _ :: Int  =  GT
id (id x) :: Int `compare` abs _ :: Int  =  GT
id (id x) :: Int `compare` _ + _ :: Int  =  GT
id (id x) :: Int `compare` head _ :: Int  =  GT
id (id x) :: Int `compare` ord _ :: Int  =  GT
id (id x) :: Int `compare` p :: Bool  =  GT
id (id x) :: Int `compare` False :: Bool  =  GT
id (id x) :: Int `compare` True :: Bool  =  GT
id (id x) :: Int `compare` not _ :: Bool  =  GT
id (id x) :: Int `compare` c :: Char  =  GT
id (id x) :: Int `compare` 'a' :: Char  =  GT
id (id x) :: Int `compare` xs :: [Int]  =  GT
id (id x) :: Int `compare` [] :: [Int]  =  GT
id (id x) :: Int `compare` _:_ :: [Int]  =  GT
id (id x) :: Int `compare` id :: Int -> Int  =  GT
id (id x) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (id 0) :: Int `compare` y :: Int  =  GT
id (id 0) :: Int `compare` 1 :: Int  =  GT
id (id 0) :: Int `compare` id x :: Int  =  GT
id (id 0) :: Int `compare` id 0 :: Int  =  GT
id (id 0) :: Int `compare` id (id _) :: Int  =  GT
id (id 0) :: Int `compare` negate _ :: Int  =  GT
id (id 0) :: Int `compare` abs _ :: Int  =  GT
id (id 0) :: Int `compare` _ + _ :: Int  =  GT
id (id 0) :: Int `compare` head _ :: Int  =  GT
id (id 0) :: Int `compare` ord _ :: Int  =  GT
id (id 0) :: Int `compare` p :: Bool  =  GT
id (id 0) :: Int `compare` False :: Bool  =  GT
id (id 0) :: Int `compare` True :: Bool  =  GT
id (id 0) :: Int `compare` not _ :: Bool  =  GT
id (id 0) :: Int `compare` c :: Char  =  GT
id (id 0) :: Int `compare` 'a' :: Char  =  GT
id (id 0) :: Int `compare` xs :: [Int]  =  GT
id (id 0) :: Int `compare` [] :: [Int]  =  GT
id (id 0) :: Int `compare` _:_ :: [Int]  =  GT
id (id 0) :: Int `compare` id :: Int -> Int  =  GT
id (id 0) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (id (id _)) :: Int `compare` y :: Int  =  GT
id (id (id _)) :: Int `compare` 1 :: Int  =  GT
id (id (id _)) :: Int `compare` id x :: Int  =  GT
id (id (id _)) :: Int `compare` id 0 :: Int  =  GT
id (id (id _)) :: Int `compare` id (id _) :: Int  =  GT
id (id (id _)) :: Int `compare` negate _ :: Int  =  GT
id (id (id _)) :: Int `compare` abs _ :: Int  =  GT
id (id (id _)) :: Int `compare` _ + _ :: Int  =  GT
id (id (id _)) :: Int `compare` head _ :: Int  =  GT
id (id (id _)) :: Int `compare` ord _ :: Int  =  GT
id (id (id _)) :: Int `compare` p :: Bool  =  GT
id (id (id _)) :: Int `compare` False :: Bool  =  GT
id (id (id _)) :: Int `compare` True :: Bool  =  GT
id (id (id _)) :: Int `compare` not _ :: Bool  =  GT
id (id (id _)) :: Int `compare` c :: Char  =  GT
id (id (id _)) :: Int `compare` 'a' :: Char  =  GT
id (id (id _)) :: Int `compare` xs :: [Int]  =  GT
id (id (id _)) :: Int `compare` [] :: [Int]  =  GT
id (id (id _)) :: Int `compare` _:_ :: [Int]  =  GT
id (id (id _)) :: Int `compare` id :: Int -> Int  =  GT
id (id (id _)) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (negate _) :: Int `compare` y :: Int  =  GT
id (negate _) :: Int `compare` 1 :: Int  =  GT
id (negate _) :: Int `compare` id x :: Int  =  GT
id (negate _) :: Int `compare` id 0 :: Int  =  GT
id (negate _) :: Int `compare` id (id _) :: Int  =  GT
id (negate _) :: Int `compare` negate _ :: Int  =  GT
id (negate _) :: Int `compare` abs _ :: Int  =  GT
id (negate _) :: Int `compare` _ + _ :: Int  =  GT
id (negate _) :: Int `compare` head _ :: Int  =  GT
id (negate _) :: Int `compare` ord _ :: Int  =  GT
id (negate _) :: Int `compare` p :: Bool  =  GT
id (negate _) :: Int `compare` False :: Bool  =  GT
id (negate _) :: Int `compare` True :: Bool  =  GT
id (negate _) :: Int `compare` not _ :: Bool  =  GT
id (negate _) :: Int `compare` c :: Char  =  GT
id (negate _) :: Int `compare` 'a' :: Char  =  GT
id (negate _) :: Int `compare` xs :: [Int]  =  GT
id (negate _) :: Int `compare` [] :: [Int]  =  GT
id (negate _) :: Int `compare` _:_ :: [Int]  =  GT
id (negate _) :: Int `compare` id :: Int -> Int  =  GT
id (negate _) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (abs _) :: Int `compare` y :: Int  =  GT
id (abs _) :: Int `compare` 1 :: Int  =  GT
id (abs _) :: Int `compare` id x :: Int  =  GT
id (abs _) :: Int `compare` id 0 :: Int  =  GT
id (abs _) :: Int `compare` id (id _) :: Int  =  GT
id (abs _) :: Int `compare` negate _ :: Int  =  GT
id (abs _) :: Int `compare` abs _ :: Int  =  GT
id (abs _) :: Int `compare` _ + _ :: Int  =  GT
id (abs _) :: Int `compare` head _ :: Int  =  GT
id (abs _) :: Int `compare` ord _ :: Int  =  GT
id (abs _) :: Int `compare` p :: Bool  =  GT
id (abs _) :: Int `compare` False :: Bool  =  GT
id (abs _) :: Int `compare` True :: Bool  =  GT
id (abs _) :: Int `compare` not _ :: Bool  =  GT
id (abs _) :: Int `compare` c :: Char  =  GT
id (abs _) :: Int `compare` 'a' :: Char  =  GT
id (abs _) :: Int `compare` xs :: [Int]  =  GT
id (abs _) :: Int `compare` [] :: [Int]  =  GT
id (abs _) :: Int `compare` _:_ :: [Int]  =  GT
id (abs _) :: Int `compare` id :: Int -> Int  =  GT
id (abs _) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (_ + _) :: Int `compare` y :: Int  =  GT
id (_ + _) :: Int `compare` 1 :: Int  =  GT
id (_ + _) :: Int `compare` id x :: Int  =  GT
id (_ + _) :: Int `compare` id 0 :: Int  =  GT
id (_ + _) :: Int `compare` id (id _) :: Int  =  GT
id (_ + _) :: Int `compare` negate _ :: Int  =  GT
id (_ + _) :: Int `compare` abs _ :: Int  =  GT
id (_ + _) :: Int `compare` _ + _ :: Int  =  GT
id (_ + _) :: Int `compare` head _ :: Int  =  GT
id (_ + _) :: Int `compare` ord _ :: Int  =  GT
id (_ + _) :: Int `compare` p :: Bool  =  GT
id (_ + _) :: Int `compare` False :: Bool  =  GT
id (_ + _) :: Int `compare` True :: Bool  =  GT
id (_ + _) :: Int `compare` not _ :: Bool  =  GT
id (_ + _) :: Int `compare` c :: Char  =  GT
id (_ + _) :: Int `compare` 'a' :: Char  =  GT
id (_ + _) :: Int `compare` xs :: [Int]  =  GT
id (_ + _) :: Int `compare` [] :: [Int]  =  GT
id (_ + _) :: Int `compare` _:_ :: [Int]  =  GT
id (_ + _) :: Int `compare` id :: Int -> Int  =  GT
id (_ + _) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (head _) :: Int `compare` y :: Int  =  GT
id (head _) :: Int `compare` 1 :: Int  =  GT
id (head _) :: Int `compare` id x :: Int  =  GT
id (head _) :: Int `compare` id 0 :: Int  =  GT
id (head _) :: Int `compare` id (id _) :: Int  =  GT
id (head _) :: Int `compare` negate _ :: Int  =  GT
id (head _) :: Int `compare` abs _ :: Int  =  GT
id (head _) :: Int `compare` _ + _ :: Int  =  GT
id (head _) :: Int `compare` head _ :: Int  =  GT
id (head _) :: Int `compare` ord _ :: Int  =  GT
id (head _) :: Int `compare` p :: Bool  =  GT
id (head _) :: Int `compare` False :: Bool  =  GT
id (head _) :: Int `compare` True :: Bool  =  GT
id (head _) :: Int `compare` not _ :: Bool  =  GT
id (head _) :: Int `compare` c :: Char  =  GT
id (head _) :: Int `compare` 'a' :: Char  =  GT
id (head _) :: Int `compare` xs :: [Int]  =  GT
id (head _) :: Int `compare` [] :: [Int]  =  GT
id (head _) :: Int `compare` _:_ :: [Int]  =  GT
id (head _) :: Int `compare` id :: Int -> Int  =  GT
id (head _) :: Int `compare` (+) :: Int -> Int -> Int  =  GT
id (ord _) :: Int `compare` y :: Int  =  GT
id (ord _) :: Int `compare` 1 :: Int  =  GT
id (ord _) :: Int `compare` id x :: Int  =  GT
id (ord _) :: Int `compare` id 0 :: Int  =  GT
id (ord _) :: Int `compare` id (id _) :: Int  =  GT
id (ord _) :: Int `compare` negate _ :: Int  =  GT
id (ord _) :: Int `compare` abs _ :: Int  =  GT
id (ord _) :: Int `compare` _ + _ :: Int  =  GT
id (ord _) :: Int `compare` head _ :: Int  =  GT
id (ord _) :: Int `compare` ord _ :: Int  =  GT

